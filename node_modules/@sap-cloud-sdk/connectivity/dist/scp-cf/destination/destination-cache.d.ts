import { Cache } from '../cache';
import { JwtPayload } from '../jsonwebtoken-type';
import { Destination } from './destination-service-types';
import { DestinationsByType } from './destination-accessor-types';
/**
 * Enumerator that selects the isolation type of destination in cache.
 * The used isolation strategy is either `Tenant` or `Tenant_User` because we want to get results for subaccount and provider tenants which rules out no-isolation or user isolation.
 */
export declare enum IsolationStrategy {
    Tenant = "Tenant",
    Tenant_User = "TenantUser"
}
/**
 * @internal
 */
export interface DestinationCacheType {
    retrieveDestinationFromCache: (decodedJwt: Record<string, any>, name: string, isolation: IsolationStrategy) => Destination | undefined;
    cacheRetrievedDestination: (decodedJwt: Record<string, any>, destination: Destination, isolation: IsolationStrategy) => void;
    cacheRetrievedDestinations: (decodedJwt: Record<string, any>, retrievedDestinations: DestinationsByType, isolation: IsolationStrategy) => void;
    clear: () => void;
    getCacheInstance: () => Cache<Destination>;
}
/**
 * DestinationCache constructor.
 * @param cache - Cache object which is used in DestiantionCache
 * @returns A destination cache object.
 * @internal
 */
export declare const DestinationCache: (cache: Cache<Destination>) => DestinationCacheType;
/**
 * Calculates a cache key based on the jwt and destination name for the given isolation strategy.
 * Cache keys for strategies are non-overlapping, i.e. using a cache key for strategy [[IsolationStrategy.Tenant]]
 * will not result in a cache hit for a destination that has been cached with strategy [[IsolationStrategy.Tenant_User]].
 * @param decodedJwt - The decoded JWT of the current request.
 * @param destinationName - The name of the destination.
 * @param isolationStrategy - The strategy used to isolate cache entries.
 * @returns The cache key.
 * @internal
 */
export declare function getDestinationCacheKey(decodedJwt: Record<string, any>, destinationName: string, isolationStrategy?: IsolationStrategy): string | undefined;
/**
 * @internal
 */
export declare const destinationCache: DestinationCacheType;
/**
 * Determin the default Isolation strategy if not given as option.
 * @param jwt - JWT to determine the default isolation strategy
 * @returns The isolation strategy based on the JWT. If no JWT is given it defaults to Tenant isolation
 * @internal
 */
export declare function getDefaultIsolationStrategy(jwt: JwtPayload | undefined): IsolationStrategy;
//# sourceMappingURL=destination-cache.d.ts.map