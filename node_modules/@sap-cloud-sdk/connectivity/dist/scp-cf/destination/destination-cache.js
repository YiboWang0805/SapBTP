"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultIsolationStrategy = exports.destinationCache = exports.getDestinationCacheKey = exports.DestinationCache = exports.IsolationStrategy = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const cache_1 = require("../cache");
const tenant_1 = require("../tenant");
const user_1 = require("../user");
const logger = (0, util_1.createLogger)({
    package: 'connectivity',
    messageContext: 'destination-cache'
});
/**
 * Enumerator that selects the isolation type of destination in cache.
 * The used isolation strategy is either `Tenant` or `Tenant_User` because we want to get results for subaccount and provider tenants which rules out no-isolation or user isolation.
 */
var IsolationStrategy;
(function (IsolationStrategy) {
    IsolationStrategy["Tenant"] = "Tenant";
    IsolationStrategy["Tenant_User"] = "TenantUser";
})(IsolationStrategy = exports.IsolationStrategy || (exports.IsolationStrategy = {}));
/**
 * DestinationCache constructor.
 * @param cache - Cache object which is used in DestiantionCache
 * @returns A destination cache object.
 * @internal
 */
const DestinationCache = (cache) => ({
    retrieveDestinationFromCache: (decodedJwt, name, isolation) => cache.get(getDestinationCacheKey(decodedJwt, name, isolation)),
    cacheRetrievedDestination: (decodedJwt, destination, isolation) => {
        cacheRetrievedDestination(decodedJwt, destination, isolation, cache);
    },
    cacheRetrievedDestinations: (decodedJwt, retrievedDestinations, isolation) => {
        retrievedDestinations.subaccount.forEach(dest => cacheRetrievedDestination(decodedJwt, dest, isolation, cache));
        retrievedDestinations.instance.forEach(dest => cacheRetrievedDestination(decodedJwt, dest, isolation, cache));
    },
    clear: () => {
        cache.clear();
    },
    getCacheInstance: () => cache
});
exports.DestinationCache = DestinationCache;
/**
 * Calculates a cache key based on the jwt and destination name for the given isolation strategy.
 * Cache keys for strategies are non-overlapping, i.e. using a cache key for strategy [[IsolationStrategy.Tenant]]
 * will not result in a cache hit for a destination that has been cached with strategy [[IsolationStrategy.Tenant_User]].
 * @param decodedJwt - The decoded JWT of the current request.
 * @param destinationName - The name of the destination.
 * @param isolationStrategy - The strategy used to isolate cache entries.
 * @returns The cache key.
 * @internal
 */
function getDestinationCacheKey(decodedJwt, destinationName, isolationStrategy = IsolationStrategy.Tenant_User) {
    const tenant = (0, tenant_1.tenantId)(decodedJwt);
    const user = (0, user_1.userId)(decodedJwt);
    switch (isolationStrategy) {
        case IsolationStrategy.Tenant:
            if (tenant) {
                return `${tenant}::${destinationName}`;
            }
            logger.warn(`Cannot get cache key. Isolation strategy ${isolationStrategy} is used, but tenant id is undefined.`);
            return;
        case IsolationStrategy.Tenant_User:
            if (tenant && user) {
                return `${user}:${tenant}:${destinationName}`;
            }
            logger.warn(`Cannot get cache key. Isolation strategy ${isolationStrategy} is used, but tenant id or user id is undefined.`);
            return;
        default:
            logger.warn(`Cannot get cache key. Isolation strategy ${isolationStrategy} is not supported.`);
            return;
    }
}
exports.getDestinationCacheKey = getDestinationCacheKey;
function cacheRetrievedDestination(decodedJwt, destination, isolation, cache) {
    var _a;
    if (!destination.name) {
        throw new Error('The destination name is undefined.');
    }
    const key = getDestinationCacheKey(decodedJwt, destination.name, isolation);
    const expiresIn = (_a = (0, util_1.first)(destination.authTokens || [])) === null || _a === void 0 ? void 0 : _a.expiresIn;
    const expirationTime = expiresIn
        ? Date.now() + parseInt(expiresIn) * 1000
        : undefined;
    cache.set(key, destination, expirationTime);
}
/**
 * @internal
 */
exports.destinationCache = (0, exports.DestinationCache)(new cache_1.Cache({ hours: 0, minutes: 5, seconds: 0 }));
/**
 * Determin the default Isolation strategy if not given as option.
 * @param jwt - JWT to determine the default isolation strategy
 * @returns The isolation strategy based on the JWT. If no JWT is given it defaults to Tenant isolation
 * @internal
 */
function getDefaultIsolationStrategy(jwt) {
    return jwt && (0, user_1.userId)(jwt)
        ? IsolationStrategy.Tenant_User
        : IsolationStrategy.Tenant;
}
exports.getDefaultIsolationStrategy = getDefaultIsolationStrategy;
//# sourceMappingURL=destination-cache.js.map