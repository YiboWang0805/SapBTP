import { Destination } from './destination-service-types';
import { DestinationFetchOptions } from './destination-accessor-types';
/**
 * @internal
 */
export declare const registerDestinationCache: import("./destination-cache").DestinationCacheType;
declare type RegisterDestinationOptions = Pick<DestinationFetchOptions, 'jwt' | 'isolationStrategy'>;
/**
 * Registers a destination in a cache for later usage.
 *
 * Throws an error if a destination with the same name as the given test destination already exists.
 * @param destination - A destination to add to the `destinations` cache.
 * @param options - Options how to cache the destination.
 */
export declare function registerDestination(destination: DestinationWithName, options?: RegisterDestinationOptions): void;
/**
 * @internal
 */
export declare type DestinationWithName = Destination & {
    name: string;
};
/**
 * @internal
 * @param options - The options for searching the cahce
 * @returns Destination - the destination from cache
 */
export declare function searchRegisteredDestination(options: DestinationFetchOptions): Destination | null;
export {};
//# sourceMappingURL=destination-from-registration.d.ts.map