/// <reference types="node" />
import * as http from 'http';
/**
 * @internal
 */
export interface DestinationHttpRequestConfig {
    baseURL: string;
    headers: Record<string, string>;
    params?: Record<string, string>;
    httpAgent?: http.Agent;
    httpsAgent?: http.Agent;
}
/**
 * HTTP Methods supported by the http-client.
 */
export declare type Method = 'get' | 'GET' | 'delete' | 'DELETE' | 'head' | 'HEAD' | 'options' | 'OPTIONS' | 'post' | 'POST' | 'put' | 'PUT' | 'patch' | 'PATCH';
/**
 * This interface is compatible with AxiosRequestConfig.
 */
export declare type HttpRequestConfig = HttpRequestConfigBase & {
    params?: Record<string, any>;
    headers?: Record<string, any>;
};
/**
 * This interface is similar to [[HttpRequestConfig]]. In addition, the `headers` and `params` can be defined with "origin" information.
 * @see [[OriginOptions]]
 */
export declare type HttpRequestConfigWithOrigin = HttpRequestConfigBase & {
    params?: OriginOptions;
    headers?: OriginOptions;
};
/**
 * Type of the parameter encoder.
 */
export declare type ParameterEncoder = (parameter: Record<string, any>) => Record<string, any>;
/**
 * @internal
 */
export interface HttpRequestConfigBase {
    [key: string]: any;
    url?: string;
    method: Method;
    data?: any;
    timeout?: number;
    maxContentLength?: number;
    proxy?: false;
    httpAgent?: any;
    httpsAgent?: any;
    parameterEncoder?: ParameterEncoder;
}
/**
 * @internal
 */
export declare type HttpRequest = DestinationHttpRequestConfig & HttpRequestConfig;
/**
 * @internal
 */
export declare type ExecuteHttpRequestFn<ReturnT> = (request: HttpRequest) => Promise<ReturnT>;
interface KnownHttpResponseFields {
    data: any;
    status: number;
    headers: any;
    request: any;
}
/**
 * Represents an HTTP response, that contains response code, headers, payload and the original request.
 * This interface is compatible with AxiosResponse.
 */
export interface HttpResponse extends KnownHttpResponseFields {
    [otherKey: string]: any;
}
/**
 * Options to configure the behavior when sending HTTP requests.
 * For example, whether the CSRF token is fetched automatically.
 */
export interface HttpRequestOptions {
    /**
     * A boolean value that indicates whether to fetch the csrf token for a non-get request.
     * For a get request, the csrf token is not fetched and this option is ignored.
     * By default, the value is `true`.
     */
    fetchCsrfToken?: boolean;
}
/**
 * This interface is used for defining e.g., headers and query parameters with origin information.
 * The priorities are defined in the [[origins]].
 */
export interface OriginOptions {
    requestConfig: Record<string, any>;
    custom?: Record<string, any>;
}
/**
 * @internal
 */
export declare function isOriginOptions(obj: any): obj is OriginOptions;
/**
 * @internal
 */
export declare function isHttpRequestConfigWithOrigin(requestConfig: HttpRequestConfig | HttpRequestConfigWithOrigin): requestConfig is HttpRequestConfigWithOrigin;
/**
 * @internal
 */
export interface OriginOptionsInternal {
    requestConfig?: Record<string, any>;
    destination?: Record<string, any>;
    destinationProperty?: Record<string, any>;
    custom?: Record<string, any>;
}
export {};
//# sourceMappingURL=http-client-types.d.ts.map