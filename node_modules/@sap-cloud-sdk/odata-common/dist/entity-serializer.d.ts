import { EntityBase } from './entity-base';
import { ComplexTypeNamespace } from './selectable';
import { DeSerializers } from './de-serializers';
import { EntityApi } from './entity-api';
/**
 * Interface representing the return type of the builder function [[entitySerializer]].
 * @internal
 */
export interface EntitySerializer {
    serializeEntity: <EntityT extends EntityBase>(entity: EntityT, entityApi: EntityApi<EntityT, any>, diff?: boolean) => Record<string, any>;
    serializeComplexType: <ComplexTypeNamespaceT extends ComplexTypeNamespace<any> = any>(fieldValue: any, complexTypeNameSpace: ComplexTypeNamespaceT) => any;
    serializeEntityNonCustomFields: <EntityT extends EntityBase>(entity: EntityT, entityApi: EntityApi<EntityT, any>) => Record<string, any>;
}
/**
 * Constructs an entitySerializer given the OData v2 or v4 specific tsToEdm method.
 * The concrete serializers are created in odata/v2/entity-serializer.ts and odata/v4/entity-serializer.ts
 * @param deSerializers - (De-)serializers used for transformation.
 * @returns a entity serializer as defined by [[EntitySerializer]]
 * @internal
 */
export declare function entitySerializer(deSerializers: DeSerializers): EntitySerializer;
//# sourceMappingURL=entity-serializer.d.ts.map