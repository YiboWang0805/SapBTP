import { DestinationOrFetchOptions } from '@sap-cloud-sdk/connectivity';
import { HttpResponse } from '@sap-cloud-sdk/http-client';
import { MethodRequestBuilder } from '../request-builder-base';
import { ODataBatchRequestConfig, ODataRequest } from '../../request';
import { DefaultDeSerializers, DeSerializers } from '../../de-serializers';
import { EntityBase } from '../../entity-base';
import { GetAllRequestBuilderBase } from '../get-all-request-builder-base';
import { GetByKeyRequestBuilderBase } from '../get-by-key-request-builder-base';
import { EntityApi } from '../../entity-api';
import { BatchChangeSet } from './batch-change-set';
import { BatchSubRequestPathType } from './batch-request-options';
/**
 * Create a batch request to invoke multiple requests as a batch. The batch request builder accepts retrieve requests, i. e. [[GetAllRequestBuilder | getAll]] and [[GetByKeyRequestBuilder | getByKey]] requests and change sets, which in turn can contain [[CreateRequestBuilder | create]], [[UpdateRequestBuilder | update]] or [[DeleteRequestBuilder | delete]] requests.
 * The retrieve and change sets will be executed in order, while the order within a change set can vary.
 * @internal
 */
export declare class BatchRequestBuilder<DeSerializersT extends DeSerializers = DefaultDeSerializers> extends MethodRequestBuilder<ODataBatchRequestConfig> {
    readonly defaultServicePath: string;
    readonly requests: (BatchChangeSet<DeSerializersT> | GetAllRequestBuilderBase<EntityBase, DeSerializersT> | GetByKeyRequestBuilderBase<EntityBase, DeSerializersT>)[];
    readonly deSerializers: DeSerializersT | undefined;
    /**
     * Creates an instance of ODataBatchRequestBuilder.
     * @param defaultServicePath - Service path.
     * @param requests - An array of retrieve requests or change sets.
     */
    constructor(defaultServicePath: string, requests: (BatchChangeSet<DeSerializersT> | GetAllRequestBuilderBase<EntityBase, DeSerializersT> | GetByKeyRequestBuilderBase<EntityBase, DeSerializersT>)[]);
    withSubRequestPathType(subRequestPathType: BatchSubRequestPathType): this;
    build(): ODataRequest<ODataBatchRequestConfig>;
    build(destination: DestinationOrFetchOptions): Promise<ODataRequest<ODataBatchRequestConfig>>;
    /**
     * Execute request and return an [[HttpResponse]].
     * @param destination - Destination or DestinationFetchOptions to execute the request against.
     * @returns A promise resolving to an [[HttpResponse]].
     */
    executeRaw(destination: DestinationOrFetchOptions): Promise<HttpResponse>;
    protected getEntityToApiMap(): Record<string, EntityApi<EntityBase, DeSerializersT>>;
    private setPayload;
}
//# sourceMappingURL=batch-request-builder.d.ts.map