"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchRequestBuilder = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const request_builder_base_1 = require("../request-builder-base");
const request_1 = require("../../request");
const batch_change_set_1 = require("./batch-change-set");
const batch_request_serializer_1 = require("./batch-request-serializer");
/**
 * Create a batch request to invoke multiple requests as a batch. The batch request builder accepts retrieve requests, i. e. [[GetAllRequestBuilder | getAll]] and [[GetByKeyRequestBuilder | getByKey]] requests and change sets, which in turn can contain [[CreateRequestBuilder | create]], [[UpdateRequestBuilder | update]] or [[DeleteRequestBuilder | delete]] requests.
 * The retrieve and change sets will be executed in order, while the order within a change set can vary.
 * @internal
 */
class BatchRequestBuilder extends request_builder_base_1.MethodRequestBuilder {
    /**
     * Creates an instance of ODataBatchRequestBuilder.
     * @param defaultServicePath - Service path.
     * @param requests - An array of retrieve requests or change sets.
     */
    constructor(defaultServicePath, requests) {
        var _a;
        super(new request_1.ODataBatchRequestConfig(defaultServicePath));
        this.defaultServicePath = defaultServicePath;
        this.requests = requests;
        this.deSerializers = (_a = (0, util_1.first)(Object.values(this.getEntityToApiMap()))) === null || _a === void 0 ? void 0 : _a.deSerializers;
    }
    withSubRequestPathType(subRequestPathType) {
        this.requestConfig.withSubRequestPathType(subRequestPathType);
        return this;
    }
    build(destination) {
        return destination
            ? super.build(destination).then(request => this.setPayload(request))
            : this.setPayload(super.build());
    }
    /**
     * Execute request and return an [[HttpResponse]].
     * @param destination - Destination or DestinationFetchOptions to execute the request against.
     * @returns A promise resolving to an [[HttpResponse]].
     */
    async executeRaw(destination) {
        return this.build(destination).then(request => request.execute());
    }
    getEntityToApiMap() {
        return this.requests.reduce((apis, request) => ({
            ...apis,
            ...(request instanceof batch_change_set_1.BatchChangeSet
                ? request.requests.reduce((changeSetApis, changesetReq) => ({
                    ...changeSetApis,
                    [changesetReq._entityApi.entityConstructor._entityName]: changesetReq._entityApi
                }), {})
                : {
                    [request._entityApi.entityConstructor._entityName]: request._entityApi
                })
        }), {});
    }
    setPayload(request) {
        request.config.payload = (0, batch_request_serializer_1.serializeBatchRequest)(this, {
            subRequestPathType: request.config.subRequestPathType,
            destination: request.destination
        });
        return request;
    }
}
exports.BatchRequestBuilder = BatchRequestBuilder;
//# sourceMappingURL=batch-request-builder.js.map