"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeBatchRequest = exports.serializeRequest = exports.serializeChangeSet = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const voca_1 = __importDefault(require("voca"));
const uuid_1 = require("uuid");
const request_1 = require("../../request");
const request_builder_base_1 = require("../request-builder-base");
/**
 * Serialize change set to string.
 * @param changeSet - Change set containing a collection of write operations.
 * @param options - Request serialization options.
 * @returns The serialized string representation of a change set.
 * @internal
 */
function serializeChangeSet(changeSet, options = {}) {
    if (changeSet.requests.length) {
        return [
            `Content-Type: multipart/mixed; boundary=${changeSet.boundary}`,
            '',
            `--${changeSet.boundary}`,
            changeSet.requests
                .map(request => serializeRequest(request, options))
                .join(`${util_1.unixEOL}--${changeSet.boundary}${util_1.unixEOL}`),
            `--${changeSet.boundary}--`
        ].join(util_1.unixEOL);
    }
}
exports.serializeChangeSet = serializeChangeSet;
/**
 * Serialize a multipart request to string.
 * @param request - One of [[GetAllRequestBuilder | getAll]], [[GetByKeyRequestBuilder | getByKey]], [[CreateRequestBuilder | create]], [[UpdateRequestBuilder | update]] or [[DeleteRequestBuilder | delete]] request builder.
 * @param options - Request serialization options.
 * @returns The serialized string representation of a multipart request, including the multipart headers.
 * @internal
 */
function serializeRequest(request, options = {}) {
    const odataRequest = new request_1.ODataRequest(request.requestConfig, options.destination);
    const headers = {
        ...odataRequest.defaultHeaders(),
        ...odataRequest.eTagHeaders(),
        ...odataRequest.customHeaders()
    };
    const requestHeaders = Object.entries(headers).map(([key, value]) => `${voca_1.default.titleCase(key)}: ${value}`);
    const method = request.requestConfig.method.toUpperCase();
    return [
        'Content-Type: application/http',
        'Content-Transfer-Encoding: binary',
        ...(method !== 'GET' ? [`Content-Id: ${(0, uuid_1.v4)()}`] : []),
        '',
        `${method} ${getUrl(odataRequest, options.subRequestPathType)} HTTP/1.1`,
        ...(requestHeaders.length ? requestHeaders : ['']),
        '',
        ...getPayload(request),
        ''
    ].join(util_1.unixEOL);
}
exports.serializeRequest = serializeRequest;
function getUrl(request, subRequestPathType) {
    switch (subRequestPathType) {
        case 'absolute':
            return request.url();
        case 'relativeToEntity':
            return `/${request.relativeUrl(false)}`;
        default:
            return `/${request.relativeUrl()}`;
    }
}
function getPayload(request) {
    return request.requestConfig.method !== 'get'
        ? [JSON.stringify(request.requestConfig.payload)]
        : [];
}
function validateOptions(options) {
    var _a;
    // This should never happen. Can only occur if requestbuilder.build() was called which will be removed.
    if (options.subRequestPathType === 'absolute' && !((_a = options.destination) === null || _a === void 0 ? void 0 : _a.url)) {
        throw new Error("Cannot serialize batch request. Invalid destination provided for sub request path type 'absolute'");
    }
}
/**
 * Serialize a batch request to string. This is used for the batch request payload when executing the request.
 * @param request - Batch request to serialize.
 * @param options - Request serialization options.
 * @returns String representation of the batch request.
 * @internal
 */
function serializeBatchRequest(request, options = {}) {
    validateOptions(options);
    const serializedSubRequests = request.requests
        .map(subRequest => subRequest instanceof request_builder_base_1.MethodRequestBuilder
        ? serializeRequest(subRequest, options)
        : serializeChangeSet(subRequest, options))
        .filter(validRequest => !!validRequest)
        .join(`${util_1.unixEOL}--${request.requestConfig.boundary}${util_1.unixEOL}`);
    const serializedBatchRequest = serializedSubRequests
        ? [
            `--${request.requestConfig.boundary}`,
            serializedSubRequests,
            `--${request.requestConfig.boundary}--`,
            ''
        ].join(util_1.unixEOL)
        : serializedSubRequests;
    // The batch standard expects CRLF line endings for batch requests
    return serializedBatchRequest.replace(/\n/g, '\r\n');
}
exports.serializeBatchRequest = serializeBatchRequest;
//# sourceMappingURL=batch-request-serializer.js.map