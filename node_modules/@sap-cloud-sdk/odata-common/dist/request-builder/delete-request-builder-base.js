"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteRequestBuilderBase = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const entity_base_1 = require("../entity-base");
const request_1 = require("../request");
const request_builder_base_1 = require("./request-builder-base");
/**
 * Abstract class to delete an entity holding the shared parts between OData v2 and v4
 * @typeparam EntityT - Type of the entity to be deleted
 * @internal
 */
class DeleteRequestBuilderBase extends request_builder_base_1.MethodRequestBuilder {
    /**
     * Creates an instance of DeleteRequestBuilder. If the entity is passed, version identifier will also be added.
     * @param _entityApi - Entity API for building and executing the request.
     * @param oDataUri - URI conversion functions.
     * @param keysOrEntity - Entity or key-value pairs of key properties for the given entity.
     */
    constructor(_entityApi, oDataUri, keysOrEntity) {
        super(new request_1.ODataDeleteRequestConfig(_entityApi, oDataUri));
        this._entityApi = _entityApi;
        if (keysOrEntity instanceof entity_base_1.EntityBase) {
            this.requestConfig.keys = oDataUri.getEntityKeys(keysOrEntity, _entityApi);
            this.setVersionIdentifier(keysOrEntity.versionIdentifier);
        }
        else {
            this.requestConfig.keys = keysOrEntity;
        }
    }
    /**
     * Instructs the request to force an overwrite of the entity by sending an 'If-Match: *' header instead of sending the ETag version identifier.
     * @returns The request itself to ease chaining while executing the request.
     */
    ignoreVersionIdentifier() {
        this.requestConfig.versionIdentifierIgnored = true;
        return this;
    }
    /**
     * Execute query.
     * @param destination - Destination or DestinationFetchOptions to execute the request against.
     * @returns A promise resolving once the entity was deleted.
     */
    async execute(destination) {
        return (this.executeRaw(destination)
            // Transform response to void
            .then(() => Promise.resolve())
            .catch(error => {
            throw new util_1.ErrorWithCause('OData delete request failed!', error);
        }));
    }
    /**
     * Execute request and return an [[HttpResponse]].
     * @param destination - Destination or DestinationFetchOptions to execute the request against.
     * @returns A promise resolving to an [[HttpResponse]].
     */
    async executeRaw(destination) {
        return this.build(destination).then(request => request.execute());
    }
}
exports.DeleteRequestBuilderBase = DeleteRequestBuilderBase;
//# sourceMappingURL=delete-request-builder-base.js.map