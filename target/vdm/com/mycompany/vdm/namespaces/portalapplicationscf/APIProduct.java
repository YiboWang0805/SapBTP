
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.69.0
 */

package com.mycompany.vdm.namespaces.portalapplicationscf;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.mycompany.vdm.namespaces.portalapplicationscf.field.APIProductField;
import com.mycompany.vdm.namespaces.portalapplicationscf.link.APIProductLink;
import com.mycompany.vdm.namespaces.portalapplicationscf.selectable.APIProductSelectable;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpClientAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;
import com.sap.cloud.sdk.datamodel.odata.helper.ODataTypeValueSerializer;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.odatav2.connectivity.ODataException;
import com.sap.cloud.sdk.odatav2.connectivity.ODataExceptionType;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQuery;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryBuilder;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryResult;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.apache.http.client.HttpClient;
import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;


/**
 * <p>Original entity name from the Odata EDM: <b>APIProduct</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class APIProduct
    extends VdmEntity<APIProduct>
{

    /**
     * Selector for all available fields of APIProduct.
     * 
     */
    public final static APIProductSelectable ALL_FIELDS = () -> "*";
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>isPublished</b></p>
     * 
     * @return
     *     The isPublished contained in this entity.
     */
    @SerializedName("isPublished")
    @JsonProperty("isPublished")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "isPublished")
    private Boolean isPublished;
    /**
     * Use with available fluent helpers to apply the <b>isPublished</b> field to query operations.
     * 
     */
    public final static APIProductField<Boolean> IS_PUBLISHED = new APIProductField<Boolean>("isPublished");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>isRestricted</b></p>
     * 
     * @return
     *     The isRestricted contained in this entity.
     */
    @SerializedName("isRestricted")
    @JsonProperty("isRestricted")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "isRestricted")
    private Boolean isRestricted;
    /**
     * Use with available fluent helpers to apply the <b>isRestricted</b> field to query operations.
     * 
     */
    public final static APIProductField<Boolean> IS_RESTRICTED = new APIProductField<Boolean>("isRestricted");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @return
     *     The life_cycle contained in this entity.
     */
    @SerializedName("life_cycle")
    @JsonProperty("life_cycle")
    @Nullable
    @ODataField(odataName = "life_cycle")
    private History life_cycle;
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @return
     *     The name contained in this entity.
     */
    @Key
    @SerializedName("name")
    @JsonProperty("name")
    @Nullable
    @ODataField(odataName = "name")
    private String name;
    /**
     * Use with available fluent helpers to apply the <b>name</b> field to query operations.
     * 
     */
    public final static APIProductField<String> NAME = new APIProductField<String>("name");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>published_at</b></p>
     * 
     * @return
     *     The published_at contained in this entity.
     */
    @SerializedName("published_at")
    @JsonProperty("published_at")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeAdapter.class)
    @ODataField(odataName = "published_at", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeCalendarConverter.class)
    private LocalDateTime published_at;
    /**
     * Use with available fluent helpers to apply the <b>published_at</b> field to query operations.
     * 
     */
    public final static APIProductField<LocalDateTime> PUBLISHED_AT = new APIProductField<LocalDateTime>("published_at");
    /**
     * Constraints: Nullable, Maximum length: 256 <p>Original property name from the Odata EDM: <b>published_by</b></p>
     * 
     * @return
     *     The published_by contained in this entity.
     */
    @SerializedName("published_by")
    @JsonProperty("published_by")
    @Nullable
    @ODataField(odataName = "published_by")
    private String published_by;
    /**
     * Use with available fluent helpers to apply the <b>published_by</b> field to query operations.
     * 
     */
    public final static APIProductField<String> PUBLISHED_BY = new APIProductField<String>("published_by");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>quotaCount</b></p>
     * 
     * @return
     *     The quotaCount contained in this entity.
     */
    @SerializedName("quotaCount")
    @JsonProperty("quotaCount")
    @Nullable
    @ODataField(odataName = "quotaCount")
    private Integer quotaCount;
    /**
     * Use with available fluent helpers to apply the <b>quotaCount</b> field to query operations.
     * 
     */
    public final static APIProductField<Integer> QUOTA_COUNT = new APIProductField<Integer>("quotaCount");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>quotaInterval</b></p>
     * 
     * @return
     *     The quotaInterval contained in this entity.
     */
    @SerializedName("quotaInterval")
    @JsonProperty("quotaInterval")
    @Nullable
    @ODataField(odataName = "quotaInterval")
    private Integer quotaInterval;
    /**
     * Use with available fluent helpers to apply the <b>quotaInterval</b> field to query operations.
     * 
     */
    public final static APIProductField<Integer> QUOTA_INTERVAL = new APIProductField<Integer>("quotaInterval");
    /**
     * Constraints: Nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>quotaTimeUnit</b></p>
     * 
     * @return
     *     The quotaTimeUnit contained in this entity.
     */
    @SerializedName("quotaTimeUnit")
    @JsonProperty("quotaTimeUnit")
    @Nullable
    @ODataField(odataName = "quotaTimeUnit")
    private String quotaTimeUnit;
    /**
     * Use with available fluent helpers to apply the <b>quotaTimeUnit</b> field to query operations.
     * 
     */
    public final static APIProductField<String> QUOTA_TIME_UNIT = new APIProductField<String>("quotaTimeUnit");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>scope</b></p>
     * 
     * @return
     *     The scope contained in this entity.
     */
    @SerializedName("scope")
    @JsonProperty("scope")
    @Nullable
    @ODataField(odataName = "scope")
    private String scope;
    /**
     * Use with available fluent helpers to apply the <b>scope</b> field to query operations.
     * 
     */
    public final static APIProductField<String> SCOPE = new APIProductField<String>("scope");
    /**
     * Constraints: Nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>status_code</b></p>
     * 
     * @return
     *     The status_code contained in this entity.
     */
    @SerializedName("status_code")
    @JsonProperty("status_code")
    @Nullable
    @ODataField(odataName = "status_code")
    private String status_code;
    /**
     * Use with available fluent helpers to apply the <b>status_code</b> field to query operations.
     * 
     */
    public final static APIProductField<String> STATUS_CODE = new APIProductField<String>("status_code");
    /**
     * Constraints: Nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>version</b></p>
     * 
     * @return
     *     The version contained in this entity.
     */
    @SerializedName("version")
    @JsonProperty("version")
    @Nullable
    @ODataField(odataName = "version")
    private String version;
    /**
     * Use with available fluent helpers to apply the <b>version</b> field to query operations.
     * 
     */
    public final static APIProductField<String> VERSION = new APIProductField<String>("version");
    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>title</b></p>
     * 
     * @return
     *     The title contained in this entity.
     */
    @SerializedName("title")
    @JsonProperty("title")
    @Nullable
    @ODataField(odataName = "title")
    private String title;
    /**
     * Use with available fluent helpers to apply the <b>title</b> field to query operations.
     * 
     */
    public final static APIProductField<String> TITLE = new APIProductField<String>("title");
    /**
     * Constraints: Not nullable, Maximum length: 16000 <p>Original property name from the Odata EDM: <b>description</b></p>
     * 
     * @return
     *     The description contained in this entity.
     */
    @SerializedName("description")
    @JsonProperty("description")
    @Nullable
    @ODataField(odataName = "description")
    private String description;
    /**
     * Use with available fluent helpers to apply the <b>description</b> field to query operations.
     * 
     */
    public final static APIProductField<String> DESCRIPTION = new APIProductField<String>("description");
    /**
     * Navigation property <b>apiProxies</b> for <b>APIProduct</b> to multiple <b>APIProxy</b>.
     * 
     */
    @SerializedName("apiProxies")
    @JsonProperty("apiProxies")
    @ODataField(odataName = "apiProxies")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<APIProxy> toApiProxies;
    /**
     * Navigation property <b>apiResources</b> for <b>APIProduct</b> to multiple <b>APIResource</b>.
     * 
     */
    @SerializedName("apiResources")
    @JsonProperty("apiResources")
    @ODataField(odataName = "apiResources")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<APIResource> toApiResources;
    /**
     * Navigation property <b>applications</b> for <b>APIProduct</b> to multiple <b>Application</b>.
     * 
     */
    @SerializedName("applications")
    @JsonProperty("applications")
    @ODataField(odataName = "applications")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Application> toApplications;
    /**
     * Navigation property <b>ratePlans</b> for <b>APIProduct</b> to multiple <b>RatePlan</b>.
     * 
     */
    @SerializedName("ratePlans")
    @JsonProperty("ratePlans")
    @ODataField(odataName = "ratePlans")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<RatePlan> toRatePlans;
    /**
     * Navigation property <b>resources</b> for <b>APIProduct</b> to multiple <b>Resource</b>.
     * 
     */
    @SerializedName("resources")
    @JsonProperty("resources")
    @ODataField(odataName = "resources")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Resource> toResources;
    /**
     * Use with available fluent helpers to apply the <b>apiProxies</b> navigation property to query operations.
     * 
     */
    public final static APIProductLink<APIProxy> TO_API_PROXIES = new APIProductLink<APIProxy>("apiProxies");
    /**
     * Use with available fluent helpers to apply the <b>apiResources</b> navigation property to query operations.
     * 
     */
    public final static APIProductLink<APIResource> TO_API_RESOURCES = new APIProductLink<APIResource>("apiResources");
    /**
     * Use with available fluent helpers to apply the <b>applications</b> navigation property to query operations.
     * 
     */
    public final static APIProductLink<Application> TO_APPLICATIONS = new APIProductLink<Application>("applications");
    /**
     * Use with available fluent helpers to apply the <b>ratePlans</b> navigation property to query operations.
     * 
     */
    public final static APIProductLink<RatePlan> TO_RATE_PLANS = new APIProductLink<RatePlan>("ratePlans");
    /**
     * Use with available fluent helpers to apply the <b>resources</b> navigation property to query operations.
     * 
     */
    public final static APIProductLink<Resource> TO_RESOURCES = new APIProductLink<Resource>("resources");

    @Nonnull
    @Override
    public Class<APIProduct> getType() {
        return APIProduct.class;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>isPublished</b></p>
     * 
     * @param isPublished
     *     The isPublished to set.
     */
    public void setIsPublished(
        @Nullable
        final Boolean isPublished) {
        rememberChangedField("isPublished", this.isPublished);
        this.isPublished = isPublished;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>isRestricted</b></p>
     * 
     * @param isRestricted
     *     The isRestricted to set.
     */
    public void setIsRestricted(
        @Nullable
        final Boolean isRestricted) {
        rememberChangedField("isRestricted", this.isRestricted);
        this.isRestricted = isRestricted;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @param life_cycle
     *     The life_cycle to set.
     */
    public void setLife_cycle(
        @Nullable
        final History life_cycle) {
        rememberChangedField("life_cycle", this.life_cycle);
        this.life_cycle = life_cycle;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @param name
     *     The name to set.
     */
    public void setName(
        @Nullable
        final String name) {
        rememberChangedField("name", this.name);
        this.name = name;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>published_at</b></p>
     * 
     * @param published_at
     *     The published_at to set.
     */
    public void setPublished_at(
        @Nullable
        final LocalDateTime published_at) {
        rememberChangedField("published_at", this.published_at);
        this.published_at = published_at;
    }

    /**
     * Constraints: Nullable, Maximum length: 256 <p>Original property name from the Odata EDM: <b>published_by</b></p>
     * 
     * @param published_by
     *     The published_by to set.
     */
    public void setPublished_by(
        @Nullable
        final String published_by) {
        rememberChangedField("published_by", this.published_by);
        this.published_by = published_by;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>quotaCount</b></p>
     * 
     * @param quotaCount
     *     The quotaCount to set.
     */
    public void setQuotaCount(
        @Nullable
        final Integer quotaCount) {
        rememberChangedField("quotaCount", this.quotaCount);
        this.quotaCount = quotaCount;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>quotaInterval</b></p>
     * 
     * @param quotaInterval
     *     The quotaInterval to set.
     */
    public void setQuotaInterval(
        @Nullable
        final Integer quotaInterval) {
        rememberChangedField("quotaInterval", this.quotaInterval);
        this.quotaInterval = quotaInterval;
    }

    /**
     * Constraints: Nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>quotaTimeUnit</b></p>
     * 
     * @param quotaTimeUnit
     *     The quotaTimeUnit to set.
     */
    public void setQuotaTimeUnit(
        @Nullable
        final String quotaTimeUnit) {
        rememberChangedField("quotaTimeUnit", this.quotaTimeUnit);
        this.quotaTimeUnit = quotaTimeUnit;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>scope</b></p>
     * 
     * @param scope
     *     The scope to set.
     */
    public void setScope(
        @Nullable
        final String scope) {
        rememberChangedField("scope", this.scope);
        this.scope = scope;
    }

    /**
     * Constraints: Nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>status_code</b></p>
     * 
     * @param status_code
     *     The status_code to set.
     */
    public void setStatus_code(
        @Nullable
        final String status_code) {
        rememberChangedField("status_code", this.status_code);
        this.status_code = status_code;
    }

    /**
     * Constraints: Nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>version</b></p>
     * 
     * @param version
     *     The version to set.
     */
    public void setVersion(
        @Nullable
        final String version) {
        rememberChangedField("version", this.version);
        this.version = version;
    }

    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>title</b></p>
     * 
     * @param title
     *     The title to set.
     */
    public void setTitle(
        @Nullable
        final String title) {
        rememberChangedField("title", this.title);
        this.title = title;
    }

    /**
     * Constraints: Not nullable, Maximum length: 16000 <p>Original property name from the Odata EDM: <b>description</b></p>
     * 
     * @param description
     *     The description to set.
     */
    public void setDescription(
        @Nullable
        final String description) {
        rememberChangedField("description", this.description);
        this.description = description;
    }

    @Override
    protected String getEntityCollection() {
        return "APIProducts";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("name", getName());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("isPublished", getIsPublished());
        values.put("isRestricted", getIsRestricted());
        values.put("life_cycle", getLife_cycle());
        values.put("name", getName());
        values.put("published_at", getPublished_at());
        values.put("published_by", getPublished_by());
        values.put("quotaCount", getQuotaCount());
        values.put("quotaInterval", getQuotaInterval());
        values.put("quotaTimeUnit", getQuotaTimeUnit());
        values.put("scope", getScope());
        values.put("status_code", getStatus_code());
        values.put("version", getVersion());
        values.put("title", getTitle());
        values.put("description", getDescription());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("isPublished")) {
                final Object value = values.remove("isPublished");
                if ((value == null)||(!value.equals(getIsPublished()))) {
                    setIsPublished(((Boolean) value));
                }
            }
            if (values.containsKey("isRestricted")) {
                final Object value = values.remove("isRestricted");
                if ((value == null)||(!value.equals(getIsRestricted()))) {
                    setIsRestricted(((Boolean) value));
                }
            }
            if (values.containsKey("name")) {
                final Object value = values.remove("name");
                if ((value == null)||(!value.equals(getName()))) {
                    setName(((String) value));
                }
            }
            if (values.containsKey("published_at")) {
                final Object value = values.remove("published_at");
                if ((value == null)||(!value.equals(getPublished_at()))) {
                    setPublished_at(((LocalDateTime) value));
                }
            }
            if (values.containsKey("published_by")) {
                final Object value = values.remove("published_by");
                if ((value == null)||(!value.equals(getPublished_by()))) {
                    setPublished_by(((String) value));
                }
            }
            if (values.containsKey("quotaCount")) {
                final Object value = values.remove("quotaCount");
                if ((value == null)||(!value.equals(getQuotaCount()))) {
                    setQuotaCount(((Integer) value));
                }
            }
            if (values.containsKey("quotaInterval")) {
                final Object value = values.remove("quotaInterval");
                if ((value == null)||(!value.equals(getQuotaInterval()))) {
                    setQuotaInterval(((Integer) value));
                }
            }
            if (values.containsKey("quotaTimeUnit")) {
                final Object value = values.remove("quotaTimeUnit");
                if ((value == null)||(!value.equals(getQuotaTimeUnit()))) {
                    setQuotaTimeUnit(((String) value));
                }
            }
            if (values.containsKey("scope")) {
                final Object value = values.remove("scope");
                if ((value == null)||(!value.equals(getScope()))) {
                    setScope(((String) value));
                }
            }
            if (values.containsKey("status_code")) {
                final Object value = values.remove("status_code");
                if ((value == null)||(!value.equals(getStatus_code()))) {
                    setStatus_code(((String) value));
                }
            }
            if (values.containsKey("version")) {
                final Object value = values.remove("version");
                if ((value == null)||(!value.equals(getVersion()))) {
                    setVersion(((String) value));
                }
            }
            if (values.containsKey("title")) {
                final Object value = values.remove("title");
                if ((value == null)||(!value.equals(getTitle()))) {
                    setTitle(((String) value));
                }
            }
            if (values.containsKey("description")) {
                final Object value = values.remove("description");
                if ((value == null)||(!value.equals(getDescription()))) {
                    setDescription(((String) value));
                }
            }
        }
        // structured properties
        {
            if (values.containsKey("life_cycle")) {
                final Object value = values.remove("life_cycle");
                if (value instanceof Map) {
                    if (getLife_cycle() == null) {
                        setLife_cycle(new History());
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    getLife_cycle().fromMap(inputMap);
                }
                if ((value == null)&&(getLife_cycle()!= null)) {
                    setLife_cycle(null);
                }
            }
        }
        // navigation properties
        {
            if ((values).containsKey("apiProxies")) {
                final Object value = (values).remove("apiProxies");
                if (value instanceof Iterable) {
                    if (toApiProxies == null) {
                        toApiProxies = Lists.newArrayList();
                    } else {
                        toApiProxies = Lists.newArrayList(toApiProxies);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        APIProxy entity;
                        if (toApiProxies.size()>i) {
                            entity = toApiProxies.get(i);
                        } else {
                            entity = new APIProxy();
                            toApiProxies.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("apiResources")) {
                final Object value = (values).remove("apiResources");
                if (value instanceof Iterable) {
                    if (toApiResources == null) {
                        toApiResources = Lists.newArrayList();
                    } else {
                        toApiResources = Lists.newArrayList(toApiResources);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        APIResource entity;
                        if (toApiResources.size()>i) {
                            entity = toApiResources.get(i);
                        } else {
                            entity = new APIResource();
                            toApiResources.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("applications")) {
                final Object value = (values).remove("applications");
                if (value instanceof Iterable) {
                    if (toApplications == null) {
                        toApplications = Lists.newArrayList();
                    } else {
                        toApplications = Lists.newArrayList(toApplications);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Application entity;
                        if (toApplications.size()>i) {
                            entity = toApplications.get(i);
                        } else {
                            entity = new Application();
                            toApplications.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("ratePlans")) {
                final Object value = (values).remove("ratePlans");
                if (value instanceof Iterable) {
                    if (toRatePlans == null) {
                        toRatePlans = Lists.newArrayList();
                    } else {
                        toRatePlans = Lists.newArrayList(toRatePlans);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        RatePlan entity;
                        if (toRatePlans.size()>i) {
                            entity = toRatePlans.get(i);
                        } else {
                            entity = new RatePlan();
                            toRatePlans.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("resources")) {
                final Object value = (values).remove("resources");
                if (value instanceof Iterable) {
                    if (toResources == null) {
                        toResources = Lists.newArrayList();
                    } else {
                        toResources = Lists.newArrayList(toResources);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Resource entity;
                        if (toResources.size()>i) {
                            entity = toResources.get(i);
                        } else {
                            entity = new Resource();
                            toResources.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >APIProductField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new APIProductField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >APIProductField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new APIProductField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public HttpDestinationProperties getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final HttpDestinationProperties destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return (com.mycompany.vdm.services.APIPortalApplicationsCFService.DEFAULT_SERVICE_PATH);
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toApiProxies!= null) {
            (values).put("apiProxies", toApiProxies);
        }
        if (toApiResources!= null) {
            (values).put("apiResources", toApiResources);
        }
        if (toApplications!= null) {
            (values).put("applications", toApplications);
        }
        if (toRatePlans!= null) {
            (values).put("ratePlans", toRatePlans);
        }
        if (toResources!= null) {
            (values).put("resources", toResources);
        }
        return values;
    }

    /**
     * Fetches the <b>APIProxy</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>apiProxies</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>APIProxy</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIProxy> fetchApiProxies()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type APIProxy.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("name=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(name));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("apiProxies");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<APIProxy> entityList = result.asList(APIProxy.class);
        for (APIProxy entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>APIProxy</b> entities (one to many). This corresponds to the OData navigation property <b>apiProxies</b>.
     * <p>
     * If the navigation property <b>apiProxies</b> of a queried <b>APIProduct</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>APIProxy</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIProxy> getApiProxiesOrFetch()
        throws ODataException
    {
        if (toApiProxies == null) {
            toApiProxies = fetchApiProxies();
        }
        return toApiProxies;
    }

    /**
     * Retrieval of associated <b>APIProxy</b> entities (one to many). This corresponds to the OData navigation property <b>apiProxies</b>.
     * <p>
     * If the navigation property for an entity <b>APIProduct</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>apiProxies</b> is already loaded, the result will contain the <b>APIProxy</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<APIProxy>> getApiProxiesIfPresent() {
        return Option.of(toApiProxies);
    }

    /**
     * Overwrites the list of associated <b>APIProxy</b> entities for the loaded navigation property <b>apiProxies</b>.
     * <p>
     * If the navigation property <b>apiProxies</b> of a queried <b>APIProduct</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>APIProxy</b> entities.
     */
    public void setApiProxies(
        @Nonnull
        final List<APIProxy> value) {
        if (toApiProxies == null) {
            toApiProxies = Lists.newArrayList();
        }
        toApiProxies.clear();
        toApiProxies.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>APIProxy</b> entities. This corresponds to the OData navigation property <b>apiProxies</b>.
     * <p>
     * If the navigation property <b>apiProxies</b> of a queried <b>APIProduct</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>APIProxy</b> entities.
     */
    public void addApiProxies(APIProxy... entity) {
        if (toApiProxies == null) {
            toApiProxies = Lists.newArrayList();
        }
        toApiProxies.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>APIResource</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>apiResources</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>APIResource</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIResource> fetchApiResources()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type APIResource.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("name=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(name));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("apiResources");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<APIResource> entityList = result.asList(APIResource.class);
        for (APIResource entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>APIResource</b> entities (one to many). This corresponds to the OData navigation property <b>apiResources</b>.
     * <p>
     * If the navigation property <b>apiResources</b> of a queried <b>APIProduct</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>APIResource</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIResource> getApiResourcesOrFetch()
        throws ODataException
    {
        if (toApiResources == null) {
            toApiResources = fetchApiResources();
        }
        return toApiResources;
    }

    /**
     * Retrieval of associated <b>APIResource</b> entities (one to many). This corresponds to the OData navigation property <b>apiResources</b>.
     * <p>
     * If the navigation property for an entity <b>APIProduct</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>apiResources</b> is already loaded, the result will contain the <b>APIResource</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<APIResource>> getApiResourcesIfPresent() {
        return Option.of(toApiResources);
    }

    /**
     * Overwrites the list of associated <b>APIResource</b> entities for the loaded navigation property <b>apiResources</b>.
     * <p>
     * If the navigation property <b>apiResources</b> of a queried <b>APIProduct</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>APIResource</b> entities.
     */
    public void setApiResources(
        @Nonnull
        final List<APIResource> value) {
        if (toApiResources == null) {
            toApiResources = Lists.newArrayList();
        }
        toApiResources.clear();
        toApiResources.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>APIResource</b> entities. This corresponds to the OData navigation property <b>apiResources</b>.
     * <p>
     * If the navigation property <b>apiResources</b> of a queried <b>APIProduct</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>APIResource</b> entities.
     */
    public void addApiResources(APIResource... entity) {
        if (toApiResources == null) {
            toApiResources = Lists.newArrayList();
        }
        toApiResources.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>Application</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>applications</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>Application</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Application> fetchApplications()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type Application.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("name=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(name));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("applications");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<Application> entityList = result.asList(Application.class);
        for (Application entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>Application</b> entities (one to many). This corresponds to the OData navigation property <b>applications</b>.
     * <p>
     * If the navigation property <b>applications</b> of a queried <b>APIProduct</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>Application</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Application> getApplicationsOrFetch()
        throws ODataException
    {
        if (toApplications == null) {
            toApplications = fetchApplications();
        }
        return toApplications;
    }

    /**
     * Retrieval of associated <b>Application</b> entities (one to many). This corresponds to the OData navigation property <b>applications</b>.
     * <p>
     * If the navigation property for an entity <b>APIProduct</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>applications</b> is already loaded, the result will contain the <b>Application</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Application>> getApplicationsIfPresent() {
        return Option.of(toApplications);
    }

    /**
     * Overwrites the list of associated <b>Application</b> entities for the loaded navigation property <b>applications</b>.
     * <p>
     * If the navigation property <b>applications</b> of a queried <b>APIProduct</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>Application</b> entities.
     */
    public void setApplications(
        @Nonnull
        final List<Application> value) {
        if (toApplications == null) {
            toApplications = Lists.newArrayList();
        }
        toApplications.clear();
        toApplications.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>Application</b> entities. This corresponds to the OData navigation property <b>applications</b>.
     * <p>
     * If the navigation property <b>applications</b> of a queried <b>APIProduct</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Application</b> entities.
     */
    public void addApplications(Application... entity) {
        if (toApplications == null) {
            toApplications = Lists.newArrayList();
        }
        toApplications.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>RatePlan</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>ratePlans</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>RatePlan</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<RatePlan> fetchRatePlans()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type RatePlan.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("name=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(name));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("ratePlans");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<RatePlan> entityList = result.asList(RatePlan.class);
        for (RatePlan entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>RatePlan</b> entities (one to many). This corresponds to the OData navigation property <b>ratePlans</b>.
     * <p>
     * If the navigation property <b>ratePlans</b> of a queried <b>APIProduct</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>RatePlan</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<RatePlan> getRatePlansOrFetch()
        throws ODataException
    {
        if (toRatePlans == null) {
            toRatePlans = fetchRatePlans();
        }
        return toRatePlans;
    }

    /**
     * Retrieval of associated <b>RatePlan</b> entities (one to many). This corresponds to the OData navigation property <b>ratePlans</b>.
     * <p>
     * If the navigation property for an entity <b>APIProduct</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>ratePlans</b> is already loaded, the result will contain the <b>RatePlan</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<RatePlan>> getRatePlansIfPresent() {
        return Option.of(toRatePlans);
    }

    /**
     * Overwrites the list of associated <b>RatePlan</b> entities for the loaded navigation property <b>ratePlans</b>.
     * <p>
     * If the navigation property <b>ratePlans</b> of a queried <b>APIProduct</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>RatePlan</b> entities.
     */
    public void setRatePlans(
        @Nonnull
        final List<RatePlan> value) {
        if (toRatePlans == null) {
            toRatePlans = Lists.newArrayList();
        }
        toRatePlans.clear();
        toRatePlans.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>RatePlan</b> entities. This corresponds to the OData navigation property <b>ratePlans</b>.
     * <p>
     * If the navigation property <b>ratePlans</b> of a queried <b>APIProduct</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>RatePlan</b> entities.
     */
    public void addRatePlans(RatePlan... entity) {
        if (toRatePlans == null) {
            toRatePlans = Lists.newArrayList();
        }
        toRatePlans.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>Resource</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>Resource</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Resource> fetchResources()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type Resource.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("name=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(name));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("resources");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<Resource> entityList = result.asList(Resource.class);
        for (Resource entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>Resource</b> entities (one to many). This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * If the navigation property <b>resources</b> of a queried <b>APIProduct</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>Resource</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Resource> getResourcesOrFetch()
        throws ODataException
    {
        if (toResources == null) {
            toResources = fetchResources();
        }
        return toResources;
    }

    /**
     * Retrieval of associated <b>Resource</b> entities (one to many). This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * If the navigation property for an entity <b>APIProduct</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>resources</b> is already loaded, the result will contain the <b>Resource</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Resource>> getResourcesIfPresent() {
        return Option.of(toResources);
    }

    /**
     * Overwrites the list of associated <b>Resource</b> entities for the loaded navigation property <b>resources</b>.
     * <p>
     * If the navigation property <b>resources</b> of a queried <b>APIProduct</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>Resource</b> entities.
     */
    public void setResources(
        @Nonnull
        final List<Resource> value) {
        if (toResources == null) {
            toResources = Lists.newArrayList();
        }
        toResources.clear();
        toResources.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>Resource</b> entities. This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * If the navigation property <b>resources</b> of a queried <b>APIProduct</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Resource</b> entities.
     */
    public void addResources(Resource... entity) {
        if (toResources == null) {
            toResources = Lists.newArrayList();
        }
        toResources.addAll(Lists.newArrayList(entity));
    }


    /**
     * Helper class to allow for fluent creation of APIProduct instances.
     * 
     */
    public final static class APIProductBuilder {

        private List<APIProxy> toApiProxies = Lists.newArrayList();
        private List<APIResource> toApiResources = Lists.newArrayList();
        private List<Application> toApplications = Lists.newArrayList();
        private List<RatePlan> toRatePlans = Lists.newArrayList();
        private List<Resource> toResources = Lists.newArrayList();

        private APIProduct.APIProductBuilder toApiProxies(final List<APIProxy> value) {
            toApiProxies.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>apiProxies</b> for <b>APIProduct</b> to multiple <b>APIProxy</b>.
         * 
         * @param value
         *     The APIProxys to build this APIProduct with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProduct.APIProductBuilder apiProxies(APIProxy... value) {
            return toApiProxies(Lists.newArrayList(value));
        }

        private APIProduct.APIProductBuilder toApiResources(final List<APIResource> value) {
            toApiResources.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>apiResources</b> for <b>APIProduct</b> to multiple <b>APIResource</b>.
         * 
         * @param value
         *     The APIResources to build this APIProduct with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProduct.APIProductBuilder apiResources(APIResource... value) {
            return toApiResources(Lists.newArrayList(value));
        }

        private APIProduct.APIProductBuilder toApplications(final List<Application> value) {
            toApplications.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>applications</b> for <b>APIProduct</b> to multiple <b>Application</b>.
         * 
         * @param value
         *     The Applications to build this APIProduct with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProduct.APIProductBuilder applications(Application... value) {
            return toApplications(Lists.newArrayList(value));
        }

        private APIProduct.APIProductBuilder toRatePlans(final List<RatePlan> value) {
            toRatePlans.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>ratePlans</b> for <b>APIProduct</b> to multiple <b>RatePlan</b>.
         * 
         * @param value
         *     The RatePlans to build this APIProduct with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProduct.APIProductBuilder ratePlans(RatePlan... value) {
            return toRatePlans(Lists.newArrayList(value));
        }

        private APIProduct.APIProductBuilder toResources(final List<Resource> value) {
            toResources.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>resources</b> for <b>APIProduct</b> to multiple <b>Resource</b>.
         * 
         * @param value
         *     The Resources to build this APIProduct with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProduct.APIProductBuilder resources(Resource... value) {
            return toResources(Lists.newArrayList(value));
        }

    }

}
