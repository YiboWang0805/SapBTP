
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.69.0
 */

package com.mycompany.vdm.namespaces.portalapplicationscf;

import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.mycompany.vdm.namespaces.portalapplicationscf.field.APIProviderField;
import com.mycompany.vdm.namespaces.portalapplicationscf.link.APIProviderLink;
import com.mycompany.vdm.namespaces.portalapplicationscf.selectable.APIProviderSelectable;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpClientAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;
import com.sap.cloud.sdk.datamodel.odata.helper.ODataTypeValueSerializer;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.odatav2.connectivity.ODataException;
import com.sap.cloud.sdk.odatav2.connectivity.ODataExceptionType;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQuery;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryBuilder;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryResult;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.apache.http.client.HttpClient;
import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;


/**
 * <p>Original entity name from the Odata EDM: <b>APIProvider</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class APIProvider
    extends VdmEntity<APIProvider>
{

    /**
     * Selector for all available fields of APIProvider.
     * 
     */
    public final static APIProviderSelectable ALL_FIELDS = () -> "*";
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>isOnPremise</b></p>
     * 
     * @return
     *     The isOnPremise contained in this entity.
     */
    @SerializedName("isOnPremise")
    @JsonProperty("isOnPremise")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "isOnPremise")
    private Boolean isOnPremise;
    /**
     * Use with available fluent helpers to apply the <b>isOnPremise</b> field to query operations.
     * 
     */
    public final static APIProviderField<Boolean> IS_ON_PREMISE = new APIProviderField<Boolean>("isOnPremise");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @return
     *     The life_cycle contained in this entity.
     */
    @SerializedName("life_cycle")
    @JsonProperty("life_cycle")
    @Nullable
    @ODataField(odataName = "life_cycle")
    private History life_cycle;
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 200 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @return
     *     The name contained in this entity.
     */
    @Key
    @SerializedName("name")
    @JsonProperty("name")
    @Nullable
    @ODataField(odataName = "name")
    private String name;
    /**
     * Use with available fluent helpers to apply the <b>name</b> field to query operations.
     * 
     */
    public final static APIProviderField<String> NAME = new APIProviderField<String>("name");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>rt_auth</b></p>
     * 
     * @return
     *     The rt_auth contained in this entity.
     */
    @SerializedName("rt_auth")
    @JsonProperty("rt_auth")
    @Nullable
    @ODataField(odataName = "rt_auth")
    private String rt_auth;
    /**
     * Use with available fluent helpers to apply the <b>rt_auth</b> field to query operations.
     * 
     */
    public final static APIProviderField<String> RT_AUTH = new APIProviderField<String>("rt_auth");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>sslInfo</b></p>
     * 
     * @return
     *     The sslInfo contained in this entity.
     */
    @SerializedName("sslInfo")
    @JsonProperty("sslInfo")
    @Nullable
    @ODataField(odataName = "sslInfo")
    private SSLInfo sslInfo;
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>url</b></p>
     * 
     * @return
     *     The url contained in this entity.
     */
    @SerializedName("url")
    @JsonProperty("url")
    @Nullable
    @ODataField(odataName = "url")
    private String url;
    /**
     * Use with available fluent helpers to apply the <b>url</b> field to query operations.
     * 
     */
    public final static APIProviderField<String> URL = new APIProviderField<String>("url");
    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>title</b></p>
     * 
     * @return
     *     The title contained in this entity.
     */
    @SerializedName("title")
    @JsonProperty("title")
    @Nullable
    @ODataField(odataName = "title")
    private String title;
    /**
     * Use with available fluent helpers to apply the <b>title</b> field to query operations.
     * 
     */
    public final static APIProviderField<String> TITLE = new APIProviderField<String>("title");
    /**
     * Constraints: Not nullable, Maximum length: 16000 <p>Original property name from the Odata EDM: <b>description</b></p>
     * 
     * @return
     *     The description contained in this entity.
     */
    @SerializedName("description")
    @JsonProperty("description")
    @Nullable
    @ODataField(odataName = "description")
    private String description;
    /**
     * Use with available fluent helpers to apply the <b>description</b> field to query operations.
     * 
     */
    public final static APIProviderField<String> DESCRIPTION = new APIProviderField<String>("description");
    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>destType</b></p>
     * 
     * @return
     *     The destType contained in this entity.
     */
    @SerializedName("destType")
    @JsonProperty("destType")
    @Nullable
    @ODataField(odataName = "destType")
    private String destType;
    /**
     * Use with available fluent helpers to apply the <b>destType</b> field to query operations.
     * 
     */
    public final static APIProviderField<String> DEST_TYPE = new APIProviderField<String>("destType");
    /**
     * Constraints: Not nullable, Maximum length: 2048 <p>Original property name from the Odata EDM: <b>host</b></p>
     * 
     * @return
     *     The host contained in this entity.
     */
    @SerializedName("host")
    @JsonProperty("host")
    @Nullable
    @ODataField(odataName = "host")
    private String host;
    /**
     * Use with available fluent helpers to apply the <b>host</b> field to query operations.
     * 
     */
    public final static APIProviderField<String> HOST = new APIProviderField<String>("host");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>port</b></p>
     * 
     * @return
     *     The port contained in this entity.
     */
    @SerializedName("port")
    @JsonProperty("port")
    @Nullable
    @ODataField(odataName = "port")
    private Integer port;
    /**
     * Use with available fluent helpers to apply the <b>port</b> field to query operations.
     * 
     */
    public final static APIProviderField<Integer> PORT = new APIProviderField<Integer>("port");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>useSSL</b></p>
     * 
     * @return
     *     The useSSL contained in this entity.
     */
    @SerializedName("useSSL")
    @JsonProperty("useSSL")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "useSSL")
    private Boolean useSSL;
    /**
     * Use with available fluent helpers to apply the <b>useSSL</b> field to query operations.
     * 
     */
    public final static APIProviderField<Boolean> USE_SSL = new APIProviderField<Boolean>("useSSL");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>trustAll</b></p>
     * 
     * @return
     *     The trustAll contained in this entity.
     */
    @SerializedName("trustAll")
    @JsonProperty("trustAll")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "trustAll")
    private Boolean trustAll;
    /**
     * Use with available fluent helpers to apply the <b>trustAll</b> field to query operations.
     * 
     */
    public final static APIProviderField<Boolean> TRUST_ALL = new APIProviderField<Boolean>("trustAll");
    /**
     * Constraints: Not nullable, Maximum length: 2048 <p>Original property name from the Odata EDM: <b>userName</b></p>
     * 
     * @return
     *     The userName contained in this entity.
     */
    @SerializedName("userName")
    @JsonProperty("userName")
    @Nullable
    @ODataField(odataName = "userName")
    private String userName;
    /**
     * Use with available fluent helpers to apply the <b>userName</b> field to query operations.
     * 
     */
    public final static APIProviderField<String> USER_NAME = new APIProviderField<String>("userName");
    /**
     * Constraints: Not nullable, Maximum length: 126 <p>Original property name from the Odata EDM: <b>password</b></p>
     * 
     * @return
     *     The password contained in this entity.
     */
    @SerializedName("password")
    @JsonProperty("password")
    @Nullable
    @ODataField(odataName = "password")
    private String password;
    /**
     * Use with available fluent helpers to apply the <b>password</b> field to query operations.
     * 
     */
    public final static APIProviderField<String> PASSWORD = new APIProviderField<String>("password");
    /**
     * Constraints: Not nullable, Maximum length: 126 <p>Original property name from the Odata EDM: <b>authType</b></p>
     * 
     * @return
     *     The authType contained in this entity.
     */
    @SerializedName("authType")
    @JsonProperty("authType")
    @Nullable
    @ODataField(odataName = "authType")
    private String authType;
    /**
     * Use with available fluent helpers to apply the <b>authType</b> field to query operations.
     * 
     */
    public final static APIProviderField<String> AUTH_TYPE = new APIProviderField<String>("authType");
    /**
     * Constraints: Not nullable, Maximum length: 2048 <p>Original property name from the Odata EDM: <b>pathPrefix</b></p>
     * 
     * @return
     *     The pathPrefix contained in this entity.
     */
    @SerializedName("pathPrefix")
    @JsonProperty("pathPrefix")
    @Nullable
    @ODataField(odataName = "pathPrefix")
    private String pathPrefix;
    /**
     * Use with available fluent helpers to apply the <b>pathPrefix</b> field to query operations.
     * 
     */
    public final static APIProviderField<String> PATH_PREFIX = new APIProviderField<String>("pathPrefix");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>timeout</b></p>
     * 
     * @return
     *     The timeout contained in this entity.
     */
    @SerializedName("timeout")
    @JsonProperty("timeout")
    @Nullable
    @ODataField(odataName = "timeout")
    private Integer timeout;
    /**
     * Use with available fluent helpers to apply the <b>timeout</b> field to query operations.
     * 
     */
    public final static APIProviderField<Integer> TIMEOUT = new APIProviderField<Integer>("timeout");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>cockpit_url</b></p>
     * 
     * @return
     *     The cockpit_url contained in this entity.
     */
    @SerializedName("cockpit_url")
    @JsonProperty("cockpit_url")
    @Nullable
    @ODataField(odataName = "cockpit_url")
    private String cockpit_url;
    /**
     * Use with available fluent helpers to apply the <b>cockpit_url</b> field to query operations.
     * 
     */
    public final static APIProviderField<String> COCKPIT_URL = new APIProviderField<String>("cockpit_url");
    /**
     * Constraints: Not nullable, Maximum length: 2048 <p>Original property name from the Odata EDM: <b>cloudConnectorLocation</b></p>
     * 
     * @return
     *     The cloudConnectorLocation contained in this entity.
     */
    @SerializedName("cloudConnectorLocation")
    @JsonProperty("cloudConnectorLocation")
    @Nullable
    @ODataField(odataName = "cloudConnectorLocation")
    private String cloudConnectorLocation;
    /**
     * Use with available fluent helpers to apply the <b>cloudConnectorLocation</b> field to query operations.
     * 
     */
    public final static APIProviderField<String> CLOUD_CONNECTOR_LOCATION = new APIProviderField<String>("cloudConnectorLocation");
    /**
     * Navigation property <b>apiProxies</b> for <b>APIProvider</b> to multiple <b>APIProxy</b>.
     * 
     */
    @SerializedName("apiProxies")
    @JsonProperty("apiProxies")
    @ODataField(odataName = "apiProxies")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<APIProxy> toApiProxies;
    /**
     * Navigation property <b>resources</b> for <b>APIProvider</b> to multiple <b>Resource</b>.
     * 
     */
    @SerializedName("resources")
    @JsonProperty("resources")
    @ODataField(odataName = "resources")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Resource> toResources;
    /**
     * Use with available fluent helpers to apply the <b>apiProxies</b> navigation property to query operations.
     * 
     */
    public final static APIProviderLink<APIProxy> TO_API_PROXIES = new APIProviderLink<APIProxy>("apiProxies");
    /**
     * Use with available fluent helpers to apply the <b>resources</b> navigation property to query operations.
     * 
     */
    public final static APIProviderLink<Resource> TO_RESOURCES = new APIProviderLink<Resource>("resources");

    @Nonnull
    @Override
    public Class<APIProvider> getType() {
        return APIProvider.class;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>isOnPremise</b></p>
     * 
     * @param isOnPremise
     *     The isOnPremise to set.
     */
    public void setIsOnPremise(
        @Nullable
        final Boolean isOnPremise) {
        rememberChangedField("isOnPremise", this.isOnPremise);
        this.isOnPremise = isOnPremise;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @param life_cycle
     *     The life_cycle to set.
     */
    public void setLife_cycle(
        @Nullable
        final History life_cycle) {
        rememberChangedField("life_cycle", this.life_cycle);
        this.life_cycle = life_cycle;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 200 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @param name
     *     The name to set.
     */
    public void setName(
        @Nullable
        final String name) {
        rememberChangedField("name", this.name);
        this.name = name;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>rt_auth</b></p>
     * 
     * @param rt_auth
     *     The rt_auth to set.
     */
    public void setRt_auth(
        @Nullable
        final String rt_auth) {
        rememberChangedField("rt_auth", this.rt_auth);
        this.rt_auth = rt_auth;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>sslInfo</b></p>
     * 
     * @param sslInfo
     *     The sslInfo to set.
     */
    public void setSslInfo(
        @Nullable
        final SSLInfo sslInfo) {
        rememberChangedField("sslInfo", this.sslInfo);
        this.sslInfo = sslInfo;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>url</b></p>
     * 
     * @param url
     *     The url to set.
     */
    public void setUrl(
        @Nullable
        final String url) {
        rememberChangedField("url", this.url);
        this.url = url;
    }

    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>title</b></p>
     * 
     * @param title
     *     The title to set.
     */
    public void setTitle(
        @Nullable
        final String title) {
        rememberChangedField("title", this.title);
        this.title = title;
    }

    /**
     * Constraints: Not nullable, Maximum length: 16000 <p>Original property name from the Odata EDM: <b>description</b></p>
     * 
     * @param description
     *     The description to set.
     */
    public void setDescription(
        @Nullable
        final String description) {
        rememberChangedField("description", this.description);
        this.description = description;
    }

    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>destType</b></p>
     * 
     * @param destType
     *     The destType to set.
     */
    public void setDestType(
        @Nullable
        final String destType) {
        rememberChangedField("destType", this.destType);
        this.destType = destType;
    }

    /**
     * Constraints: Not nullable, Maximum length: 2048 <p>Original property name from the Odata EDM: <b>host</b></p>
     * 
     * @param host
     *     The host to set.
     */
    public void setHost(
        @Nullable
        final String host) {
        rememberChangedField("host", this.host);
        this.host = host;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>port</b></p>
     * 
     * @param port
     *     The port to set.
     */
    public void setPort(
        @Nullable
        final Integer port) {
        rememberChangedField("port", this.port);
        this.port = port;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>useSSL</b></p>
     * 
     * @param useSSL
     *     The useSSL to set.
     */
    public void setUseSSL(
        @Nullable
        final Boolean useSSL) {
        rememberChangedField("useSSL", this.useSSL);
        this.useSSL = useSSL;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>trustAll</b></p>
     * 
     * @param trustAll
     *     The trustAll to set.
     */
    public void setTrustAll(
        @Nullable
        final Boolean trustAll) {
        rememberChangedField("trustAll", this.trustAll);
        this.trustAll = trustAll;
    }

    /**
     * Constraints: Not nullable, Maximum length: 2048 <p>Original property name from the Odata EDM: <b>userName</b></p>
     * 
     * @param userName
     *     The userName to set.
     */
    public void setUserName(
        @Nullable
        final String userName) {
        rememberChangedField("userName", this.userName);
        this.userName = userName;
    }

    /**
     * Constraints: Not nullable, Maximum length: 126 <p>Original property name from the Odata EDM: <b>password</b></p>
     * 
     * @param password
     *     The password to set.
     */
    public void setPassword(
        @Nullable
        final String password) {
        rememberChangedField("password", this.password);
        this.password = password;
    }

    /**
     * Constraints: Not nullable, Maximum length: 126 <p>Original property name from the Odata EDM: <b>authType</b></p>
     * 
     * @param authType
     *     The authType to set.
     */
    public void setAuthType(
        @Nullable
        final String authType) {
        rememberChangedField("authType", this.authType);
        this.authType = authType;
    }

    /**
     * Constraints: Not nullable, Maximum length: 2048 <p>Original property name from the Odata EDM: <b>pathPrefix</b></p>
     * 
     * @param pathPrefix
     *     The pathPrefix to set.
     */
    public void setPathPrefix(
        @Nullable
        final String pathPrefix) {
        rememberChangedField("pathPrefix", this.pathPrefix);
        this.pathPrefix = pathPrefix;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>timeout</b></p>
     * 
     * @param timeout
     *     The timeout to set.
     */
    public void setTimeout(
        @Nullable
        final Integer timeout) {
        rememberChangedField("timeout", this.timeout);
        this.timeout = timeout;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>cockpit_url</b></p>
     * 
     * @param cockpit_url
     *     The cockpit_url to set.
     */
    public void setCockpit_url(
        @Nullable
        final String cockpit_url) {
        rememberChangedField("cockpit_url", this.cockpit_url);
        this.cockpit_url = cockpit_url;
    }

    /**
     * Constraints: Not nullable, Maximum length: 2048 <p>Original property name from the Odata EDM: <b>cloudConnectorLocation</b></p>
     * 
     * @param cloudConnectorLocation
     *     The cloudConnectorLocation to set.
     */
    public void setCloudConnectorLocation(
        @Nullable
        final String cloudConnectorLocation) {
        rememberChangedField("cloudConnectorLocation", this.cloudConnectorLocation);
        this.cloudConnectorLocation = cloudConnectorLocation;
    }

    @Override
    protected String getEntityCollection() {
        return "APIProviders";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("name", getName());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("isOnPremise", getIsOnPremise());
        values.put("life_cycle", getLife_cycle());
        values.put("name", getName());
        values.put("rt_auth", getRt_auth());
        values.put("sslInfo", getSslInfo());
        values.put("url", getUrl());
        values.put("title", getTitle());
        values.put("description", getDescription());
        values.put("destType", getDestType());
        values.put("host", getHost());
        values.put("port", getPort());
        values.put("useSSL", getUseSSL());
        values.put("trustAll", getTrustAll());
        values.put("userName", getUserName());
        values.put("password", getPassword());
        values.put("authType", getAuthType());
        values.put("pathPrefix", getPathPrefix());
        values.put("timeout", getTimeout());
        values.put("cockpit_url", getCockpit_url());
        values.put("cloudConnectorLocation", getCloudConnectorLocation());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("isOnPremise")) {
                final Object value = values.remove("isOnPremise");
                if ((value == null)||(!value.equals(getIsOnPremise()))) {
                    setIsOnPremise(((Boolean) value));
                }
            }
            if (values.containsKey("name")) {
                final Object value = values.remove("name");
                if ((value == null)||(!value.equals(getName()))) {
                    setName(((String) value));
                }
            }
            if (values.containsKey("rt_auth")) {
                final Object value = values.remove("rt_auth");
                if ((value == null)||(!value.equals(getRt_auth()))) {
                    setRt_auth(((String) value));
                }
            }
            if (values.containsKey("url")) {
                final Object value = values.remove("url");
                if ((value == null)||(!value.equals(getUrl()))) {
                    setUrl(((String) value));
                }
            }
            if (values.containsKey("title")) {
                final Object value = values.remove("title");
                if ((value == null)||(!value.equals(getTitle()))) {
                    setTitle(((String) value));
                }
            }
            if (values.containsKey("description")) {
                final Object value = values.remove("description");
                if ((value == null)||(!value.equals(getDescription()))) {
                    setDescription(((String) value));
                }
            }
            if (values.containsKey("destType")) {
                final Object value = values.remove("destType");
                if ((value == null)||(!value.equals(getDestType()))) {
                    setDestType(((String) value));
                }
            }
            if (values.containsKey("host")) {
                final Object value = values.remove("host");
                if ((value == null)||(!value.equals(getHost()))) {
                    setHost(((String) value));
                }
            }
            if (values.containsKey("port")) {
                final Object value = values.remove("port");
                if ((value == null)||(!value.equals(getPort()))) {
                    setPort(((Integer) value));
                }
            }
            if (values.containsKey("useSSL")) {
                final Object value = values.remove("useSSL");
                if ((value == null)||(!value.equals(getUseSSL()))) {
                    setUseSSL(((Boolean) value));
                }
            }
            if (values.containsKey("trustAll")) {
                final Object value = values.remove("trustAll");
                if ((value == null)||(!value.equals(getTrustAll()))) {
                    setTrustAll(((Boolean) value));
                }
            }
            if (values.containsKey("userName")) {
                final Object value = values.remove("userName");
                if ((value == null)||(!value.equals(getUserName()))) {
                    setUserName(((String) value));
                }
            }
            if (values.containsKey("password")) {
                final Object value = values.remove("password");
                if ((value == null)||(!value.equals(getPassword()))) {
                    setPassword(((String) value));
                }
            }
            if (values.containsKey("authType")) {
                final Object value = values.remove("authType");
                if ((value == null)||(!value.equals(getAuthType()))) {
                    setAuthType(((String) value));
                }
            }
            if (values.containsKey("pathPrefix")) {
                final Object value = values.remove("pathPrefix");
                if ((value == null)||(!value.equals(getPathPrefix()))) {
                    setPathPrefix(((String) value));
                }
            }
            if (values.containsKey("timeout")) {
                final Object value = values.remove("timeout");
                if ((value == null)||(!value.equals(getTimeout()))) {
                    setTimeout(((Integer) value));
                }
            }
            if (values.containsKey("cockpit_url")) {
                final Object value = values.remove("cockpit_url");
                if ((value == null)||(!value.equals(getCockpit_url()))) {
                    setCockpit_url(((String) value));
                }
            }
            if (values.containsKey("cloudConnectorLocation")) {
                final Object value = values.remove("cloudConnectorLocation");
                if ((value == null)||(!value.equals(getCloudConnectorLocation()))) {
                    setCloudConnectorLocation(((String) value));
                }
            }
        }
        // structured properties
        {
            if (values.containsKey("life_cycle")) {
                final Object value = values.remove("life_cycle");
                if (value instanceof Map) {
                    if (getLife_cycle() == null) {
                        setLife_cycle(new History());
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    getLife_cycle().fromMap(inputMap);
                }
                if ((value == null)&&(getLife_cycle()!= null)) {
                    setLife_cycle(null);
                }
            }
            if (values.containsKey("sslInfo")) {
                final Object value = values.remove("sslInfo");
                if (value instanceof Map) {
                    if (getSslInfo() == null) {
                        setSslInfo(new SSLInfo());
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    getSslInfo().fromMap(inputMap);
                }
                if ((value == null)&&(getSslInfo()!= null)) {
                    setSslInfo(null);
                }
            }
        }
        // navigation properties
        {
            if ((values).containsKey("apiProxies")) {
                final Object value = (values).remove("apiProxies");
                if (value instanceof Iterable) {
                    if (toApiProxies == null) {
                        toApiProxies = Lists.newArrayList();
                    } else {
                        toApiProxies = Lists.newArrayList(toApiProxies);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        APIProxy entity;
                        if (toApiProxies.size()>i) {
                            entity = toApiProxies.get(i);
                        } else {
                            entity = new APIProxy();
                            toApiProxies.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("resources")) {
                final Object value = (values).remove("resources");
                if (value instanceof Iterable) {
                    if (toResources == null) {
                        toResources = Lists.newArrayList();
                    } else {
                        toResources = Lists.newArrayList(toResources);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Resource entity;
                        if (toResources.size()>i) {
                            entity = toResources.get(i);
                        } else {
                            entity = new Resource();
                            toResources.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >APIProviderField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new APIProviderField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >APIProviderField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new APIProviderField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public HttpDestinationProperties getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final HttpDestinationProperties destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return (com.mycompany.vdm.services.APIPortalApplicationsCFService.DEFAULT_SERVICE_PATH);
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toApiProxies!= null) {
            (values).put("apiProxies", toApiProxies);
        }
        if (toResources!= null) {
            (values).put("resources", toResources);
        }
        return values;
    }

    /**
     * Fetches the <b>APIProxy</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>apiProxies</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>APIProxy</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIProxy> fetchApiProxies()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type APIProxy.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("name=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(name));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("apiProxies");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<APIProxy> entityList = result.asList(APIProxy.class);
        for (APIProxy entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>APIProxy</b> entities (one to many). This corresponds to the OData navigation property <b>apiProxies</b>.
     * <p>
     * If the navigation property <b>apiProxies</b> of a queried <b>APIProvider</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>APIProxy</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIProxy> getApiProxiesOrFetch()
        throws ODataException
    {
        if (toApiProxies == null) {
            toApiProxies = fetchApiProxies();
        }
        return toApiProxies;
    }

    /**
     * Retrieval of associated <b>APIProxy</b> entities (one to many). This corresponds to the OData navigation property <b>apiProxies</b>.
     * <p>
     * If the navigation property for an entity <b>APIProvider</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>apiProxies</b> is already loaded, the result will contain the <b>APIProxy</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<APIProxy>> getApiProxiesIfPresent() {
        return Option.of(toApiProxies);
    }

    /**
     * Overwrites the list of associated <b>APIProxy</b> entities for the loaded navigation property <b>apiProxies</b>.
     * <p>
     * If the navigation property <b>apiProxies</b> of a queried <b>APIProvider</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>APIProxy</b> entities.
     */
    public void setApiProxies(
        @Nonnull
        final List<APIProxy> value) {
        if (toApiProxies == null) {
            toApiProxies = Lists.newArrayList();
        }
        toApiProxies.clear();
        toApiProxies.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>APIProxy</b> entities. This corresponds to the OData navigation property <b>apiProxies</b>.
     * <p>
     * If the navigation property <b>apiProxies</b> of a queried <b>APIProvider</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>APIProxy</b> entities.
     */
    public void addApiProxies(APIProxy... entity) {
        if (toApiProxies == null) {
            toApiProxies = Lists.newArrayList();
        }
        toApiProxies.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>Resource</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>Resource</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Resource> fetchResources()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type Resource.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("name=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(name));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("resources");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<Resource> entityList = result.asList(Resource.class);
        for (Resource entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>Resource</b> entities (one to many). This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * If the navigation property <b>resources</b> of a queried <b>APIProvider</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>Resource</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Resource> getResourcesOrFetch()
        throws ODataException
    {
        if (toResources == null) {
            toResources = fetchResources();
        }
        return toResources;
    }

    /**
     * Retrieval of associated <b>Resource</b> entities (one to many). This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * If the navigation property for an entity <b>APIProvider</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>resources</b> is already loaded, the result will contain the <b>Resource</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Resource>> getResourcesIfPresent() {
        return Option.of(toResources);
    }

    /**
     * Overwrites the list of associated <b>Resource</b> entities for the loaded navigation property <b>resources</b>.
     * <p>
     * If the navigation property <b>resources</b> of a queried <b>APIProvider</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>Resource</b> entities.
     */
    public void setResources(
        @Nonnull
        final List<Resource> value) {
        if (toResources == null) {
            toResources = Lists.newArrayList();
        }
        toResources.clear();
        toResources.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>Resource</b> entities. This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * If the navigation property <b>resources</b> of a queried <b>APIProvider</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Resource</b> entities.
     */
    public void addResources(Resource... entity) {
        if (toResources == null) {
            toResources = Lists.newArrayList();
        }
        toResources.addAll(Lists.newArrayList(entity));
    }


    /**
     * Helper class to allow for fluent creation of APIProvider instances.
     * 
     */
    public final static class APIProviderBuilder {

        private List<APIProxy> toApiProxies = Lists.newArrayList();
        private List<Resource> toResources = Lists.newArrayList();

        private APIProvider.APIProviderBuilder toApiProxies(final List<APIProxy> value) {
            toApiProxies.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>apiProxies</b> for <b>APIProvider</b> to multiple <b>APIProxy</b>.
         * 
         * @param value
         *     The APIProxys to build this APIProvider with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProvider.APIProviderBuilder apiProxies(APIProxy... value) {
            return toApiProxies(Lists.newArrayList(value));
        }

        private APIProvider.APIProviderBuilder toResources(final List<Resource> value) {
            toResources.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>resources</b> for <b>APIProvider</b> to multiple <b>Resource</b>.
         * 
         * @param value
         *     The Resources to build this APIProvider with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProvider.APIProviderBuilder resources(Resource... value) {
            return toResources(Lists.newArrayList(value));
        }

    }

}
