
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.69.0
 */

package com.mycompany.vdm.namespaces.portalapplicationscf;

import java.util.Map;
import javax.annotation.Nonnull;
import com.google.common.collect.Maps;
import com.mycompany.vdm.namespaces.portalapplicationscf.selectable.APIProviderSelectable;
import com.sap.cloud.sdk.datamodel.odata.helper.FluentHelperByKey;


/**
 * Fluent helper to fetch a single {@link com.mycompany.vdm.namespaces.portalapplicationscf.APIProvider APIProvider} entity using key fields. This fluent helper allows methods which modify the underlying query to be called before executing the query itself. 
 * 
 */
public class APIProviderByKeyFluentHelper
    extends FluentHelperByKey<APIProviderByKeyFluentHelper, APIProvider, APIProviderSelectable>
{

    private final Map<String, Object> key = Maps.newHashMap();

    /**
     * Creates a fluent helper object that will fetch a single {@link com.mycompany.vdm.namespaces.portalapplicationscf.APIProvider APIProvider} entity with the provided key field values. To perform execution, call the {@link #execute execute} method on the fluent helper object.
     * 
     * @param servicePath
     *     Service path to be used to fetch a single {@code APIProvider}
     * @param name
     *     
     * @deprecated
     *     Use the constructor {@link APIProviderByKeyFluentHelper#APIProviderByKeyFluentHelper(String, String, String)}  instead.
     */
    @Deprecated
    public APIProviderByKeyFluentHelper(
        @Nonnull
        final String servicePath, final String name) {
        super(servicePath);
        this.key.put("name", name);
    }

    /**
     * Creates a fluent helper object that will fetch a single {@link com.mycompany.vdm.namespaces.portalapplicationscf.APIProvider APIProvider} entity with the provided key field values. To perform execution, call the {@link #execute execute} method on the fluent helper object.
     * 
     * @param entityCollection
     *     Entity Collection to be used to fetch a single {@code APIProvider}
     * @param servicePath
     *     Service path to be used to fetch a single {@code APIProvider}
     * @param name
     *     
     */
    public APIProviderByKeyFluentHelper(
        @Nonnull
        final String servicePath,
        @Nonnull
        final String entityCollection, final String name) {
        super(servicePath, entityCollection);
        this.key.put("name", name);
    }

    @Override
    @Nonnull
    protected Class<APIProvider> getEntityClass() {
        return APIProvider.class;
    }

    @Override
    @Nonnull
    protected Map<String, Object> getKey() {
        return key;
    }

}
