
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.69.0
 */

package com.mycompany.vdm.namespaces.portalapplicationscf;

import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.mycompany.vdm.namespaces.portalapplicationscf.field.APIProxyField;
import com.mycompany.vdm.namespaces.portalapplicationscf.link.APIProxyLink;
import com.mycompany.vdm.namespaces.portalapplicationscf.link.APIProxyOneToOneLink;
import com.mycompany.vdm.namespaces.portalapplicationscf.selectable.APIProxySelectable;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpClientAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;
import com.sap.cloud.sdk.datamodel.odata.helper.ODataTypeValueSerializer;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.odatav2.connectivity.ODataException;
import com.sap.cloud.sdk.odatav2.connectivity.ODataExceptionType;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQuery;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryBuilder;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryResult;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.apache.http.client.HttpClient;
import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;


/**
 * <p>Original entity name from the Odata EDM: <b>APIProxy</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class APIProxy
    extends VdmEntity<APIProxy>
{

    /**
     * Selector for all available fields of APIProxy.
     * 
     */
    public final static APIProxySelectable ALL_FIELDS = () -> "*";
    /**
     * Constraints: Nullable, Maximum length: 200 <p>Original property name from the Odata EDM: <b>FK_PROVIDERNAME</b></p>
     * 
     * @return
     *     The fK_PROVIDERNAME contained in this entity.
     */
    @SerializedName("FK_PROVIDERNAME")
    @JsonProperty("FK_PROVIDERNAME")
    @Nullable
    @ODataField(odataName = "FK_PROVIDERNAME")
    private String fK_PROVIDERNAME;
    /**
     * Use with available fluent helpers to apply the <b>FK_PROVIDERNAME</b> field to query operations.
     * 
     */
    public final static APIProxyField<String> FKPROVIDERNAME = new APIProxyField<String>("FK_PROVIDERNAME");
    /**
     * Constraints: Nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>cfBindingId</b></p>
     * 
     * @return
     *     The cfBindingId contained in this entity.
     */
    @SerializedName("cfBindingId")
    @JsonProperty("cfBindingId")
    @Nullable
    @ODataField(odataName = "cfBindingId")
    private String cfBindingId;
    /**
     * Use with available fluent helpers to apply the <b>cfBindingId</b> field to query operations.
     * 
     */
    public final static APIProxyField<String> CF_BINDING_ID = new APIProxyField<String>("cfBindingId");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>isCopy</b></p>
     * 
     * @return
     *     The isCopy contained in this entity.
     */
    @SerializedName("isCopy")
    @JsonProperty("isCopy")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "isCopy")
    private Boolean isCopy;
    /**
     * Use with available fluent helpers to apply the <b>isCopy</b> field to query operations.
     * 
     */
    public final static APIProxyField<Boolean> IS_COPY = new APIProxyField<Boolean>("isCopy");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>isPublished</b></p>
     * 
     * @return
     *     The isPublished contained in this entity.
     */
    @SerializedName("isPublished")
    @JsonProperty("isPublished")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "isPublished")
    private Boolean isPublished;
    /**
     * Use with available fluent helpers to apply the <b>isPublished</b> field to query operations.
     * 
     */
    public final static APIProxyField<Boolean> IS_PUBLISHED = new APIProxyField<Boolean>("isPublished");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @return
     *     The life_cycle contained in this entity.
     */
    @SerializedName("life_cycle")
    @JsonProperty("life_cycle")
    @Nullable
    @ODataField(odataName = "life_cycle")
    private History life_cycle;
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @return
     *     The name contained in this entity.
     */
    @Key
    @SerializedName("name")
    @JsonProperty("name")
    @Nullable
    @ODataField(odataName = "name")
    private String name;
    /**
     * Use with available fluent helpers to apply the <b>name</b> field to query operations.
     * 
     */
    public final static APIProxyField<String> NAME = new APIProxyField<String>("name");
    /**
     * Constraints: Nullable, Maximum length: 200 <p>Original property name from the Odata EDM: <b>provider_name</b></p>
     * 
     * @return
     *     The provider_name contained in this entity.
     */
    @SerializedName("provider_name")
    @JsonProperty("provider_name")
    @Nullable
    @ODataField(odataName = "provider_name")
    private String provider_name;
    /**
     * Use with available fluent helpers to apply the <b>provider_name</b> field to query operations.
     * 
     */
    public final static APIProxyField<String> PROVIDER_NAME = new APIProxyField<String>("provider_name");
    /**
     * Constraints: Nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>service_code</b></p>
     * 
     * @return
     *     The service_code contained in this entity.
     */
    @SerializedName("service_code")
    @JsonProperty("service_code")
    @Nullable
    @ODataField(odataName = "service_code")
    private String service_code;
    /**
     * Use with available fluent helpers to apply the <b>service_code</b> field to query operations.
     * 
     */
    public final static APIProxyField<String> SERVICE_CODE = new APIProxyField<String>("service_code");
    /**
     * Constraints: Nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>state</b></p>
     * 
     * @return
     *     The state contained in this entity.
     */
    @SerializedName("state")
    @JsonProperty("state")
    @Nullable
    @ODataField(odataName = "state")
    private String state;
    /**
     * Use with available fluent helpers to apply the <b>state</b> field to query operations.
     * 
     */
    public final static APIProxyField<String> STATE = new APIProxyField<String>("state");
    /**
     * Constraints: Nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>status_code</b></p>
     * 
     * @return
     *     The status_code contained in this entity.
     */
    @SerializedName("status_code")
    @JsonProperty("status_code")
    @Nullable
    @ODataField(odataName = "status_code")
    private String status_code;
    /**
     * Use with available fluent helpers to apply the <b>status_code</b> field to query operations.
     * 
     */
    public final static APIProxyField<String> STATUS_CODE = new APIProxyField<String>("status_code");
    /**
     * Constraints: Nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>version</b></p>
     * 
     * @return
     *     The version contained in this entity.
     */
    @SerializedName("version")
    @JsonProperty("version")
    @Nullable
    @ODataField(odataName = "version")
    private String version;
    /**
     * Use with available fluent helpers to apply the <b>version</b> field to query operations.
     * 
     */
    public final static APIProxyField<String> VERSION = new APIProxyField<String>("version");
    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>title</b></p>
     * 
     * @return
     *     The title contained in this entity.
     */
    @SerializedName("title")
    @JsonProperty("title")
    @Nullable
    @ODataField(odataName = "title")
    private String title;
    /**
     * Use with available fluent helpers to apply the <b>title</b> field to query operations.
     * 
     */
    public final static APIProxyField<String> TITLE = new APIProxyField<String>("title");
    /**
     * Constraints: Not nullable, Maximum length: 16000 <p>Original property name from the Odata EDM: <b>description</b></p>
     * 
     * @return
     *     The description contained in this entity.
     */
    @SerializedName("description")
    @JsonProperty("description")
    @Nullable
    @ODataField(odataName = "description")
    private String description;
    /**
     * Use with available fluent helpers to apply the <b>description</b> field to query operations.
     * 
     */
    public final static APIProxyField<String> DESCRIPTION = new APIProxyField<String>("description");
    /**
     * Navigation property <b>apiProducts</b> for <b>APIProxy</b> to multiple <b>APIProduct</b>.
     * 
     */
    @SerializedName("apiProducts")
    @JsonProperty("apiProducts")
    @ODataField(odataName = "apiProducts")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<APIProduct> toApiProducts;
    /**
     * Navigation property <b>apiProvider</b> for <b>APIProxy</b> to single <b>APIProvider</b>.
     * 
     */
    @SerializedName("apiProvider")
    @JsonProperty("apiProvider")
    @ODataField(odataName = "apiProvider")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private APIProvider toApiProvider;
    /**
     * Navigation property <b>contentPackage</b> for <b>APIProxy</b> to single <b>ContentPackageMapper</b>.
     * 
     */
    @SerializedName("contentPackage")
    @JsonProperty("contentPackage")
    @ODataField(odataName = "contentPackage")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private ContentPackageMapper toContentPackage;
    /**
     * Navigation property <b>fileResources</b> for <b>APIProxy</b> to multiple <b>FileResource</b>.
     * 
     */
    @SerializedName("fileResources")
    @JsonProperty("fileResources")
    @ODataField(odataName = "fileResources")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<FileResource> toFileResources;
    /**
     * Navigation property <b>policies</b> for <b>APIProxy</b> to multiple <b>Policy</b>.
     * 
     */
    @SerializedName("policies")
    @JsonProperty("policies")
    @ODataField(odataName = "policies")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Policy> toPolicies;
    /**
     * Navigation property <b>proxyEndPoints</b> for <b>APIProxy</b> to multiple <b>APIProxyEndPoint</b>.
     * 
     */
    @SerializedName("proxyEndPoints")
    @JsonProperty("proxyEndPoints")
    @ODataField(odataName = "proxyEndPoints")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<APIProxyEndPoint> toProxyEndPoints;
    /**
     * Navigation property <b>resources</b> for <b>APIProxy</b> to multiple <b>Resource</b>.
     * 
     */
    @SerializedName("resources")
    @JsonProperty("resources")
    @ODataField(odataName = "resources")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Resource> toResources;
    /**
     * Navigation property <b>targetAPIProxies</b> for <b>APIProxy</b> to multiple <b>APITargetEndPoint</b>.
     * 
     */
    @SerializedName("targetAPIProxies")
    @JsonProperty("targetAPIProxies")
    @ODataField(odataName = "targetAPIProxies")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<APITargetEndPoint> toTargetAPIProxies;
    /**
     * Navigation property <b>targetEndPoints</b> for <b>APIProxy</b> to multiple <b>APITargetEndPoint</b>.
     * 
     */
    @SerializedName("targetEndPoints")
    @JsonProperty("targetEndPoints")
    @ODataField(odataName = "targetEndPoints")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<APITargetEndPoint> toTargetEndPoints;
    /**
     * Use with available fluent helpers to apply the <b>apiProducts</b> navigation property to query operations.
     * 
     */
    public final static APIProxyLink<APIProduct> TO_API_PRODUCTS = new APIProxyLink<APIProduct>("apiProducts");
    /**
     * Use with available fluent helpers to apply the <b>apiProvider</b> navigation property to query operations.
     * 
     */
    public final static APIProxyOneToOneLink<APIProvider> TO_API_PROVIDER = new APIProxyOneToOneLink<APIProvider>("apiProvider");
    /**
     * Use with available fluent helpers to apply the <b>contentPackage</b> navigation property to query operations.
     * 
     */
    public final static APIProxyOneToOneLink<ContentPackageMapper> TO_CONTENT_PACKAGE = new APIProxyOneToOneLink<ContentPackageMapper>("contentPackage");
    /**
     * Use with available fluent helpers to apply the <b>fileResources</b> navigation property to query operations.
     * 
     */
    public final static APIProxyLink<FileResource> TO_FILE_RESOURCES = new APIProxyLink<FileResource>("fileResources");
    /**
     * Use with available fluent helpers to apply the <b>policies</b> navigation property to query operations.
     * 
     */
    public final static APIProxyLink<Policy> TO_POLICIES = new APIProxyLink<Policy>("policies");
    /**
     * Use with available fluent helpers to apply the <b>proxyEndPoints</b> navigation property to query operations.
     * 
     */
    public final static APIProxyLink<APIProxyEndPoint> TO_PROXY_END_POINTS = new APIProxyLink<APIProxyEndPoint>("proxyEndPoints");
    /**
     * Use with available fluent helpers to apply the <b>resources</b> navigation property to query operations.
     * 
     */
    public final static APIProxyLink<Resource> TO_RESOURCES = new APIProxyLink<Resource>("resources");
    /**
     * Use with available fluent helpers to apply the <b>targetAPIProxies</b> navigation property to query operations.
     * 
     */
    public final static APIProxyLink<APITargetEndPoint> TO_TARGET_API_PROXIES = new APIProxyLink<APITargetEndPoint>("targetAPIProxies");
    /**
     * Use with available fluent helpers to apply the <b>targetEndPoints</b> navigation property to query operations.
     * 
     */
    public final static APIProxyLink<APITargetEndPoint> TO_TARGET_END_POINTS = new APIProxyLink<APITargetEndPoint>("targetEndPoints");

    @Nonnull
    @Override
    public Class<APIProxy> getType() {
        return APIProxy.class;
    }

    /**
     * Constraints: Nullable, Maximum length: 200 <p>Original property name from the Odata EDM: <b>FK_PROVIDERNAME</b></p>
     * 
     * @param fK_PROVIDERNAME
     *     The fK_PROVIDERNAME to set.
     */
    public void setFK_PROVIDERNAME(
        @Nullable
        final String fK_PROVIDERNAME) {
        rememberChangedField("FK_PROVIDERNAME", this.fK_PROVIDERNAME);
        this.fK_PROVIDERNAME = fK_PROVIDERNAME;
    }

    /**
     * Constraints: Nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>cfBindingId</b></p>
     * 
     * @param cfBindingId
     *     The cfBindingId to set.
     */
    public void setCfBindingId(
        @Nullable
        final String cfBindingId) {
        rememberChangedField("cfBindingId", this.cfBindingId);
        this.cfBindingId = cfBindingId;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>isCopy</b></p>
     * 
     * @param isCopy
     *     The isCopy to set.
     */
    public void setIsCopy(
        @Nullable
        final Boolean isCopy) {
        rememberChangedField("isCopy", this.isCopy);
        this.isCopy = isCopy;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>isPublished</b></p>
     * 
     * @param isPublished
     *     The isPublished to set.
     */
    public void setIsPublished(
        @Nullable
        final Boolean isPublished) {
        rememberChangedField("isPublished", this.isPublished);
        this.isPublished = isPublished;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @param life_cycle
     *     The life_cycle to set.
     */
    public void setLife_cycle(
        @Nullable
        final History life_cycle) {
        rememberChangedField("life_cycle", this.life_cycle);
        this.life_cycle = life_cycle;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @param name
     *     The name to set.
     */
    public void setName(
        @Nullable
        final String name) {
        rememberChangedField("name", this.name);
        this.name = name;
    }

    /**
     * Constraints: Nullable, Maximum length: 200 <p>Original property name from the Odata EDM: <b>provider_name</b></p>
     * 
     * @param provider_name
     *     The provider_name to set.
     */
    public void setProvider_name(
        @Nullable
        final String provider_name) {
        rememberChangedField("provider_name", this.provider_name);
        this.provider_name = provider_name;
    }

    /**
     * Constraints: Nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>service_code</b></p>
     * 
     * @param service_code
     *     The service_code to set.
     */
    public void setService_code(
        @Nullable
        final String service_code) {
        rememberChangedField("service_code", this.service_code);
        this.service_code = service_code;
    }

    /**
     * Constraints: Nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>state</b></p>
     * 
     * @param state
     *     The state to set.
     */
    public void setState(
        @Nullable
        final String state) {
        rememberChangedField("state", this.state);
        this.state = state;
    }

    /**
     * Constraints: Nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>status_code</b></p>
     * 
     * @param status_code
     *     The status_code to set.
     */
    public void setStatus_code(
        @Nullable
        final String status_code) {
        rememberChangedField("status_code", this.status_code);
        this.status_code = status_code;
    }

    /**
     * Constraints: Nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>version</b></p>
     * 
     * @param version
     *     The version to set.
     */
    public void setVersion(
        @Nullable
        final String version) {
        rememberChangedField("version", this.version);
        this.version = version;
    }

    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>title</b></p>
     * 
     * @param title
     *     The title to set.
     */
    public void setTitle(
        @Nullable
        final String title) {
        rememberChangedField("title", this.title);
        this.title = title;
    }

    /**
     * Constraints: Not nullable, Maximum length: 16000 <p>Original property name from the Odata EDM: <b>description</b></p>
     * 
     * @param description
     *     The description to set.
     */
    public void setDescription(
        @Nullable
        final String description) {
        rememberChangedField("description", this.description);
        this.description = description;
    }

    @Override
    protected String getEntityCollection() {
        return "APIProxies";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("name", getName());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("FK_PROVIDERNAME", getFK_PROVIDERNAME());
        values.put("cfBindingId", getCfBindingId());
        values.put("isCopy", getIsCopy());
        values.put("isPublished", getIsPublished());
        values.put("life_cycle", getLife_cycle());
        values.put("name", getName());
        values.put("provider_name", getProvider_name());
        values.put("service_code", getService_code());
        values.put("state", getState());
        values.put("status_code", getStatus_code());
        values.put("version", getVersion());
        values.put("title", getTitle());
        values.put("description", getDescription());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("FK_PROVIDERNAME")) {
                final Object value = values.remove("FK_PROVIDERNAME");
                if ((value == null)||(!value.equals(getFK_PROVIDERNAME()))) {
                    setFK_PROVIDERNAME(((String) value));
                }
            }
            if (values.containsKey("cfBindingId")) {
                final Object value = values.remove("cfBindingId");
                if ((value == null)||(!value.equals(getCfBindingId()))) {
                    setCfBindingId(((String) value));
                }
            }
            if (values.containsKey("isCopy")) {
                final Object value = values.remove("isCopy");
                if ((value == null)||(!value.equals(getIsCopy()))) {
                    setIsCopy(((Boolean) value));
                }
            }
            if (values.containsKey("isPublished")) {
                final Object value = values.remove("isPublished");
                if ((value == null)||(!value.equals(getIsPublished()))) {
                    setIsPublished(((Boolean) value));
                }
            }
            if (values.containsKey("name")) {
                final Object value = values.remove("name");
                if ((value == null)||(!value.equals(getName()))) {
                    setName(((String) value));
                }
            }
            if (values.containsKey("provider_name")) {
                final Object value = values.remove("provider_name");
                if ((value == null)||(!value.equals(getProvider_name()))) {
                    setProvider_name(((String) value));
                }
            }
            if (values.containsKey("service_code")) {
                final Object value = values.remove("service_code");
                if ((value == null)||(!value.equals(getService_code()))) {
                    setService_code(((String) value));
                }
            }
            if (values.containsKey("state")) {
                final Object value = values.remove("state");
                if ((value == null)||(!value.equals(getState()))) {
                    setState(((String) value));
                }
            }
            if (values.containsKey("status_code")) {
                final Object value = values.remove("status_code");
                if ((value == null)||(!value.equals(getStatus_code()))) {
                    setStatus_code(((String) value));
                }
            }
            if (values.containsKey("version")) {
                final Object value = values.remove("version");
                if ((value == null)||(!value.equals(getVersion()))) {
                    setVersion(((String) value));
                }
            }
            if (values.containsKey("title")) {
                final Object value = values.remove("title");
                if ((value == null)||(!value.equals(getTitle()))) {
                    setTitle(((String) value));
                }
            }
            if (values.containsKey("description")) {
                final Object value = values.remove("description");
                if ((value == null)||(!value.equals(getDescription()))) {
                    setDescription(((String) value));
                }
            }
        }
        // structured properties
        {
            if (values.containsKey("life_cycle")) {
                final Object value = values.remove("life_cycle");
                if (value instanceof Map) {
                    if (getLife_cycle() == null) {
                        setLife_cycle(new History());
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    getLife_cycle().fromMap(inputMap);
                }
                if ((value == null)&&(getLife_cycle()!= null)) {
                    setLife_cycle(null);
                }
            }
        }
        // navigation properties
        {
            if ((values).containsKey("apiProducts")) {
                final Object value = (values).remove("apiProducts");
                if (value instanceof Iterable) {
                    if (toApiProducts == null) {
                        toApiProducts = Lists.newArrayList();
                    } else {
                        toApiProducts = Lists.newArrayList(toApiProducts);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        APIProduct entity;
                        if (toApiProducts.size()>i) {
                            entity = toApiProducts.get(i);
                        } else {
                            entity = new APIProduct();
                            toApiProducts.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("apiProvider")) {
                final Object value = (values).remove("apiProvider");
                if (value instanceof Map) {
                    if (toApiProvider == null) {
                        toApiProvider = new APIProvider();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toApiProvider.fromMap(inputMap);
                }
            }
            if ((values).containsKey("contentPackage")) {
                final Object value = (values).remove("contentPackage");
                if (value instanceof Map) {
                    if (toContentPackage == null) {
                        toContentPackage = new ContentPackageMapper();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toContentPackage.fromMap(inputMap);
                }
            }
            if ((values).containsKey("fileResources")) {
                final Object value = (values).remove("fileResources");
                if (value instanceof Iterable) {
                    if (toFileResources == null) {
                        toFileResources = Lists.newArrayList();
                    } else {
                        toFileResources = Lists.newArrayList(toFileResources);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        FileResource entity;
                        if (toFileResources.size()>i) {
                            entity = toFileResources.get(i);
                        } else {
                            entity = new FileResource();
                            toFileResources.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("policies")) {
                final Object value = (values).remove("policies");
                if (value instanceof Iterable) {
                    if (toPolicies == null) {
                        toPolicies = Lists.newArrayList();
                    } else {
                        toPolicies = Lists.newArrayList(toPolicies);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Policy entity;
                        if (toPolicies.size()>i) {
                            entity = toPolicies.get(i);
                        } else {
                            entity = new Policy();
                            toPolicies.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("proxyEndPoints")) {
                final Object value = (values).remove("proxyEndPoints");
                if (value instanceof Iterable) {
                    if (toProxyEndPoints == null) {
                        toProxyEndPoints = Lists.newArrayList();
                    } else {
                        toProxyEndPoints = Lists.newArrayList(toProxyEndPoints);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        APIProxyEndPoint entity;
                        if (toProxyEndPoints.size()>i) {
                            entity = toProxyEndPoints.get(i);
                        } else {
                            entity = new APIProxyEndPoint();
                            toProxyEndPoints.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("resources")) {
                final Object value = (values).remove("resources");
                if (value instanceof Iterable) {
                    if (toResources == null) {
                        toResources = Lists.newArrayList();
                    } else {
                        toResources = Lists.newArrayList(toResources);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Resource entity;
                        if (toResources.size()>i) {
                            entity = toResources.get(i);
                        } else {
                            entity = new Resource();
                            toResources.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("targetAPIProxies")) {
                final Object value = (values).remove("targetAPIProxies");
                if (value instanceof Iterable) {
                    if (toTargetAPIProxies == null) {
                        toTargetAPIProxies = Lists.newArrayList();
                    } else {
                        toTargetAPIProxies = Lists.newArrayList(toTargetAPIProxies);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        APITargetEndPoint entity;
                        if (toTargetAPIProxies.size()>i) {
                            entity = toTargetAPIProxies.get(i);
                        } else {
                            entity = new APITargetEndPoint();
                            toTargetAPIProxies.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("targetEndPoints")) {
                final Object value = (values).remove("targetEndPoints");
                if (value instanceof Iterable) {
                    if (toTargetEndPoints == null) {
                        toTargetEndPoints = Lists.newArrayList();
                    } else {
                        toTargetEndPoints = Lists.newArrayList(toTargetEndPoints);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        APITargetEndPoint entity;
                        if (toTargetEndPoints.size()>i) {
                            entity = toTargetEndPoints.get(i);
                        } else {
                            entity = new APITargetEndPoint();
                            toTargetEndPoints.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >APIProxyField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new APIProxyField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >APIProxyField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new APIProxyField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public HttpDestinationProperties getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final HttpDestinationProperties destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return (com.mycompany.vdm.services.APIPortalApplicationsCFService.DEFAULT_SERVICE_PATH);
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toApiProducts!= null) {
            (values).put("apiProducts", toApiProducts);
        }
        if (toApiProvider!= null) {
            (values).put("apiProvider", toApiProvider);
        }
        if (toContentPackage!= null) {
            (values).put("contentPackage", toContentPackage);
        }
        if (toFileResources!= null) {
            (values).put("fileResources", toFileResources);
        }
        if (toPolicies!= null) {
            (values).put("policies", toPolicies);
        }
        if (toProxyEndPoints!= null) {
            (values).put("proxyEndPoints", toProxyEndPoints);
        }
        if (toResources!= null) {
            (values).put("resources", toResources);
        }
        if (toTargetAPIProxies!= null) {
            (values).put("targetAPIProxies", toTargetAPIProxies);
        }
        if (toTargetEndPoints!= null) {
            (values).put("targetEndPoints", toTargetEndPoints);
        }
        return values;
    }

    /**
     * Fetches the <b>APIProduct</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>apiProducts</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>APIProduct</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIProduct> fetchApiProducts()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type APIProduct.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("name=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(name));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("apiProducts");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<APIProduct> entityList = result.asList(APIProduct.class);
        for (APIProduct entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>APIProduct</b> entities (one to many). This corresponds to the OData navigation property <b>apiProducts</b>.
     * <p>
     * If the navigation property <b>apiProducts</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>APIProduct</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIProduct> getApiProductsOrFetch()
        throws ODataException
    {
        if (toApiProducts == null) {
            toApiProducts = fetchApiProducts();
        }
        return toApiProducts;
    }

    /**
     * Retrieval of associated <b>APIProduct</b> entities (one to many). This corresponds to the OData navigation property <b>apiProducts</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxy</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>apiProducts</b> is already loaded, the result will contain the <b>APIProduct</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<APIProduct>> getApiProductsIfPresent() {
        return Option.of(toApiProducts);
    }

    /**
     * Overwrites the list of associated <b>APIProduct</b> entities for the loaded navigation property <b>apiProducts</b>.
     * <p>
     * If the navigation property <b>apiProducts</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>APIProduct</b> entities.
     */
    public void setApiProducts(
        @Nonnull
        final List<APIProduct> value) {
        if (toApiProducts == null) {
            toApiProducts = Lists.newArrayList();
        }
        toApiProducts.clear();
        toApiProducts.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>APIProduct</b> entities. This corresponds to the OData navigation property <b>apiProducts</b>.
     * <p>
     * If the navigation property <b>apiProducts</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>APIProduct</b> entities.
     */
    public void addApiProducts(APIProduct... entity) {
        if (toApiProducts == null) {
            toApiProducts = Lists.newArrayList();
        }
        toApiProducts.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>APIProvider</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>apiProvider</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>APIProvider</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public APIProvider fetchApiProvider()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type APIProvider.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("name=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(name));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("apiProvider");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final APIProvider entity = result.as(APIProvider.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>APIProvider</b> entity (one to one). This corresponds to the OData navigation property <b>apiProvider</b>.
     * <p>
     * If the navigation property <b>apiProvider</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>APIProvider</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public APIProvider getApiProviderOrFetch()
        throws ODataException
    {
        if (toApiProvider == null) {
            toApiProvider = fetchApiProvider();
        }
        return toApiProvider;
    }

    /**
     * Retrieval of associated <b>APIProvider</b> entity (one to one). This corresponds to the OData navigation property <b>apiProvider</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxy</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>apiProvider</b> is already loaded, the result will contain the <b>APIProvider</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<APIProvider> getApiProviderIfPresent() {
        return Option.of(toApiProvider);
    }

    /**
     * Overwrites the associated <b>APIProvider</b> entity for the loaded navigation property <b>apiProvider</b>.
     * 
     * @param value
     *     New <b>APIProvider</b> entity.
     */
    public void setApiProvider(final APIProvider value) {
        toApiProvider = value;
    }

    /**
     * Fetches the <b>ContentPackageMapper</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>contentPackage</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>ContentPackageMapper</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public ContentPackageMapper fetchContentPackage()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type ContentPackageMapper.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("name=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(name));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("contentPackage");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final ContentPackageMapper entity = result.as(ContentPackageMapper.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>ContentPackageMapper</b> entity (one to one). This corresponds to the OData navigation property <b>contentPackage</b>.
     * <p>
     * If the navigation property <b>contentPackage</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>ContentPackageMapper</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public ContentPackageMapper getContentPackageOrFetch()
        throws ODataException
    {
        if (toContentPackage == null) {
            toContentPackage = fetchContentPackage();
        }
        return toContentPackage;
    }

    /**
     * Retrieval of associated <b>ContentPackageMapper</b> entity (one to one). This corresponds to the OData navigation property <b>contentPackage</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxy</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>contentPackage</b> is already loaded, the result will contain the <b>ContentPackageMapper</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<ContentPackageMapper> getContentPackageIfPresent() {
        return Option.of(toContentPackage);
    }

    /**
     * Overwrites the associated <b>ContentPackageMapper</b> entity for the loaded navigation property <b>contentPackage</b>.
     * 
     * @param value
     *     New <b>ContentPackageMapper</b> entity.
     */
    public void setContentPackage(final ContentPackageMapper value) {
        toContentPackage = value;
    }

    /**
     * Fetches the <b>FileResource</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>fileResources</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>FileResource</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<FileResource> fetchFileResources()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type FileResource.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("name=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(name));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("fileResources");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<FileResource> entityList = result.asList(FileResource.class);
        for (FileResource entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>FileResource</b> entities (one to many). This corresponds to the OData navigation property <b>fileResources</b>.
     * <p>
     * If the navigation property <b>fileResources</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>FileResource</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<FileResource> getFileResourcesOrFetch()
        throws ODataException
    {
        if (toFileResources == null) {
            toFileResources = fetchFileResources();
        }
        return toFileResources;
    }

    /**
     * Retrieval of associated <b>FileResource</b> entities (one to many). This corresponds to the OData navigation property <b>fileResources</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxy</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>fileResources</b> is already loaded, the result will contain the <b>FileResource</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<FileResource>> getFileResourcesIfPresent() {
        return Option.of(toFileResources);
    }

    /**
     * Overwrites the list of associated <b>FileResource</b> entities for the loaded navigation property <b>fileResources</b>.
     * <p>
     * If the navigation property <b>fileResources</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>FileResource</b> entities.
     */
    public void setFileResources(
        @Nonnull
        final List<FileResource> value) {
        if (toFileResources == null) {
            toFileResources = Lists.newArrayList();
        }
        toFileResources.clear();
        toFileResources.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>FileResource</b> entities. This corresponds to the OData navigation property <b>fileResources</b>.
     * <p>
     * If the navigation property <b>fileResources</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>FileResource</b> entities.
     */
    public void addFileResources(FileResource... entity) {
        if (toFileResources == null) {
            toFileResources = Lists.newArrayList();
        }
        toFileResources.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>Policy</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>policies</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>Policy</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Policy> fetchPolicies()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type Policy.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("name=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(name));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("policies");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<Policy> entityList = result.asList(Policy.class);
        for (Policy entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>Policy</b> entities (one to many). This corresponds to the OData navigation property <b>policies</b>.
     * <p>
     * If the navigation property <b>policies</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>Policy</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Policy> getPoliciesOrFetch()
        throws ODataException
    {
        if (toPolicies == null) {
            toPolicies = fetchPolicies();
        }
        return toPolicies;
    }

    /**
     * Retrieval of associated <b>Policy</b> entities (one to many). This corresponds to the OData navigation property <b>policies</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxy</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>policies</b> is already loaded, the result will contain the <b>Policy</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Policy>> getPoliciesIfPresent() {
        return Option.of(toPolicies);
    }

    /**
     * Overwrites the list of associated <b>Policy</b> entities for the loaded navigation property <b>policies</b>.
     * <p>
     * If the navigation property <b>policies</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>Policy</b> entities.
     */
    public void setPolicies(
        @Nonnull
        final List<Policy> value) {
        if (toPolicies == null) {
            toPolicies = Lists.newArrayList();
        }
        toPolicies.clear();
        toPolicies.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>Policy</b> entities. This corresponds to the OData navigation property <b>policies</b>.
     * <p>
     * If the navigation property <b>policies</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Policy</b> entities.
     */
    public void addPolicies(Policy... entity) {
        if (toPolicies == null) {
            toPolicies = Lists.newArrayList();
        }
        toPolicies.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>APIProxyEndPoint</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>proxyEndPoints</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>APIProxyEndPoint</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIProxyEndPoint> fetchProxyEndPoints()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type APIProxyEndPoint.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("name=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(name));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("proxyEndPoints");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<APIProxyEndPoint> entityList = result.asList(APIProxyEndPoint.class);
        for (APIProxyEndPoint entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>APIProxyEndPoint</b> entities (one to many). This corresponds to the OData navigation property <b>proxyEndPoints</b>.
     * <p>
     * If the navigation property <b>proxyEndPoints</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>APIProxyEndPoint</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIProxyEndPoint> getProxyEndPointsOrFetch()
        throws ODataException
    {
        if (toProxyEndPoints == null) {
            toProxyEndPoints = fetchProxyEndPoints();
        }
        return toProxyEndPoints;
    }

    /**
     * Retrieval of associated <b>APIProxyEndPoint</b> entities (one to many). This corresponds to the OData navigation property <b>proxyEndPoints</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxy</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>proxyEndPoints</b> is already loaded, the result will contain the <b>APIProxyEndPoint</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<APIProxyEndPoint>> getProxyEndPointsIfPresent() {
        return Option.of(toProxyEndPoints);
    }

    /**
     * Overwrites the list of associated <b>APIProxyEndPoint</b> entities for the loaded navigation property <b>proxyEndPoints</b>.
     * <p>
     * If the navigation property <b>proxyEndPoints</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>APIProxyEndPoint</b> entities.
     */
    public void setProxyEndPoints(
        @Nonnull
        final List<APIProxyEndPoint> value) {
        if (toProxyEndPoints == null) {
            toProxyEndPoints = Lists.newArrayList();
        }
        toProxyEndPoints.clear();
        toProxyEndPoints.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>APIProxyEndPoint</b> entities. This corresponds to the OData navigation property <b>proxyEndPoints</b>.
     * <p>
     * If the navigation property <b>proxyEndPoints</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>APIProxyEndPoint</b> entities.
     */
    public void addProxyEndPoints(APIProxyEndPoint... entity) {
        if (toProxyEndPoints == null) {
            toProxyEndPoints = Lists.newArrayList();
        }
        toProxyEndPoints.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>Resource</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>Resource</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Resource> fetchResources()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type Resource.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("name=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(name));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("resources");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<Resource> entityList = result.asList(Resource.class);
        for (Resource entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>Resource</b> entities (one to many). This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * If the navigation property <b>resources</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>Resource</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Resource> getResourcesOrFetch()
        throws ODataException
    {
        if (toResources == null) {
            toResources = fetchResources();
        }
        return toResources;
    }

    /**
     * Retrieval of associated <b>Resource</b> entities (one to many). This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxy</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>resources</b> is already loaded, the result will contain the <b>Resource</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Resource>> getResourcesIfPresent() {
        return Option.of(toResources);
    }

    /**
     * Overwrites the list of associated <b>Resource</b> entities for the loaded navigation property <b>resources</b>.
     * <p>
     * If the navigation property <b>resources</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>Resource</b> entities.
     */
    public void setResources(
        @Nonnull
        final List<Resource> value) {
        if (toResources == null) {
            toResources = Lists.newArrayList();
        }
        toResources.clear();
        toResources.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>Resource</b> entities. This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * If the navigation property <b>resources</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Resource</b> entities.
     */
    public void addResources(Resource... entity) {
        if (toResources == null) {
            toResources = Lists.newArrayList();
        }
        toResources.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>APITargetEndPoint</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>targetAPIProxies</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>APITargetEndPoint</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APITargetEndPoint> fetchTargetAPIProxies()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type APITargetEndPoint.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("name=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(name));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("targetAPIProxies");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<APITargetEndPoint> entityList = result.asList(APITargetEndPoint.class);
        for (APITargetEndPoint entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>APITargetEndPoint</b> entities (one to many). This corresponds to the OData navigation property <b>targetAPIProxies</b>.
     * <p>
     * If the navigation property <b>targetAPIProxies</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>APITargetEndPoint</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APITargetEndPoint> getTargetAPIProxiesOrFetch()
        throws ODataException
    {
        if (toTargetAPIProxies == null) {
            toTargetAPIProxies = fetchTargetAPIProxies();
        }
        return toTargetAPIProxies;
    }

    /**
     * Retrieval of associated <b>APITargetEndPoint</b> entities (one to many). This corresponds to the OData navigation property <b>targetAPIProxies</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxy</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>targetAPIProxies</b> is already loaded, the result will contain the <b>APITargetEndPoint</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<APITargetEndPoint>> getTargetAPIProxiesIfPresent() {
        return Option.of(toTargetAPIProxies);
    }

    /**
     * Overwrites the list of associated <b>APITargetEndPoint</b> entities for the loaded navigation property <b>targetAPIProxies</b>.
     * <p>
     * If the navigation property <b>targetAPIProxies</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>APITargetEndPoint</b> entities.
     */
    public void setTargetAPIProxies(
        @Nonnull
        final List<APITargetEndPoint> value) {
        if (toTargetAPIProxies == null) {
            toTargetAPIProxies = Lists.newArrayList();
        }
        toTargetAPIProxies.clear();
        toTargetAPIProxies.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>APITargetEndPoint</b> entities. This corresponds to the OData navigation property <b>targetAPIProxies</b>.
     * <p>
     * If the navigation property <b>targetAPIProxies</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>APITargetEndPoint</b> entities.
     */
    public void addTargetAPIProxies(APITargetEndPoint... entity) {
        if (toTargetAPIProxies == null) {
            toTargetAPIProxies = Lists.newArrayList();
        }
        toTargetAPIProxies.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>APITargetEndPoint</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>targetEndPoints</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>APITargetEndPoint</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APITargetEndPoint> fetchTargetEndPoints()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type APITargetEndPoint.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("name=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(name));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("targetEndPoints");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<APITargetEndPoint> entityList = result.asList(APITargetEndPoint.class);
        for (APITargetEndPoint entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>APITargetEndPoint</b> entities (one to many). This corresponds to the OData navigation property <b>targetEndPoints</b>.
     * <p>
     * If the navigation property <b>targetEndPoints</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>APITargetEndPoint</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APITargetEndPoint> getTargetEndPointsOrFetch()
        throws ODataException
    {
        if (toTargetEndPoints == null) {
            toTargetEndPoints = fetchTargetEndPoints();
        }
        return toTargetEndPoints;
    }

    /**
     * Retrieval of associated <b>APITargetEndPoint</b> entities (one to many). This corresponds to the OData navigation property <b>targetEndPoints</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxy</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>targetEndPoints</b> is already loaded, the result will contain the <b>APITargetEndPoint</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<APITargetEndPoint>> getTargetEndPointsIfPresent() {
        return Option.of(toTargetEndPoints);
    }

    /**
     * Overwrites the list of associated <b>APITargetEndPoint</b> entities for the loaded navigation property <b>targetEndPoints</b>.
     * <p>
     * If the navigation property <b>targetEndPoints</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>APITargetEndPoint</b> entities.
     */
    public void setTargetEndPoints(
        @Nonnull
        final List<APITargetEndPoint> value) {
        if (toTargetEndPoints == null) {
            toTargetEndPoints = Lists.newArrayList();
        }
        toTargetEndPoints.clear();
        toTargetEndPoints.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>APITargetEndPoint</b> entities. This corresponds to the OData navigation property <b>targetEndPoints</b>.
     * <p>
     * If the navigation property <b>targetEndPoints</b> of a queried <b>APIProxy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>APITargetEndPoint</b> entities.
     */
    public void addTargetEndPoints(APITargetEndPoint... entity) {
        if (toTargetEndPoints == null) {
            toTargetEndPoints = Lists.newArrayList();
        }
        toTargetEndPoints.addAll(Lists.newArrayList(entity));
    }


    /**
     * Helper class to allow for fluent creation of APIProxy instances.
     * 
     */
    public final static class APIProxyBuilder {

        private List<APIProduct> toApiProducts = Lists.newArrayList();
        private APIProvider toApiProvider;
        private ContentPackageMapper toContentPackage;
        private List<FileResource> toFileResources = Lists.newArrayList();
        private List<Policy> toPolicies = Lists.newArrayList();
        private List<APIProxyEndPoint> toProxyEndPoints = Lists.newArrayList();
        private List<Resource> toResources = Lists.newArrayList();
        private List<APITargetEndPoint> toTargetAPIProxies = Lists.newArrayList();
        private List<APITargetEndPoint> toTargetEndPoints = Lists.newArrayList();

        private APIProxy.APIProxyBuilder toApiProducts(final List<APIProduct> value) {
            toApiProducts.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>apiProducts</b> for <b>APIProxy</b> to multiple <b>APIProduct</b>.
         * 
         * @param value
         *     The APIProducts to build this APIProxy with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxy.APIProxyBuilder apiProducts(APIProduct... value) {
            return toApiProducts(Lists.newArrayList(value));
        }

        private APIProxy.APIProxyBuilder toApiProvider(final APIProvider value) {
            toApiProvider = value;
            return this;
        }

        /**
         * Navigation property <b>apiProvider</b> for <b>APIProxy</b> to single <b>APIProvider</b>.
         * 
         * @param value
         *     The APIProvider to build this APIProxy with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxy.APIProxyBuilder apiProvider(final APIProvider value) {
            return toApiProvider(value);
        }

        private APIProxy.APIProxyBuilder toContentPackage(final ContentPackageMapper value) {
            toContentPackage = value;
            return this;
        }

        /**
         * Navigation property <b>contentPackage</b> for <b>APIProxy</b> to single <b>ContentPackageMapper</b>.
         * 
         * @param value
         *     The ContentPackageMapper to build this APIProxy with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxy.APIProxyBuilder contentPackage(final ContentPackageMapper value) {
            return toContentPackage(value);
        }

        private APIProxy.APIProxyBuilder toFileResources(final List<FileResource> value) {
            toFileResources.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>fileResources</b> for <b>APIProxy</b> to multiple <b>FileResource</b>.
         * 
         * @param value
         *     The FileResources to build this APIProxy with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxy.APIProxyBuilder fileResources(FileResource... value) {
            return toFileResources(Lists.newArrayList(value));
        }

        private APIProxy.APIProxyBuilder toPolicies(final List<Policy> value) {
            toPolicies.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>policies</b> for <b>APIProxy</b> to multiple <b>Policy</b>.
         * 
         * @param value
         *     The Policys to build this APIProxy with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxy.APIProxyBuilder policies(Policy... value) {
            return toPolicies(Lists.newArrayList(value));
        }

        private APIProxy.APIProxyBuilder toProxyEndPoints(final List<APIProxyEndPoint> value) {
            toProxyEndPoints.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>proxyEndPoints</b> for <b>APIProxy</b> to multiple <b>APIProxyEndPoint</b>.
         * 
         * @param value
         *     The APIProxyEndPoints to build this APIProxy with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxy.APIProxyBuilder proxyEndPoints(APIProxyEndPoint... value) {
            return toProxyEndPoints(Lists.newArrayList(value));
        }

        private APIProxy.APIProxyBuilder toResources(final List<Resource> value) {
            toResources.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>resources</b> for <b>APIProxy</b> to multiple <b>Resource</b>.
         * 
         * @param value
         *     The Resources to build this APIProxy with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxy.APIProxyBuilder resources(Resource... value) {
            return toResources(Lists.newArrayList(value));
        }

        private APIProxy.APIProxyBuilder toTargetAPIProxies(final List<APITargetEndPoint> value) {
            toTargetAPIProxies.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>targetAPIProxies</b> for <b>APIProxy</b> to multiple <b>APITargetEndPoint</b>.
         * 
         * @param value
         *     The APITargetEndPoints to build this APIProxy with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxy.APIProxyBuilder targetAPIProxies(APITargetEndPoint... value) {
            return toTargetAPIProxies(Lists.newArrayList(value));
        }

        private APIProxy.APIProxyBuilder toTargetEndPoints(final List<APITargetEndPoint> value) {
            toTargetEndPoints.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>targetEndPoints</b> for <b>APIProxy</b> to multiple <b>APITargetEndPoint</b>.
         * 
         * @param value
         *     The APITargetEndPoints to build this APIProxy with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxy.APIProxyBuilder targetEndPoints(APITargetEndPoint... value) {
            return toTargetEndPoints(Lists.newArrayList(value));
        }

    }

}
