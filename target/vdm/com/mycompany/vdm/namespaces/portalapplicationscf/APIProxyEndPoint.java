
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.69.0
 */

package com.mycompany.vdm.namespaces.portalapplicationscf;

import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.mycompany.vdm.namespaces.portalapplicationscf.field.APIProxyEndPointField;
import com.mycompany.vdm.namespaces.portalapplicationscf.link.APIProxyEndPointLink;
import com.mycompany.vdm.namespaces.portalapplicationscf.link.APIProxyEndPointOneToOneLink;
import com.mycompany.vdm.namespaces.portalapplicationscf.selectable.APIProxyEndPointSelectable;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpClientAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;
import com.sap.cloud.sdk.datamodel.odata.helper.ODataTypeValueSerializer;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.odatav2.connectivity.ODataException;
import com.sap.cloud.sdk.odatav2.connectivity.ODataExceptionType;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQuery;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryBuilder;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryResult;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.apache.http.client.HttpClient;
import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;


/**
 * <p>Original entity name from the Odata EDM: <b>APIProxyEndPoint</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class APIProxyEndPoint
    extends VdmEntity<APIProxyEndPoint>
{

    /**
     * Selector for all available fields of APIProxyEndPoint.
     * 
     */
    public final static APIProxyEndPointSelectable ALL_FIELDS = () -> "*";
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>FK_API_NAME</b></p>
     * 
     * @return
     *     The fK_API_NAME contained in this entity.
     */
    @SerializedName("FK_API_NAME")
    @JsonProperty("FK_API_NAME")
    @Nullable
    @ODataField(odataName = "FK_API_NAME")
    private String fK_API_NAME;
    /**
     * Use with available fluent helpers to apply the <b>FK_API_NAME</b> field to query operations.
     * 
     */
    public final static APIProxyEndPointField<String> FKAPINAME = new APIProxyEndPointField<String>("FK_API_NAME");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>base_path</b></p>
     * 
     * @return
     *     The base_path contained in this entity.
     */
    @SerializedName("base_path")
    @JsonProperty("base_path")
    @Nullable
    @ODataField(odataName = "base_path")
    private String base_path;
    /**
     * Use with available fluent helpers to apply the <b>base_path</b> field to query operations.
     * 
     */
    public final static APIProxyEndPointField<String> BASE_PATH = new APIProxyEndPointField<String>("base_path");
    /**
     * Constraints: Nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>FK_DEFAULTFAULTRULE_ID</b></p>
     * 
     * @return
     *     The fK_DEFAULTFAULTRULE_ID contained in this entity.
     */
    @SerializedName("FK_DEFAULTFAULTRULE_ID")
    @JsonProperty("FK_DEFAULTFAULTRULE_ID")
    @Nullable
    @ODataField(odataName = "FK_DEFAULTFAULTRULE_ID")
    private String fK_DEFAULTFAULTRULE_ID;
    /**
     * Use with available fluent helpers to apply the <b>FK_DEFAULTFAULTRULE_ID</b> field to query operations.
     * 
     */
    public final static APIProxyEndPointField<String> FKDEFAULTFAULTRULEID = new APIProxyEndPointField<String>("FK_DEFAULTFAULTRULE_ID");
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @return
     *     The id contained in this entity.
     */
    @Key
    @SerializedName("id")
    @JsonProperty("id")
    @Nullable
    @ODataField(odataName = "id")
    private String id;
    /**
     * Use with available fluent helpers to apply the <b>id</b> field to query operations.
     * 
     */
    public final static APIProxyEndPointField<String> ID = new APIProxyEndPointField<String>("id");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>isDefault</b></p>
     * 
     * @return
     *     The isDefault contained in this entity.
     */
    @SerializedName("isDefault")
    @JsonProperty("isDefault")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "isDefault")
    private Boolean isDefault;
    /**
     * Use with available fluent helpers to apply the <b>isDefault</b> field to query operations.
     * 
     */
    public final static APIProxyEndPointField<Boolean> IS_DEFAULT = new APIProxyEndPointField<Boolean>("isDefault");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @return
     *     The life_cycle contained in this entity.
     */
    @SerializedName("life_cycle")
    @JsonProperty("life_cycle")
    @Nullable
    @ODataField(odataName = "life_cycle")
    private History life_cycle;
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @return
     *     The name contained in this entity.
     */
    @SerializedName("name")
    @JsonProperty("name")
    @Nullable
    @ODataField(odataName = "name")
    private String name;
    /**
     * Use with available fluent helpers to apply the <b>name</b> field to query operations.
     * 
     */
    public final static APIProxyEndPointField<String> NAME = new APIProxyEndPointField<String>("name");
    /**
     * Constraints: Nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>FK_POSTCLIENTFLOW_ID</b></p>
     * 
     * @return
     *     The fK_POSTCLIENTFLOW_ID contained in this entity.
     */
    @SerializedName("FK_POSTCLIENTFLOW_ID")
    @JsonProperty("FK_POSTCLIENTFLOW_ID")
    @Nullable
    @ODataField(odataName = "FK_POSTCLIENTFLOW_ID")
    private String fK_POSTCLIENTFLOW_ID;
    /**
     * Use with available fluent helpers to apply the <b>FK_POSTCLIENTFLOW_ID</b> field to query operations.
     * 
     */
    public final static APIProxyEndPointField<String> FKPOSTCLIENTFLOWID = new APIProxyEndPointField<String>("FK_POSTCLIENTFLOW_ID");
    /**
     * Constraints: Nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>FK_POSTFLOW_ID</b></p>
     * 
     * @return
     *     The fK_POSTFLOW_ID contained in this entity.
     */
    @SerializedName("FK_POSTFLOW_ID")
    @JsonProperty("FK_POSTFLOW_ID")
    @Nullable
    @ODataField(odataName = "FK_POSTFLOW_ID")
    private String fK_POSTFLOW_ID;
    /**
     * Use with available fluent helpers to apply the <b>FK_POSTFLOW_ID</b> field to query operations.
     * 
     */
    public final static APIProxyEndPointField<String> FKPOSTFLOWID = new APIProxyEndPointField<String>("FK_POSTFLOW_ID");
    /**
     * Constraints: Nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>FK_PREFLOW_ID</b></p>
     * 
     * @return
     *     The fK_PREFLOW_ID contained in this entity.
     */
    @SerializedName("FK_PREFLOW_ID")
    @JsonProperty("FK_PREFLOW_ID")
    @Nullable
    @ODataField(odataName = "FK_PREFLOW_ID")
    private String fK_PREFLOW_ID;
    /**
     * Use with available fluent helpers to apply the <b>FK_PREFLOW_ID</b> field to query operations.
     * 
     */
    public final static APIProxyEndPointField<String> FKPREFLOWID = new APIProxyEndPointField<String>("FK_PREFLOW_ID");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>publishUrl</b></p>
     * 
     * @return
     *     The publishUrl contained in this entity.
     */
    @SerializedName("publishUrl")
    @JsonProperty("publishUrl")
    @Nullable
    @ODataField(odataName = "publishUrl")
    private String publishUrl;
    /**
     * Use with available fluent helpers to apply the <b>publishUrl</b> field to query operations.
     * 
     */
    public final static APIProxyEndPointField<String> PUBLISH_URL = new APIProxyEndPointField<String>("publishUrl");
    /**
     * Navigation property <b>apiProxy</b> for <b>APIProxyEndPoint</b> to single <b>APIProxy</b>.
     * 
     */
    @SerializedName("apiProxy")
    @JsonProperty("apiProxy")
    @ODataField(odataName = "apiProxy")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private APIProxy toApiProxy;
    /**
     * Navigation property <b>apiResources</b> for <b>APIProxyEndPoint</b> to multiple <b>APIResource</b>.
     * 
     */
    @SerializedName("apiResources")
    @JsonProperty("apiResources")
    @ODataField(odataName = "apiResources")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<APIResource> toApiResources;
    /**
     * Navigation property <b>conditionalFlows</b> for <b>APIProxyEndPoint</b> to multiple <b>ConditionalFlowRule</b>.
     * 
     */
    @SerializedName("conditionalFlows")
    @JsonProperty("conditionalFlows")
    @ODataField(odataName = "conditionalFlows")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<ConditionalFlowRule> toConditionalFlows;
    /**
     * Navigation property <b>defaultFaultRule</b> for <b>APIProxyEndPoint</b> to single <b>DefaultFaultRule</b>.
     * 
     */
    @SerializedName("defaultFaultRule")
    @JsonProperty("defaultFaultRule")
    @ODataField(odataName = "defaultFaultRule")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private DefaultFaultRule toDefaultFaultRule;
    /**
     * Navigation property <b>faultRules</b> for <b>APIProxyEndPoint</b> to multiple <b>FaultRule</b>.
     * 
     */
    @SerializedName("faultRules")
    @JsonProperty("faultRules")
    @ODataField(odataName = "faultRules")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<FaultRule> toFaultRules;
    /**
     * Navigation property <b>postClientFlow</b> for <b>APIProxyEndPoint</b> to single <b>FlowRule</b>.
     * 
     */
    @SerializedName("postClientFlow")
    @JsonProperty("postClientFlow")
    @ODataField(odataName = "postClientFlow")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private FlowRule toPostClientFlow;
    /**
     * Navigation property <b>postFlow</b> for <b>APIProxyEndPoint</b> to single <b>FlowRule</b>.
     * 
     */
    @SerializedName("postFlow")
    @JsonProperty("postFlow")
    @ODataField(odataName = "postFlow")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private FlowRule toPostFlow;
    /**
     * Navigation property <b>preFlow</b> for <b>APIProxyEndPoint</b> to single <b>FlowRule</b>.
     * 
     */
    @SerializedName("preFlow")
    @JsonProperty("preFlow")
    @ODataField(odataName = "preFlow")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private FlowRule toPreFlow;
    /**
     * Navigation property <b>properties</b> for <b>APIProxyEndPoint</b> to multiple <b>EndPointProperty</b>.
     * 
     */
    @SerializedName("properties")
    @JsonProperty("properties")
    @ODataField(odataName = "properties")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<EndPointProperty> toProperties;
    /**
     * Navigation property <b>routeRules</b> for <b>APIProxyEndPoint</b> to multiple <b>RouteRule</b>.
     * 
     */
    @SerializedName("routeRules")
    @JsonProperty("routeRules")
    @ODataField(odataName = "routeRules")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<RouteRule> toRouteRules;
    /**
     * Navigation property <b>virtualhosts</b> for <b>APIProxyEndPoint</b> to multiple <b>VirtualHost</b>.
     * 
     */
    @SerializedName("virtualhosts")
    @JsonProperty("virtualhosts")
    @ODataField(odataName = "virtualhosts")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<VirtualHost> toVirtualhosts;
    /**
     * Use with available fluent helpers to apply the <b>apiProxy</b> navigation property to query operations.
     * 
     */
    public final static APIProxyEndPointOneToOneLink<APIProxy> TO_API_PROXY = new APIProxyEndPointOneToOneLink<APIProxy>("apiProxy");
    /**
     * Use with available fluent helpers to apply the <b>apiResources</b> navigation property to query operations.
     * 
     */
    public final static APIProxyEndPointLink<APIResource> TO_API_RESOURCES = new APIProxyEndPointLink<APIResource>("apiResources");
    /**
     * Use with available fluent helpers to apply the <b>conditionalFlows</b> navigation property to query operations.
     * 
     */
    public final static APIProxyEndPointLink<ConditionalFlowRule> TO_CONDITIONAL_FLOWS = new APIProxyEndPointLink<ConditionalFlowRule>("conditionalFlows");
    /**
     * Use with available fluent helpers to apply the <b>defaultFaultRule</b> navigation property to query operations.
     * 
     */
    public final static APIProxyEndPointOneToOneLink<DefaultFaultRule> TO_DEFAULT_FAULT_RULE = new APIProxyEndPointOneToOneLink<DefaultFaultRule>("defaultFaultRule");
    /**
     * Use with available fluent helpers to apply the <b>faultRules</b> navigation property to query operations.
     * 
     */
    public final static APIProxyEndPointLink<FaultRule> TO_FAULT_RULES = new APIProxyEndPointLink<FaultRule>("faultRules");
    /**
     * Use with available fluent helpers to apply the <b>postClientFlow</b> navigation property to query operations.
     * 
     */
    public final static APIProxyEndPointOneToOneLink<FlowRule> TO_POST_CLIENT_FLOW = new APIProxyEndPointOneToOneLink<FlowRule>("postClientFlow");
    /**
     * Use with available fluent helpers to apply the <b>postFlow</b> navigation property to query operations.
     * 
     */
    public final static APIProxyEndPointOneToOneLink<FlowRule> TO_POST_FLOW = new APIProxyEndPointOneToOneLink<FlowRule>("postFlow");
    /**
     * Use with available fluent helpers to apply the <b>preFlow</b> navigation property to query operations.
     * 
     */
    public final static APIProxyEndPointOneToOneLink<FlowRule> TO_PRE_FLOW = new APIProxyEndPointOneToOneLink<FlowRule>("preFlow");
    /**
     * Use with available fluent helpers to apply the <b>properties</b> navigation property to query operations.
     * 
     */
    public final static APIProxyEndPointLink<EndPointProperty> TO_PROPERTIES = new APIProxyEndPointLink<EndPointProperty>("properties");
    /**
     * Use with available fluent helpers to apply the <b>routeRules</b> navigation property to query operations.
     * 
     */
    public final static APIProxyEndPointLink<RouteRule> TO_ROUTE_RULES = new APIProxyEndPointLink<RouteRule>("routeRules");
    /**
     * Use with available fluent helpers to apply the <b>virtualhosts</b> navigation property to query operations.
     * 
     */
    public final static APIProxyEndPointLink<VirtualHost> TO_VIRTUALHOSTS = new APIProxyEndPointLink<VirtualHost>("virtualhosts");

    @Nonnull
    @Override
    public Class<APIProxyEndPoint> getType() {
        return APIProxyEndPoint.class;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>FK_API_NAME</b></p>
     * 
     * @param fK_API_NAME
     *     The fK_API_NAME to set.
     */
    public void setFK_API_NAME(
        @Nullable
        final String fK_API_NAME) {
        rememberChangedField("FK_API_NAME", this.fK_API_NAME);
        this.fK_API_NAME = fK_API_NAME;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>base_path</b></p>
     * 
     * @param base_path
     *     The base_path to set.
     */
    public void setBase_path(
        @Nullable
        final String base_path) {
        rememberChangedField("base_path", this.base_path);
        this.base_path = base_path;
    }

    /**
     * Constraints: Nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>FK_DEFAULTFAULTRULE_ID</b></p>
     * 
     * @param fK_DEFAULTFAULTRULE_ID
     *     The fK_DEFAULTFAULTRULE_ID to set.
     */
    public void setFK_DEFAULTFAULTRULE_ID(
        @Nullable
        final String fK_DEFAULTFAULTRULE_ID) {
        rememberChangedField("FK_DEFAULTFAULTRULE_ID", this.fK_DEFAULTFAULTRULE_ID);
        this.fK_DEFAULTFAULTRULE_ID = fK_DEFAULTFAULTRULE_ID;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @param id
     *     The id to set.
     */
    public void setId(
        @Nullable
        final String id) {
        rememberChangedField("id", this.id);
        this.id = id;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>isDefault</b></p>
     * 
     * @param isDefault
     *     The isDefault to set.
     */
    public void setIsDefault(
        @Nullable
        final Boolean isDefault) {
        rememberChangedField("isDefault", this.isDefault);
        this.isDefault = isDefault;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @param life_cycle
     *     The life_cycle to set.
     */
    public void setLife_cycle(
        @Nullable
        final History life_cycle) {
        rememberChangedField("life_cycle", this.life_cycle);
        this.life_cycle = life_cycle;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @param name
     *     The name to set.
     */
    public void setName(
        @Nullable
        final String name) {
        rememberChangedField("name", this.name);
        this.name = name;
    }

    /**
     * Constraints: Nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>FK_POSTCLIENTFLOW_ID</b></p>
     * 
     * @param fK_POSTCLIENTFLOW_ID
     *     The fK_POSTCLIENTFLOW_ID to set.
     */
    public void setFK_POSTCLIENTFLOW_ID(
        @Nullable
        final String fK_POSTCLIENTFLOW_ID) {
        rememberChangedField("FK_POSTCLIENTFLOW_ID", this.fK_POSTCLIENTFLOW_ID);
        this.fK_POSTCLIENTFLOW_ID = fK_POSTCLIENTFLOW_ID;
    }

    /**
     * Constraints: Nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>FK_POSTFLOW_ID</b></p>
     * 
     * @param fK_POSTFLOW_ID
     *     The fK_POSTFLOW_ID to set.
     */
    public void setFK_POSTFLOW_ID(
        @Nullable
        final String fK_POSTFLOW_ID) {
        rememberChangedField("FK_POSTFLOW_ID", this.fK_POSTFLOW_ID);
        this.fK_POSTFLOW_ID = fK_POSTFLOW_ID;
    }

    /**
     * Constraints: Nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>FK_PREFLOW_ID</b></p>
     * 
     * @param fK_PREFLOW_ID
     *     The fK_PREFLOW_ID to set.
     */
    public void setFK_PREFLOW_ID(
        @Nullable
        final String fK_PREFLOW_ID) {
        rememberChangedField("FK_PREFLOW_ID", this.fK_PREFLOW_ID);
        this.fK_PREFLOW_ID = fK_PREFLOW_ID;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>publishUrl</b></p>
     * 
     * @param publishUrl
     *     The publishUrl to set.
     */
    public void setPublishUrl(
        @Nullable
        final String publishUrl) {
        rememberChangedField("publishUrl", this.publishUrl);
        this.publishUrl = publishUrl;
    }

    @Override
    protected String getEntityCollection() {
        return "APIProxyEndPoints";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("id", getId());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("FK_API_NAME", getFK_API_NAME());
        values.put("base_path", getBase_path());
        values.put("FK_DEFAULTFAULTRULE_ID", getFK_DEFAULTFAULTRULE_ID());
        values.put("id", getId());
        values.put("isDefault", getIsDefault());
        values.put("life_cycle", getLife_cycle());
        values.put("name", getName());
        values.put("FK_POSTCLIENTFLOW_ID", getFK_POSTCLIENTFLOW_ID());
        values.put("FK_POSTFLOW_ID", getFK_POSTFLOW_ID());
        values.put("FK_PREFLOW_ID", getFK_PREFLOW_ID());
        values.put("publishUrl", getPublishUrl());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("FK_API_NAME")) {
                final Object value = values.remove("FK_API_NAME");
                if ((value == null)||(!value.equals(getFK_API_NAME()))) {
                    setFK_API_NAME(((String) value));
                }
            }
            if (values.containsKey("base_path")) {
                final Object value = values.remove("base_path");
                if ((value == null)||(!value.equals(getBase_path()))) {
                    setBase_path(((String) value));
                }
            }
            if (values.containsKey("FK_DEFAULTFAULTRULE_ID")) {
                final Object value = values.remove("FK_DEFAULTFAULTRULE_ID");
                if ((value == null)||(!value.equals(getFK_DEFAULTFAULTRULE_ID()))) {
                    setFK_DEFAULTFAULTRULE_ID(((String) value));
                }
            }
            if (values.containsKey("id")) {
                final Object value = values.remove("id");
                if ((value == null)||(!value.equals(getId()))) {
                    setId(((String) value));
                }
            }
            if (values.containsKey("isDefault")) {
                final Object value = values.remove("isDefault");
                if ((value == null)||(!value.equals(getIsDefault()))) {
                    setIsDefault(((Boolean) value));
                }
            }
            if (values.containsKey("name")) {
                final Object value = values.remove("name");
                if ((value == null)||(!value.equals(getName()))) {
                    setName(((String) value));
                }
            }
            if (values.containsKey("FK_POSTCLIENTFLOW_ID")) {
                final Object value = values.remove("FK_POSTCLIENTFLOW_ID");
                if ((value == null)||(!value.equals(getFK_POSTCLIENTFLOW_ID()))) {
                    setFK_POSTCLIENTFLOW_ID(((String) value));
                }
            }
            if (values.containsKey("FK_POSTFLOW_ID")) {
                final Object value = values.remove("FK_POSTFLOW_ID");
                if ((value == null)||(!value.equals(getFK_POSTFLOW_ID()))) {
                    setFK_POSTFLOW_ID(((String) value));
                }
            }
            if (values.containsKey("FK_PREFLOW_ID")) {
                final Object value = values.remove("FK_PREFLOW_ID");
                if ((value == null)||(!value.equals(getFK_PREFLOW_ID()))) {
                    setFK_PREFLOW_ID(((String) value));
                }
            }
            if (values.containsKey("publishUrl")) {
                final Object value = values.remove("publishUrl");
                if ((value == null)||(!value.equals(getPublishUrl()))) {
                    setPublishUrl(((String) value));
                }
            }
        }
        // structured properties
        {
            if (values.containsKey("life_cycle")) {
                final Object value = values.remove("life_cycle");
                if (value instanceof Map) {
                    if (getLife_cycle() == null) {
                        setLife_cycle(new History());
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    getLife_cycle().fromMap(inputMap);
                }
                if ((value == null)&&(getLife_cycle()!= null)) {
                    setLife_cycle(null);
                }
            }
        }
        // navigation properties
        {
            if ((values).containsKey("apiProxy")) {
                final Object value = (values).remove("apiProxy");
                if (value instanceof Map) {
                    if (toApiProxy == null) {
                        toApiProxy = new APIProxy();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toApiProxy.fromMap(inputMap);
                }
            }
            if ((values).containsKey("apiResources")) {
                final Object value = (values).remove("apiResources");
                if (value instanceof Iterable) {
                    if (toApiResources == null) {
                        toApiResources = Lists.newArrayList();
                    } else {
                        toApiResources = Lists.newArrayList(toApiResources);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        APIResource entity;
                        if (toApiResources.size()>i) {
                            entity = toApiResources.get(i);
                        } else {
                            entity = new APIResource();
                            toApiResources.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("conditionalFlows")) {
                final Object value = (values).remove("conditionalFlows");
                if (value instanceof Iterable) {
                    if (toConditionalFlows == null) {
                        toConditionalFlows = Lists.newArrayList();
                    } else {
                        toConditionalFlows = Lists.newArrayList(toConditionalFlows);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        ConditionalFlowRule entity;
                        if (toConditionalFlows.size()>i) {
                            entity = toConditionalFlows.get(i);
                        } else {
                            entity = new ConditionalFlowRule();
                            toConditionalFlows.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("defaultFaultRule")) {
                final Object value = (values).remove("defaultFaultRule");
                if (value instanceof Map) {
                    if (toDefaultFaultRule == null) {
                        toDefaultFaultRule = new DefaultFaultRule();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toDefaultFaultRule.fromMap(inputMap);
                }
            }
            if ((values).containsKey("faultRules")) {
                final Object value = (values).remove("faultRules");
                if (value instanceof Iterable) {
                    if (toFaultRules == null) {
                        toFaultRules = Lists.newArrayList();
                    } else {
                        toFaultRules = Lists.newArrayList(toFaultRules);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        FaultRule entity;
                        if (toFaultRules.size()>i) {
                            entity = toFaultRules.get(i);
                        } else {
                            entity = new FaultRule();
                            toFaultRules.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("postClientFlow")) {
                final Object value = (values).remove("postClientFlow");
                if (value instanceof Map) {
                    if (toPostClientFlow == null) {
                        toPostClientFlow = new FlowRule();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toPostClientFlow.fromMap(inputMap);
                }
            }
            if ((values).containsKey("postFlow")) {
                final Object value = (values).remove("postFlow");
                if (value instanceof Map) {
                    if (toPostFlow == null) {
                        toPostFlow = new FlowRule();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toPostFlow.fromMap(inputMap);
                }
            }
            if ((values).containsKey("preFlow")) {
                final Object value = (values).remove("preFlow");
                if (value instanceof Map) {
                    if (toPreFlow == null) {
                        toPreFlow = new FlowRule();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toPreFlow.fromMap(inputMap);
                }
            }
            if ((values).containsKey("properties")) {
                final Object value = (values).remove("properties");
                if (value instanceof Iterable) {
                    if (toProperties == null) {
                        toProperties = Lists.newArrayList();
                    } else {
                        toProperties = Lists.newArrayList(toProperties);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        EndPointProperty entity;
                        if (toProperties.size()>i) {
                            entity = toProperties.get(i);
                        } else {
                            entity = new EndPointProperty();
                            toProperties.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("routeRules")) {
                final Object value = (values).remove("routeRules");
                if (value instanceof Iterable) {
                    if (toRouteRules == null) {
                        toRouteRules = Lists.newArrayList();
                    } else {
                        toRouteRules = Lists.newArrayList(toRouteRules);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        RouteRule entity;
                        if (toRouteRules.size()>i) {
                            entity = toRouteRules.get(i);
                        } else {
                            entity = new RouteRule();
                            toRouteRules.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("virtualhosts")) {
                final Object value = (values).remove("virtualhosts");
                if (value instanceof Iterable) {
                    if (toVirtualhosts == null) {
                        toVirtualhosts = Lists.newArrayList();
                    } else {
                        toVirtualhosts = Lists.newArrayList(toVirtualhosts);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        VirtualHost entity;
                        if (toVirtualhosts.size()>i) {
                            entity = toVirtualhosts.get(i);
                        } else {
                            entity = new VirtualHost();
                            toVirtualhosts.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >APIProxyEndPointField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new APIProxyEndPointField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >APIProxyEndPointField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new APIProxyEndPointField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public HttpDestinationProperties getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final HttpDestinationProperties destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return (com.mycompany.vdm.services.APIPortalApplicationsCFService.DEFAULT_SERVICE_PATH);
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toApiProxy!= null) {
            (values).put("apiProxy", toApiProxy);
        }
        if (toApiResources!= null) {
            (values).put("apiResources", toApiResources);
        }
        if (toConditionalFlows!= null) {
            (values).put("conditionalFlows", toConditionalFlows);
        }
        if (toDefaultFaultRule!= null) {
            (values).put("defaultFaultRule", toDefaultFaultRule);
        }
        if (toFaultRules!= null) {
            (values).put("faultRules", toFaultRules);
        }
        if (toPostClientFlow!= null) {
            (values).put("postClientFlow", toPostClientFlow);
        }
        if (toPostFlow!= null) {
            (values).put("postFlow", toPostFlow);
        }
        if (toPreFlow!= null) {
            (values).put("preFlow", toPreFlow);
        }
        if (toProperties!= null) {
            (values).put("properties", toProperties);
        }
        if (toRouteRules!= null) {
            (values).put("routeRules", toRouteRules);
        }
        if (toVirtualhosts!= null) {
            (values).put("virtualhosts", toVirtualhosts);
        }
        return values;
    }

    /**
     * Fetches the <b>APIProxy</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>apiProxy</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>APIProxy</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public APIProxy fetchApiProxy()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type APIProxy.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("apiProxy");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final APIProxy entity = result.as(APIProxy.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>APIProxy</b> entity (one to one). This corresponds to the OData navigation property <b>apiProxy</b>.
     * <p>
     * If the navigation property <b>apiProxy</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>APIProxy</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public APIProxy getApiProxyOrFetch()
        throws ODataException
    {
        if (toApiProxy == null) {
            toApiProxy = fetchApiProxy();
        }
        return toApiProxy;
    }

    /**
     * Retrieval of associated <b>APIProxy</b> entity (one to one). This corresponds to the OData navigation property <b>apiProxy</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxyEndPoint</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>apiProxy</b> is already loaded, the result will contain the <b>APIProxy</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<APIProxy> getApiProxyIfPresent() {
        return Option.of(toApiProxy);
    }

    /**
     * Overwrites the associated <b>APIProxy</b> entity for the loaded navigation property <b>apiProxy</b>.
     * 
     * @param value
     *     New <b>APIProxy</b> entity.
     */
    public void setApiProxy(final APIProxy value) {
        toApiProxy = value;
    }

    /**
     * Fetches the <b>APIResource</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>apiResources</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>APIResource</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIResource> fetchApiResources()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type APIResource.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("apiResources");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<APIResource> entityList = result.asList(APIResource.class);
        for (APIResource entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>APIResource</b> entities (one to many). This corresponds to the OData navigation property <b>apiResources</b>.
     * <p>
     * If the navigation property <b>apiResources</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>APIResource</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIResource> getApiResourcesOrFetch()
        throws ODataException
    {
        if (toApiResources == null) {
            toApiResources = fetchApiResources();
        }
        return toApiResources;
    }

    /**
     * Retrieval of associated <b>APIResource</b> entities (one to many). This corresponds to the OData navigation property <b>apiResources</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxyEndPoint</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>apiResources</b> is already loaded, the result will contain the <b>APIResource</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<APIResource>> getApiResourcesIfPresent() {
        return Option.of(toApiResources);
    }

    /**
     * Overwrites the list of associated <b>APIResource</b> entities for the loaded navigation property <b>apiResources</b>.
     * <p>
     * If the navigation property <b>apiResources</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>APIResource</b> entities.
     */
    public void setApiResources(
        @Nonnull
        final List<APIResource> value) {
        if (toApiResources == null) {
            toApiResources = Lists.newArrayList();
        }
        toApiResources.clear();
        toApiResources.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>APIResource</b> entities. This corresponds to the OData navigation property <b>apiResources</b>.
     * <p>
     * If the navigation property <b>apiResources</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>APIResource</b> entities.
     */
    public void addApiResources(APIResource... entity) {
        if (toApiResources == null) {
            toApiResources = Lists.newArrayList();
        }
        toApiResources.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>ConditionalFlowRule</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>conditionalFlows</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>ConditionalFlowRule</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<ConditionalFlowRule> fetchConditionalFlows()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type ConditionalFlowRule.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("conditionalFlows");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<ConditionalFlowRule> entityList = result.asList(ConditionalFlowRule.class);
        for (ConditionalFlowRule entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>ConditionalFlowRule</b> entities (one to many). This corresponds to the OData navigation property <b>conditionalFlows</b>.
     * <p>
     * If the navigation property <b>conditionalFlows</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>ConditionalFlowRule</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<ConditionalFlowRule> getConditionalFlowsOrFetch()
        throws ODataException
    {
        if (toConditionalFlows == null) {
            toConditionalFlows = fetchConditionalFlows();
        }
        return toConditionalFlows;
    }

    /**
     * Retrieval of associated <b>ConditionalFlowRule</b> entities (one to many). This corresponds to the OData navigation property <b>conditionalFlows</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxyEndPoint</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>conditionalFlows</b> is already loaded, the result will contain the <b>ConditionalFlowRule</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<ConditionalFlowRule>> getConditionalFlowsIfPresent() {
        return Option.of(toConditionalFlows);
    }

    /**
     * Overwrites the list of associated <b>ConditionalFlowRule</b> entities for the loaded navigation property <b>conditionalFlows</b>.
     * <p>
     * If the navigation property <b>conditionalFlows</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>ConditionalFlowRule</b> entities.
     */
    public void setConditionalFlows(
        @Nonnull
        final List<ConditionalFlowRule> value) {
        if (toConditionalFlows == null) {
            toConditionalFlows = Lists.newArrayList();
        }
        toConditionalFlows.clear();
        toConditionalFlows.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>ConditionalFlowRule</b> entities. This corresponds to the OData navigation property <b>conditionalFlows</b>.
     * <p>
     * If the navigation property <b>conditionalFlows</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>ConditionalFlowRule</b> entities.
     */
    public void addConditionalFlows(ConditionalFlowRule... entity) {
        if (toConditionalFlows == null) {
            toConditionalFlows = Lists.newArrayList();
        }
        toConditionalFlows.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>DefaultFaultRule</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>defaultFaultRule</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>DefaultFaultRule</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public DefaultFaultRule fetchDefaultFaultRule()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type DefaultFaultRule.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("defaultFaultRule");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final DefaultFaultRule entity = result.as(DefaultFaultRule.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>DefaultFaultRule</b> entity (one to one). This corresponds to the OData navigation property <b>defaultFaultRule</b>.
     * <p>
     * If the navigation property <b>defaultFaultRule</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>DefaultFaultRule</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public DefaultFaultRule getDefaultFaultRuleOrFetch()
        throws ODataException
    {
        if (toDefaultFaultRule == null) {
            toDefaultFaultRule = fetchDefaultFaultRule();
        }
        return toDefaultFaultRule;
    }

    /**
     * Retrieval of associated <b>DefaultFaultRule</b> entity (one to one). This corresponds to the OData navigation property <b>defaultFaultRule</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxyEndPoint</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>defaultFaultRule</b> is already loaded, the result will contain the <b>DefaultFaultRule</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<DefaultFaultRule> getDefaultFaultRuleIfPresent() {
        return Option.of(toDefaultFaultRule);
    }

    /**
     * Overwrites the associated <b>DefaultFaultRule</b> entity for the loaded navigation property <b>defaultFaultRule</b>.
     * 
     * @param value
     *     New <b>DefaultFaultRule</b> entity.
     */
    public void setDefaultFaultRule(final DefaultFaultRule value) {
        toDefaultFaultRule = value;
    }

    /**
     * Fetches the <b>FaultRule</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>faultRules</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>FaultRule</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<FaultRule> fetchFaultRules()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type FaultRule.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("faultRules");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<FaultRule> entityList = result.asList(FaultRule.class);
        for (FaultRule entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>FaultRule</b> entities (one to many). This corresponds to the OData navigation property <b>faultRules</b>.
     * <p>
     * If the navigation property <b>faultRules</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>FaultRule</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<FaultRule> getFaultRulesOrFetch()
        throws ODataException
    {
        if (toFaultRules == null) {
            toFaultRules = fetchFaultRules();
        }
        return toFaultRules;
    }

    /**
     * Retrieval of associated <b>FaultRule</b> entities (one to many). This corresponds to the OData navigation property <b>faultRules</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxyEndPoint</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>faultRules</b> is already loaded, the result will contain the <b>FaultRule</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<FaultRule>> getFaultRulesIfPresent() {
        return Option.of(toFaultRules);
    }

    /**
     * Overwrites the list of associated <b>FaultRule</b> entities for the loaded navigation property <b>faultRules</b>.
     * <p>
     * If the navigation property <b>faultRules</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>FaultRule</b> entities.
     */
    public void setFaultRules(
        @Nonnull
        final List<FaultRule> value) {
        if (toFaultRules == null) {
            toFaultRules = Lists.newArrayList();
        }
        toFaultRules.clear();
        toFaultRules.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>FaultRule</b> entities. This corresponds to the OData navigation property <b>faultRules</b>.
     * <p>
     * If the navigation property <b>faultRules</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>FaultRule</b> entities.
     */
    public void addFaultRules(FaultRule... entity) {
        if (toFaultRules == null) {
            toFaultRules = Lists.newArrayList();
        }
        toFaultRules.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>FlowRule</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>postClientFlow</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>FlowRule</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public FlowRule fetchPostClientFlow()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type FlowRule.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("postClientFlow");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final FlowRule entity = result.as(FlowRule.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>FlowRule</b> entity (one to one). This corresponds to the OData navigation property <b>postClientFlow</b>.
     * <p>
     * If the navigation property <b>postClientFlow</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>FlowRule</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public FlowRule getPostClientFlowOrFetch()
        throws ODataException
    {
        if (toPostClientFlow == null) {
            toPostClientFlow = fetchPostClientFlow();
        }
        return toPostClientFlow;
    }

    /**
     * Retrieval of associated <b>FlowRule</b> entity (one to one). This corresponds to the OData navigation property <b>postClientFlow</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxyEndPoint</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>postClientFlow</b> is already loaded, the result will contain the <b>FlowRule</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<FlowRule> getPostClientFlowIfPresent() {
        return Option.of(toPostClientFlow);
    }

    /**
     * Overwrites the associated <b>FlowRule</b> entity for the loaded navigation property <b>postClientFlow</b>.
     * 
     * @param value
     *     New <b>FlowRule</b> entity.
     */
    public void setPostClientFlow(final FlowRule value) {
        toPostClientFlow = value;
    }

    /**
     * Fetches the <b>FlowRule</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>postFlow</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>FlowRule</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public FlowRule fetchPostFlow()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type FlowRule.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("postFlow");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final FlowRule entity = result.as(FlowRule.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>FlowRule</b> entity (one to one). This corresponds to the OData navigation property <b>postFlow</b>.
     * <p>
     * If the navigation property <b>postFlow</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>FlowRule</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public FlowRule getPostFlowOrFetch()
        throws ODataException
    {
        if (toPostFlow == null) {
            toPostFlow = fetchPostFlow();
        }
        return toPostFlow;
    }

    /**
     * Retrieval of associated <b>FlowRule</b> entity (one to one). This corresponds to the OData navigation property <b>postFlow</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxyEndPoint</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>postFlow</b> is already loaded, the result will contain the <b>FlowRule</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<FlowRule> getPostFlowIfPresent() {
        return Option.of(toPostFlow);
    }

    /**
     * Overwrites the associated <b>FlowRule</b> entity for the loaded navigation property <b>postFlow</b>.
     * 
     * @param value
     *     New <b>FlowRule</b> entity.
     */
    public void setPostFlow(final FlowRule value) {
        toPostFlow = value;
    }

    /**
     * Fetches the <b>FlowRule</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>preFlow</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>FlowRule</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public FlowRule fetchPreFlow()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type FlowRule.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("preFlow");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final FlowRule entity = result.as(FlowRule.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>FlowRule</b> entity (one to one). This corresponds to the OData navigation property <b>preFlow</b>.
     * <p>
     * If the navigation property <b>preFlow</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>FlowRule</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public FlowRule getPreFlowOrFetch()
        throws ODataException
    {
        if (toPreFlow == null) {
            toPreFlow = fetchPreFlow();
        }
        return toPreFlow;
    }

    /**
     * Retrieval of associated <b>FlowRule</b> entity (one to one). This corresponds to the OData navigation property <b>preFlow</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxyEndPoint</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>preFlow</b> is already loaded, the result will contain the <b>FlowRule</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<FlowRule> getPreFlowIfPresent() {
        return Option.of(toPreFlow);
    }

    /**
     * Overwrites the associated <b>FlowRule</b> entity for the loaded navigation property <b>preFlow</b>.
     * 
     * @param value
     *     New <b>FlowRule</b> entity.
     */
    public void setPreFlow(final FlowRule value) {
        toPreFlow = value;
    }

    /**
     * Fetches the <b>EndPointProperty</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>properties</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>EndPointProperty</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<EndPointProperty> fetchProperties()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type EndPointProperty.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("properties");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<EndPointProperty> entityList = result.asList(EndPointProperty.class);
        for (EndPointProperty entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>EndPointProperty</b> entities (one to many). This corresponds to the OData navigation property <b>properties</b>.
     * <p>
     * If the navigation property <b>properties</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>EndPointProperty</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<EndPointProperty> getPropertiesOrFetch()
        throws ODataException
    {
        if (toProperties == null) {
            toProperties = fetchProperties();
        }
        return toProperties;
    }

    /**
     * Retrieval of associated <b>EndPointProperty</b> entities (one to many). This corresponds to the OData navigation property <b>properties</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxyEndPoint</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>properties</b> is already loaded, the result will contain the <b>EndPointProperty</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<EndPointProperty>> getPropertiesIfPresent() {
        return Option.of(toProperties);
    }

    /**
     * Overwrites the list of associated <b>EndPointProperty</b> entities for the loaded navigation property <b>properties</b>.
     * <p>
     * If the navigation property <b>properties</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>EndPointProperty</b> entities.
     */
    public void setProperties(
        @Nonnull
        final List<EndPointProperty> value) {
        if (toProperties == null) {
            toProperties = Lists.newArrayList();
        }
        toProperties.clear();
        toProperties.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>EndPointProperty</b> entities. This corresponds to the OData navigation property <b>properties</b>.
     * <p>
     * If the navigation property <b>properties</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>EndPointProperty</b> entities.
     */
    public void addProperties(EndPointProperty... entity) {
        if (toProperties == null) {
            toProperties = Lists.newArrayList();
        }
        toProperties.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>RouteRule</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>routeRules</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>RouteRule</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<RouteRule> fetchRouteRules()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type RouteRule.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("routeRules");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<RouteRule> entityList = result.asList(RouteRule.class);
        for (RouteRule entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>RouteRule</b> entities (one to many). This corresponds to the OData navigation property <b>routeRules</b>.
     * <p>
     * If the navigation property <b>routeRules</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>RouteRule</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<RouteRule> getRouteRulesOrFetch()
        throws ODataException
    {
        if (toRouteRules == null) {
            toRouteRules = fetchRouteRules();
        }
        return toRouteRules;
    }

    /**
     * Retrieval of associated <b>RouteRule</b> entities (one to many). This corresponds to the OData navigation property <b>routeRules</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxyEndPoint</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>routeRules</b> is already loaded, the result will contain the <b>RouteRule</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<RouteRule>> getRouteRulesIfPresent() {
        return Option.of(toRouteRules);
    }

    /**
     * Overwrites the list of associated <b>RouteRule</b> entities for the loaded navigation property <b>routeRules</b>.
     * <p>
     * If the navigation property <b>routeRules</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>RouteRule</b> entities.
     */
    public void setRouteRules(
        @Nonnull
        final List<RouteRule> value) {
        if (toRouteRules == null) {
            toRouteRules = Lists.newArrayList();
        }
        toRouteRules.clear();
        toRouteRules.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>RouteRule</b> entities. This corresponds to the OData navigation property <b>routeRules</b>.
     * <p>
     * If the navigation property <b>routeRules</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>RouteRule</b> entities.
     */
    public void addRouteRules(RouteRule... entity) {
        if (toRouteRules == null) {
            toRouteRules = Lists.newArrayList();
        }
        toRouteRules.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>VirtualHost</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>virtualhosts</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>VirtualHost</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<VirtualHost> fetchVirtualhosts()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type VirtualHost.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("virtualhosts");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<VirtualHost> entityList = result.asList(VirtualHost.class);
        for (VirtualHost entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>VirtualHost</b> entities (one to many). This corresponds to the OData navigation property <b>virtualhosts</b>.
     * <p>
     * If the navigation property <b>virtualhosts</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>VirtualHost</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<VirtualHost> getVirtualhostsOrFetch()
        throws ODataException
    {
        if (toVirtualhosts == null) {
            toVirtualhosts = fetchVirtualhosts();
        }
        return toVirtualhosts;
    }

    /**
     * Retrieval of associated <b>VirtualHost</b> entities (one to many). This corresponds to the OData navigation property <b>virtualhosts</b>.
     * <p>
     * If the navigation property for an entity <b>APIProxyEndPoint</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>virtualhosts</b> is already loaded, the result will contain the <b>VirtualHost</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<VirtualHost>> getVirtualhostsIfPresent() {
        return Option.of(toVirtualhosts);
    }

    /**
     * Overwrites the list of associated <b>VirtualHost</b> entities for the loaded navigation property <b>virtualhosts</b>.
     * <p>
     * If the navigation property <b>virtualhosts</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>VirtualHost</b> entities.
     */
    public void setVirtualhosts(
        @Nonnull
        final List<VirtualHost> value) {
        if (toVirtualhosts == null) {
            toVirtualhosts = Lists.newArrayList();
        }
        toVirtualhosts.clear();
        toVirtualhosts.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>VirtualHost</b> entities. This corresponds to the OData navigation property <b>virtualhosts</b>.
     * <p>
     * If the navigation property <b>virtualhosts</b> of a queried <b>APIProxyEndPoint</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>VirtualHost</b> entities.
     */
    public void addVirtualhosts(VirtualHost... entity) {
        if (toVirtualhosts == null) {
            toVirtualhosts = Lists.newArrayList();
        }
        toVirtualhosts.addAll(Lists.newArrayList(entity));
    }


    /**
     * Helper class to allow for fluent creation of APIProxyEndPoint instances.
     * 
     */
    public final static class APIProxyEndPointBuilder {

        private APIProxy toApiProxy;
        private List<APIResource> toApiResources = Lists.newArrayList();
        private List<ConditionalFlowRule> toConditionalFlows = Lists.newArrayList();
        private DefaultFaultRule toDefaultFaultRule;
        private List<FaultRule> toFaultRules = Lists.newArrayList();
        private FlowRule toPostClientFlow;
        private FlowRule toPostFlow;
        private FlowRule toPreFlow;
        private List<EndPointProperty> toProperties = Lists.newArrayList();
        private List<RouteRule> toRouteRules = Lists.newArrayList();
        private List<VirtualHost> toVirtualhosts = Lists.newArrayList();

        private APIProxyEndPoint.APIProxyEndPointBuilder toApiProxy(final APIProxy value) {
            toApiProxy = value;
            return this;
        }

        /**
         * Navigation property <b>apiProxy</b> for <b>APIProxyEndPoint</b> to single <b>APIProxy</b>.
         * 
         * @param value
         *     The APIProxy to build this APIProxyEndPoint with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxyEndPoint.APIProxyEndPointBuilder apiProxy(final APIProxy value) {
            return toApiProxy(value);
        }

        private APIProxyEndPoint.APIProxyEndPointBuilder toApiResources(final List<APIResource> value) {
            toApiResources.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>apiResources</b> for <b>APIProxyEndPoint</b> to multiple <b>APIResource</b>.
         * 
         * @param value
         *     The APIResources to build this APIProxyEndPoint with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxyEndPoint.APIProxyEndPointBuilder apiResources(APIResource... value) {
            return toApiResources(Lists.newArrayList(value));
        }

        private APIProxyEndPoint.APIProxyEndPointBuilder toConditionalFlows(final List<ConditionalFlowRule> value) {
            toConditionalFlows.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>conditionalFlows</b> for <b>APIProxyEndPoint</b> to multiple <b>ConditionalFlowRule</b>.
         * 
         * @param value
         *     The ConditionalFlowRules to build this APIProxyEndPoint with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxyEndPoint.APIProxyEndPointBuilder conditionalFlows(ConditionalFlowRule... value) {
            return toConditionalFlows(Lists.newArrayList(value));
        }

        private APIProxyEndPoint.APIProxyEndPointBuilder toDefaultFaultRule(final DefaultFaultRule value) {
            toDefaultFaultRule = value;
            return this;
        }

        /**
         * Navigation property <b>defaultFaultRule</b> for <b>APIProxyEndPoint</b> to single <b>DefaultFaultRule</b>.
         * 
         * @param value
         *     The DefaultFaultRule to build this APIProxyEndPoint with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxyEndPoint.APIProxyEndPointBuilder defaultFaultRule(final DefaultFaultRule value) {
            return toDefaultFaultRule(value);
        }

        private APIProxyEndPoint.APIProxyEndPointBuilder toFaultRules(final List<FaultRule> value) {
            toFaultRules.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>faultRules</b> for <b>APIProxyEndPoint</b> to multiple <b>FaultRule</b>.
         * 
         * @param value
         *     The FaultRules to build this APIProxyEndPoint with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxyEndPoint.APIProxyEndPointBuilder faultRules(FaultRule... value) {
            return toFaultRules(Lists.newArrayList(value));
        }

        private APIProxyEndPoint.APIProxyEndPointBuilder toPostClientFlow(final FlowRule value) {
            toPostClientFlow = value;
            return this;
        }

        /**
         * Navigation property <b>postClientFlow</b> for <b>APIProxyEndPoint</b> to single <b>FlowRule</b>.
         * 
         * @param value
         *     The FlowRule to build this APIProxyEndPoint with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxyEndPoint.APIProxyEndPointBuilder postClientFlow(final FlowRule value) {
            return toPostClientFlow(value);
        }

        private APIProxyEndPoint.APIProxyEndPointBuilder toPostFlow(final FlowRule value) {
            toPostFlow = value;
            return this;
        }

        /**
         * Navigation property <b>postFlow</b> for <b>APIProxyEndPoint</b> to single <b>FlowRule</b>.
         * 
         * @param value
         *     The FlowRule to build this APIProxyEndPoint with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxyEndPoint.APIProxyEndPointBuilder postFlow(final FlowRule value) {
            return toPostFlow(value);
        }

        private APIProxyEndPoint.APIProxyEndPointBuilder toPreFlow(final FlowRule value) {
            toPreFlow = value;
            return this;
        }

        /**
         * Navigation property <b>preFlow</b> for <b>APIProxyEndPoint</b> to single <b>FlowRule</b>.
         * 
         * @param value
         *     The FlowRule to build this APIProxyEndPoint with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxyEndPoint.APIProxyEndPointBuilder preFlow(final FlowRule value) {
            return toPreFlow(value);
        }

        private APIProxyEndPoint.APIProxyEndPointBuilder toProperties(final List<EndPointProperty> value) {
            toProperties.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>properties</b> for <b>APIProxyEndPoint</b> to multiple <b>EndPointProperty</b>.
         * 
         * @param value
         *     The EndPointPropertys to build this APIProxyEndPoint with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxyEndPoint.APIProxyEndPointBuilder properties(EndPointProperty... value) {
            return toProperties(Lists.newArrayList(value));
        }

        private APIProxyEndPoint.APIProxyEndPointBuilder toRouteRules(final List<RouteRule> value) {
            toRouteRules.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>routeRules</b> for <b>APIProxyEndPoint</b> to multiple <b>RouteRule</b>.
         * 
         * @param value
         *     The RouteRules to build this APIProxyEndPoint with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxyEndPoint.APIProxyEndPointBuilder routeRules(RouteRule... value) {
            return toRouteRules(Lists.newArrayList(value));
        }

        private APIProxyEndPoint.APIProxyEndPointBuilder toVirtualhosts(final List<VirtualHost> value) {
            toVirtualhosts.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>virtualhosts</b> for <b>APIProxyEndPoint</b> to multiple <b>VirtualHost</b>.
         * 
         * @param value
         *     The VirtualHosts to build this APIProxyEndPoint with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public APIProxyEndPoint.APIProxyEndPointBuilder virtualhosts(VirtualHost... value) {
            return toVirtualhosts(Lists.newArrayList(value));
        }

    }

}
