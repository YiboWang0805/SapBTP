
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.69.0
 */

package com.mycompany.vdm.namespaces.portalapplicationscf;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.mycompany.vdm.namespaces.portalapplicationscf.field.ApplicationField;
import com.mycompany.vdm.namespaces.portalapplicationscf.link.ApplicationLink;
import com.mycompany.vdm.namespaces.portalapplicationscf.link.ApplicationOneToOneLink;
import com.mycompany.vdm.namespaces.portalapplicationscf.selectable.ApplicationSelectable;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpClientAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;
import com.sap.cloud.sdk.datamodel.odata.helper.ODataTypeValueSerializer;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.odatav2.connectivity.ODataException;
import com.sap.cloud.sdk.odatav2.connectivity.ODataExceptionType;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQuery;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryBuilder;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryResult;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.apache.http.client.HttpClient;
import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;


/**
 * <p>Original entity name from the Odata EDM: <b>Application</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class Application
    extends VdmEntity<Application>
{

    /**
     * Selector for all available fields of Application.
     * 
     */
    public final static ApplicationSelectable ALL_FIELDS = () -> "*";
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>callbackurl</b></p>
     * 
     * @return
     *     The callbackurl contained in this entity.
     */
    @SerializedName("callbackurl")
    @JsonProperty("callbackurl")
    @Nullable
    @ODataField(odataName = "callbackurl")
    private String callbackurl;
    /**
     * Use with available fluent helpers to apply the <b>callbackurl</b> field to query operations.
     * 
     */
    public final static ApplicationField<String> CALLBACKURL = new ApplicationField<String>("callbackurl");
    /**
     * Constraints: Nullable, Maximum length: 256 <p>Original property name from the Odata EDM: <b>FK_DEVELOPER_ID</b></p>
     * 
     * @return
     *     The fK_DEVELOPER_ID contained in this entity.
     */
    @SerializedName("FK_DEVELOPER_ID")
    @JsonProperty("FK_DEVELOPER_ID")
    @Nullable
    @ODataField(odataName = "FK_DEVELOPER_ID")
    private String fK_DEVELOPER_ID;
    /**
     * Use with available fluent helpers to apply the <b>FK_DEVELOPER_ID</b> field to query operations.
     * 
     */
    public final static ApplicationField<String> FKDEVELOPERID = new ApplicationField<String>("FK_DEVELOPER_ID");
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @return
     *     The id contained in this entity.
     */
    @Key
    @SerializedName("id")
    @JsonProperty("id")
    @Nullable
    @ODataField(odataName = "id")
    private String id;
    /**
     * Use with available fluent helpers to apply the <b>id</b> field to query operations.
     * 
     */
    public final static ApplicationField<String> ID = new ApplicationField<String>("id");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @return
     *     The life_cycle contained in this entity.
     */
    @SerializedName("life_cycle")
    @JsonProperty("life_cycle")
    @Nullable
    @ODataField(odataName = "life_cycle")
    private History life_cycle;
    /**
     * Constraints: Nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>status_code</b></p>
     * 
     * @return
     *     The status_code contained in this entity.
     */
    @SerializedName("status_code")
    @JsonProperty("status_code")
    @Nullable
    @ODataField(odataName = "status_code")
    private String status_code;
    /**
     * Use with available fluent helpers to apply the <b>status_code</b> field to query operations.
     * 
     */
    public final static ApplicationField<String> STATUS_CODE = new ApplicationField<String>("status_code");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>valid_from</b></p>
     * 
     * @return
     *     The valid_from contained in this entity.
     */
    @SerializedName("valid_from")
    @JsonProperty("valid_from")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeAdapter.class)
    @ODataField(odataName = "valid_from", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeCalendarConverter.class)
    private LocalDateTime valid_from;
    /**
     * Use with available fluent helpers to apply the <b>valid_from</b> field to query operations.
     * 
     */
    public final static ApplicationField<LocalDateTime> VALID_FROM = new ApplicationField<LocalDateTime>("valid_from");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>valid_to</b></p>
     * 
     * @return
     *     The valid_to contained in this entity.
     */
    @SerializedName("valid_to")
    @JsonProperty("valid_to")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeAdapter.class)
    @ODataField(odataName = "valid_to", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeCalendarConverter.class)
    private LocalDateTime valid_to;
    /**
     * Use with available fluent helpers to apply the <b>valid_to</b> field to query operations.
     * 
     */
    public final static ApplicationField<LocalDateTime> VALID_TO = new ApplicationField<LocalDateTime>("valid_to");
    /**
     * Constraints: Nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>version</b></p>
     * 
     * @return
     *     The version contained in this entity.
     */
    @SerializedName("version")
    @JsonProperty("version")
    @Nullable
    @ODataField(odataName = "version")
    private String version;
    /**
     * Use with available fluent helpers to apply the <b>version</b> field to query operations.
     * 
     */
    public final static ApplicationField<String> VERSION = new ApplicationField<String>("version");
    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>title</b></p>
     * 
     * @return
     *     The title contained in this entity.
     */
    @SerializedName("title")
    @JsonProperty("title")
    @Nullable
    @ODataField(odataName = "title")
    private String title;
    /**
     * Use with available fluent helpers to apply the <b>title</b> field to query operations.
     * 
     */
    public final static ApplicationField<String> TITLE = new ApplicationField<String>("title");
    /**
     * Constraints: Not nullable, Maximum length: 16000 <p>Original property name from the Odata EDM: <b>description</b></p>
     * 
     * @return
     *     The description contained in this entity.
     */
    @SerializedName("description")
    @JsonProperty("description")
    @Nullable
    @ODataField(odataName = "description")
    private String description;
    /**
     * Use with available fluent helpers to apply the <b>description</b> field to query operations.
     * 
     */
    public final static ApplicationField<String> DESCRIPTION = new ApplicationField<String>("description");
    /**
     * Constraints: Not nullable, Maximum length: 256 <p>Original property name from the Odata EDM: <b>app_key</b></p>
     * 
     * @return
     *     The app_key contained in this entity.
     */
    @SerializedName("app_key")
    @JsonProperty("app_key")
    @Nullable
    @ODataField(odataName = "app_key")
    private String app_key;
    /**
     * Use with available fluent helpers to apply the <b>app_key</b> field to query operations.
     * 
     */
    public final static ApplicationField<String> APP_KEY = new ApplicationField<String>("app_key");
    /**
     * Constraints: Not nullable, Maximum length: 1000 <p>Original property name from the Odata EDM: <b>app_secret</b></p>
     * 
     * @return
     *     The app_secret contained in this entity.
     */
    @SerializedName("app_secret")
    @JsonProperty("app_secret")
    @Nullable
    @ODataField(odataName = "app_secret")
    private String app_secret;
    /**
     * Use with available fluent helpers to apply the <b>app_secret</b> field to query operations.
     * 
     */
    public final static ApplicationField<String> APP_SECRET = new ApplicationField<String>("app_secret");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>subscribedRatePlan</b></p>
     * 
     * @return
     *     The subscribedRatePlan contained in this entity.
     */
    @SerializedName("subscribedRatePlan")
    @JsonProperty("subscribedRatePlan")
    @Nullable
    @ODataField(odataName = "subscribedRatePlan")
    private String subscribedRatePlan;
    /**
     * Use with available fluent helpers to apply the <b>subscribedRatePlan</b> field to query operations.
     * 
     */
    public final static ApplicationField<String> SUBSCRIBED_RATE_PLAN = new ApplicationField<String>("subscribedRatePlan");
    /**
     * Navigation property <b>apiProducts</b> for <b>Application</b> to multiple <b>APIProduct</b>.
     * 
     */
    @SerializedName("apiProducts")
    @JsonProperty("apiProducts")
    @ODataField(odataName = "apiProducts")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<APIProduct> toApiProducts;
    /**
     * Navigation property <b>developer</b> for <b>Application</b> to single <b>Developer</b>.
     * 
     */
    @SerializedName("developer")
    @JsonProperty("developer")
    @ODataField(odataName = "developer")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private Developer toDeveloper;
    /**
     * Navigation property <b>resources</b> for <b>Application</b> to multiple <b>Resource</b>.
     * 
     */
    @SerializedName("resources")
    @JsonProperty("resources")
    @ODataField(odataName = "resources")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Resource> toResources;
    /**
     * Use with available fluent helpers to apply the <b>apiProducts</b> navigation property to query operations.
     * 
     */
    public final static ApplicationLink<APIProduct> TO_API_PRODUCTS = new ApplicationLink<APIProduct>("apiProducts");
    /**
     * Use with available fluent helpers to apply the <b>developer</b> navigation property to query operations.
     * 
     */
    public final static ApplicationOneToOneLink<Developer> TO_DEVELOPER = new ApplicationOneToOneLink<Developer>("developer");
    /**
     * Use with available fluent helpers to apply the <b>resources</b> navigation property to query operations.
     * 
     */
    public final static ApplicationLink<Resource> TO_RESOURCES = new ApplicationLink<Resource>("resources");

    @Nonnull
    @Override
    public Class<Application> getType() {
        return Application.class;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>callbackurl</b></p>
     * 
     * @param callbackurl
     *     The callbackurl to set.
     */
    public void setCallbackurl(
        @Nullable
        final String callbackurl) {
        rememberChangedField("callbackurl", this.callbackurl);
        this.callbackurl = callbackurl;
    }

    /**
     * Constraints: Nullable, Maximum length: 256 <p>Original property name from the Odata EDM: <b>FK_DEVELOPER_ID</b></p>
     * 
     * @param fK_DEVELOPER_ID
     *     The fK_DEVELOPER_ID to set.
     */
    public void setFK_DEVELOPER_ID(
        @Nullable
        final String fK_DEVELOPER_ID) {
        rememberChangedField("FK_DEVELOPER_ID", this.fK_DEVELOPER_ID);
        this.fK_DEVELOPER_ID = fK_DEVELOPER_ID;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @param id
     *     The id to set.
     */
    public void setId(
        @Nullable
        final String id) {
        rememberChangedField("id", this.id);
        this.id = id;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @param life_cycle
     *     The life_cycle to set.
     */
    public void setLife_cycle(
        @Nullable
        final History life_cycle) {
        rememberChangedField("life_cycle", this.life_cycle);
        this.life_cycle = life_cycle;
    }

    /**
     * Constraints: Nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>status_code</b></p>
     * 
     * @param status_code
     *     The status_code to set.
     */
    public void setStatus_code(
        @Nullable
        final String status_code) {
        rememberChangedField("status_code", this.status_code);
        this.status_code = status_code;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>valid_from</b></p>
     * 
     * @param valid_from
     *     The valid_from to set.
     */
    public void setValid_from(
        @Nullable
        final LocalDateTime valid_from) {
        rememberChangedField("valid_from", this.valid_from);
        this.valid_from = valid_from;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>valid_to</b></p>
     * 
     * @param valid_to
     *     The valid_to to set.
     */
    public void setValid_to(
        @Nullable
        final LocalDateTime valid_to) {
        rememberChangedField("valid_to", this.valid_to);
        this.valid_to = valid_to;
    }

    /**
     * Constraints: Nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>version</b></p>
     * 
     * @param version
     *     The version to set.
     */
    public void setVersion(
        @Nullable
        final String version) {
        rememberChangedField("version", this.version);
        this.version = version;
    }

    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>title</b></p>
     * 
     * @param title
     *     The title to set.
     */
    public void setTitle(
        @Nullable
        final String title) {
        rememberChangedField("title", this.title);
        this.title = title;
    }

    /**
     * Constraints: Not nullable, Maximum length: 16000 <p>Original property name from the Odata EDM: <b>description</b></p>
     * 
     * @param description
     *     The description to set.
     */
    public void setDescription(
        @Nullable
        final String description) {
        rememberChangedField("description", this.description);
        this.description = description;
    }

    /**
     * Constraints: Not nullable, Maximum length: 256 <p>Original property name from the Odata EDM: <b>app_key</b></p>
     * 
     * @param app_key
     *     The app_key to set.
     */
    public void setApp_key(
        @Nullable
        final String app_key) {
        rememberChangedField("app_key", this.app_key);
        this.app_key = app_key;
    }

    /**
     * Constraints: Not nullable, Maximum length: 1000 <p>Original property name from the Odata EDM: <b>app_secret</b></p>
     * 
     * @param app_secret
     *     The app_secret to set.
     */
    public void setApp_secret(
        @Nullable
        final String app_secret) {
        rememberChangedField("app_secret", this.app_secret);
        this.app_secret = app_secret;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>subscribedRatePlan</b></p>
     * 
     * @param subscribedRatePlan
     *     The subscribedRatePlan to set.
     */
    public void setSubscribedRatePlan(
        @Nullable
        final String subscribedRatePlan) {
        rememberChangedField("subscribedRatePlan", this.subscribedRatePlan);
        this.subscribedRatePlan = subscribedRatePlan;
    }

    @Override
    protected String getEntityCollection() {
        return "Applications";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("id", getId());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("callbackurl", getCallbackurl());
        values.put("FK_DEVELOPER_ID", getFK_DEVELOPER_ID());
        values.put("id", getId());
        values.put("life_cycle", getLife_cycle());
        values.put("status_code", getStatus_code());
        values.put("valid_from", getValid_from());
        values.put("valid_to", getValid_to());
        values.put("version", getVersion());
        values.put("title", getTitle());
        values.put("description", getDescription());
        values.put("app_key", getApp_key());
        values.put("app_secret", getApp_secret());
        values.put("subscribedRatePlan", getSubscribedRatePlan());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("callbackurl")) {
                final Object value = values.remove("callbackurl");
                if ((value == null)||(!value.equals(getCallbackurl()))) {
                    setCallbackurl(((String) value));
                }
            }
            if (values.containsKey("FK_DEVELOPER_ID")) {
                final Object value = values.remove("FK_DEVELOPER_ID");
                if ((value == null)||(!value.equals(getFK_DEVELOPER_ID()))) {
                    setFK_DEVELOPER_ID(((String) value));
                }
            }
            if (values.containsKey("id")) {
                final Object value = values.remove("id");
                if ((value == null)||(!value.equals(getId()))) {
                    setId(((String) value));
                }
            }
            if (values.containsKey("status_code")) {
                final Object value = values.remove("status_code");
                if ((value == null)||(!value.equals(getStatus_code()))) {
                    setStatus_code(((String) value));
                }
            }
            if (values.containsKey("valid_from")) {
                final Object value = values.remove("valid_from");
                if ((value == null)||(!value.equals(getValid_from()))) {
                    setValid_from(((LocalDateTime) value));
                }
            }
            if (values.containsKey("valid_to")) {
                final Object value = values.remove("valid_to");
                if ((value == null)||(!value.equals(getValid_to()))) {
                    setValid_to(((LocalDateTime) value));
                }
            }
            if (values.containsKey("version")) {
                final Object value = values.remove("version");
                if ((value == null)||(!value.equals(getVersion()))) {
                    setVersion(((String) value));
                }
            }
            if (values.containsKey("title")) {
                final Object value = values.remove("title");
                if ((value == null)||(!value.equals(getTitle()))) {
                    setTitle(((String) value));
                }
            }
            if (values.containsKey("description")) {
                final Object value = values.remove("description");
                if ((value == null)||(!value.equals(getDescription()))) {
                    setDescription(((String) value));
                }
            }
            if (values.containsKey("app_key")) {
                final Object value = values.remove("app_key");
                if ((value == null)||(!value.equals(getApp_key()))) {
                    setApp_key(((String) value));
                }
            }
            if (values.containsKey("app_secret")) {
                final Object value = values.remove("app_secret");
                if ((value == null)||(!value.equals(getApp_secret()))) {
                    setApp_secret(((String) value));
                }
            }
            if (values.containsKey("subscribedRatePlan")) {
                final Object value = values.remove("subscribedRatePlan");
                if ((value == null)||(!value.equals(getSubscribedRatePlan()))) {
                    setSubscribedRatePlan(((String) value));
                }
            }
        }
        // structured properties
        {
            if (values.containsKey("life_cycle")) {
                final Object value = values.remove("life_cycle");
                if (value instanceof Map) {
                    if (getLife_cycle() == null) {
                        setLife_cycle(new History());
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    getLife_cycle().fromMap(inputMap);
                }
                if ((value == null)&&(getLife_cycle()!= null)) {
                    setLife_cycle(null);
                }
            }
        }
        // navigation properties
        {
            if ((values).containsKey("apiProducts")) {
                final Object value = (values).remove("apiProducts");
                if (value instanceof Iterable) {
                    if (toApiProducts == null) {
                        toApiProducts = Lists.newArrayList();
                    } else {
                        toApiProducts = Lists.newArrayList(toApiProducts);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        APIProduct entity;
                        if (toApiProducts.size()>i) {
                            entity = toApiProducts.get(i);
                        } else {
                            entity = new APIProduct();
                            toApiProducts.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("developer")) {
                final Object value = (values).remove("developer");
                if (value instanceof Map) {
                    if (toDeveloper == null) {
                        toDeveloper = new Developer();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toDeveloper.fromMap(inputMap);
                }
            }
            if ((values).containsKey("resources")) {
                final Object value = (values).remove("resources");
                if (value instanceof Iterable) {
                    if (toResources == null) {
                        toResources = Lists.newArrayList();
                    } else {
                        toResources = Lists.newArrayList(toResources);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Resource entity;
                        if (toResources.size()>i) {
                            entity = toResources.get(i);
                        } else {
                            entity = new Resource();
                            toResources.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >ApplicationField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new ApplicationField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >ApplicationField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new ApplicationField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public HttpDestinationProperties getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final HttpDestinationProperties destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return (com.mycompany.vdm.services.APIPortalApplicationsCFService.DEFAULT_SERVICE_PATH);
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toApiProducts!= null) {
            (values).put("apiProducts", toApiProducts);
        }
        if (toDeveloper!= null) {
            (values).put("developer", toDeveloper);
        }
        if (toResources!= null) {
            (values).put("resources", toResources);
        }
        return values;
    }

    /**
     * Fetches the <b>APIProduct</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>apiProducts</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>APIProduct</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIProduct> fetchApiProducts()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type APIProduct.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("apiProducts");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<APIProduct> entityList = result.asList(APIProduct.class);
        for (APIProduct entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>APIProduct</b> entities (one to many). This corresponds to the OData navigation property <b>apiProducts</b>.
     * <p>
     * If the navigation property <b>apiProducts</b> of a queried <b>Application</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>APIProduct</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIProduct> getApiProductsOrFetch()
        throws ODataException
    {
        if (toApiProducts == null) {
            toApiProducts = fetchApiProducts();
        }
        return toApiProducts;
    }

    /**
     * Retrieval of associated <b>APIProduct</b> entities (one to many). This corresponds to the OData navigation property <b>apiProducts</b>.
     * <p>
     * If the navigation property for an entity <b>Application</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>apiProducts</b> is already loaded, the result will contain the <b>APIProduct</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<APIProduct>> getApiProductsIfPresent() {
        return Option.of(toApiProducts);
    }

    /**
     * Overwrites the list of associated <b>APIProduct</b> entities for the loaded navigation property <b>apiProducts</b>.
     * <p>
     * If the navigation property <b>apiProducts</b> of a queried <b>Application</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>APIProduct</b> entities.
     */
    public void setApiProducts(
        @Nonnull
        final List<APIProduct> value) {
        if (toApiProducts == null) {
            toApiProducts = Lists.newArrayList();
        }
        toApiProducts.clear();
        toApiProducts.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>APIProduct</b> entities. This corresponds to the OData navigation property <b>apiProducts</b>.
     * <p>
     * If the navigation property <b>apiProducts</b> of a queried <b>Application</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>APIProduct</b> entities.
     */
    public void addApiProducts(APIProduct... entity) {
        if (toApiProducts == null) {
            toApiProducts = Lists.newArrayList();
        }
        toApiProducts.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>Developer</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>developer</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>Developer</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public Developer fetchDeveloper()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type Developer.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("developer");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final Developer entity = result.as(Developer.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>Developer</b> entity (one to one). This corresponds to the OData navigation property <b>developer</b>.
     * <p>
     * If the navigation property <b>developer</b> of a queried <b>Application</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>Developer</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public Developer getDeveloperOrFetch()
        throws ODataException
    {
        if (toDeveloper == null) {
            toDeveloper = fetchDeveloper();
        }
        return toDeveloper;
    }

    /**
     * Retrieval of associated <b>Developer</b> entity (one to one). This corresponds to the OData navigation property <b>developer</b>.
     * <p>
     * If the navigation property for an entity <b>Application</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>developer</b> is already loaded, the result will contain the <b>Developer</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<Developer> getDeveloperIfPresent() {
        return Option.of(toDeveloper);
    }

    /**
     * Overwrites the associated <b>Developer</b> entity for the loaded navigation property <b>developer</b>.
     * 
     * @param value
     *     New <b>Developer</b> entity.
     */
    public void setDeveloper(final Developer value) {
        toDeveloper = value;
    }

    /**
     * Fetches the <b>Resource</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>Resource</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Resource> fetchResources()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type Resource.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("resources");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<Resource> entityList = result.asList(Resource.class);
        for (Resource entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>Resource</b> entities (one to many). This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * If the navigation property <b>resources</b> of a queried <b>Application</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>Resource</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Resource> getResourcesOrFetch()
        throws ODataException
    {
        if (toResources == null) {
            toResources = fetchResources();
        }
        return toResources;
    }

    /**
     * Retrieval of associated <b>Resource</b> entities (one to many). This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * If the navigation property for an entity <b>Application</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>resources</b> is already loaded, the result will contain the <b>Resource</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Resource>> getResourcesIfPresent() {
        return Option.of(toResources);
    }

    /**
     * Overwrites the list of associated <b>Resource</b> entities for the loaded navigation property <b>resources</b>.
     * <p>
     * If the navigation property <b>resources</b> of a queried <b>Application</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>Resource</b> entities.
     */
    public void setResources(
        @Nonnull
        final List<Resource> value) {
        if (toResources == null) {
            toResources = Lists.newArrayList();
        }
        toResources.clear();
        toResources.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>Resource</b> entities. This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * If the navigation property <b>resources</b> of a queried <b>Application</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Resource</b> entities.
     */
    public void addResources(Resource... entity) {
        if (toResources == null) {
            toResources = Lists.newArrayList();
        }
        toResources.addAll(Lists.newArrayList(entity));
    }


    /**
     * Helper class to allow for fluent creation of Application instances.
     * 
     */
    public final static class ApplicationBuilder {

        private List<APIProduct> toApiProducts = Lists.newArrayList();
        private Developer toDeveloper;
        private List<Resource> toResources = Lists.newArrayList();

        private Application.ApplicationBuilder toApiProducts(final List<APIProduct> value) {
            toApiProducts.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>apiProducts</b> for <b>Application</b> to multiple <b>APIProduct</b>.
         * 
         * @param value
         *     The APIProducts to build this Application with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Application.ApplicationBuilder apiProducts(APIProduct... value) {
            return toApiProducts(Lists.newArrayList(value));
        }

        private Application.ApplicationBuilder toDeveloper(final Developer value) {
            toDeveloper = value;
            return this;
        }

        /**
         * Navigation property <b>developer</b> for <b>Application</b> to single <b>Developer</b>.
         * 
         * @param value
         *     The Developer to build this Application with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Application.ApplicationBuilder developer(final Developer value) {
            return toDeveloper(value);
        }

        private Application.ApplicationBuilder toResources(final List<Resource> value) {
            toResources.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>resources</b> for <b>Application</b> to multiple <b>Resource</b>.
         * 
         * @param value
         *     The Resources to build this Application with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Application.ApplicationBuilder resources(Resource... value) {
            return toResources(Lists.newArrayList(value));
        }

    }

}
