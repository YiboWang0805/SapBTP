
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.69.0
 */

package com.mycompany.vdm.namespaces.portalapplicationscf;

import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.mycompany.vdm.namespaces.portalapplicationscf.field.DestinationAndUrlMappingField;
import com.mycompany.vdm.namespaces.portalapplicationscf.selectable.DestinationAndUrlMappingSelectable;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.ToString;


/**
 * <p>Original entity name from the Odata EDM: <b>DestinationAndUrlMapping</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class DestinationAndUrlMapping
    extends VdmEntity<DestinationAndUrlMapping>
{

    /**
     * Selector for all available fields of DestinationAndUrlMapping.
     * 
     */
    public final static DestinationAndUrlMappingSelectable ALL_FIELDS = () -> "*";
    /**
     * Constraints: Not nullable, Maximum length: 256 <p>Original property name from the Odata EDM: <b>destination</b></p>
     * 
     * @return
     *     The destination contained in this entity.
     */
    @SerializedName("destination")
    @JsonProperty("destination")
    @Nullable
    @ODataField(odataName = "destination")
    private String destination;
    /**
     * Use with available fluent helpers to apply the <b>destination</b> field to query operations.
     * 
     */
    public final static DestinationAndUrlMappingField<String> DESTINATION = new DestinationAndUrlMappingField<String>("destination");
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @return
     *     The id contained in this entity.
     */
    @Key
    @SerializedName("id")
    @JsonProperty("id")
    @Nullable
    @ODataField(odataName = "id")
    private String id;
    /**
     * Use with available fluent helpers to apply the <b>id</b> field to query operations.
     * 
     */
    public final static DestinationAndUrlMappingField<String> ID = new DestinationAndUrlMappingField<String>("id");
    /**
     * Constraints: Not nullable, Maximum length: 2048 <p>Original property name from the Odata EDM: <b>url</b></p>
     * 
     * @return
     *     The url contained in this entity.
     */
    @SerializedName("url")
    @JsonProperty("url")
    @Nullable
    @ODataField(odataName = "url")
    private String url;
    /**
     * Use with available fluent helpers to apply the <b>url</b> field to query operations.
     * 
     */
    public final static DestinationAndUrlMappingField<String> URL = new DestinationAndUrlMappingField<String>("url");

    @Nonnull
    @Override
    public Class<DestinationAndUrlMapping> getType() {
        return DestinationAndUrlMapping.class;
    }

    /**
     * Constraints: Not nullable, Maximum length: 256 <p>Original property name from the Odata EDM: <b>destination</b></p>
     * 
     * @param destination
     *     The destination to set.
     */
    public void setDestination(
        @Nullable
        final String destination) {
        rememberChangedField("destination", this.destination);
        this.destination = destination;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @param id
     *     The id to set.
     */
    public void setId(
        @Nullable
        final String id) {
        rememberChangedField("id", this.id);
        this.id = id;
    }

    /**
     * Constraints: Not nullable, Maximum length: 2048 <p>Original property name from the Odata EDM: <b>url</b></p>
     * 
     * @param url
     *     The url to set.
     */
    public void setUrl(
        @Nullable
        final String url) {
        rememberChangedField("url", this.url);
        this.url = url;
    }

    @Override
    protected String getEntityCollection() {
        return "DestinationAndUrlMappings";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("id", getId());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("destination", getDestination());
        values.put("id", getId());
        values.put("url", getUrl());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("destination")) {
                final Object value = values.remove("destination");
                if ((value == null)||(!value.equals(getDestination()))) {
                    setDestination(((String) value));
                }
            }
            if (values.containsKey("id")) {
                final Object value = values.remove("id");
                if ((value == null)||(!value.equals(getId()))) {
                    setId(((String) value));
                }
            }
            if (values.containsKey("url")) {
                final Object value = values.remove("url");
                if ((value == null)||(!value.equals(getUrl()))) {
                    setUrl(((String) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >DestinationAndUrlMappingField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new DestinationAndUrlMappingField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >DestinationAndUrlMappingField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new DestinationAndUrlMappingField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public HttpDestinationProperties getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final HttpDestinationProperties destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return (com.mycompany.vdm.services.APIPortalApplicationsCFService.DEFAULT_SERVICE_PATH);
    }

}
