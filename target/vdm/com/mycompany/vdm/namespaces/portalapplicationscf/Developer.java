
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.69.0
 */

package com.mycompany.vdm.namespaces.portalapplicationscf;

import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.mycompany.vdm.namespaces.portalapplicationscf.field.DeveloperField;
import com.mycompany.vdm.namespaces.portalapplicationscf.link.DeveloperLink;
import com.mycompany.vdm.namespaces.portalapplicationscf.selectable.DeveloperSelectable;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpClientAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;
import com.sap.cloud.sdk.datamodel.odata.helper.ODataTypeValueSerializer;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.odatav2.connectivity.ODataException;
import com.sap.cloud.sdk.odatav2.connectivity.ODataExceptionType;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQuery;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryBuilder;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryResult;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.apache.http.client.HttpClient;
import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;


/**
 * <p>Original entity name from the Odata EDM: <b>Developer</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class Developer
    extends VdmEntity<Developer>
{

    /**
     * Selector for all available fields of Developer.
     * 
     */
    public final static DeveloperSelectable ALL_FIELDS = () -> "*";
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>country</b></p>
     * 
     * @return
     *     The country contained in this entity.
     */
    @SerializedName("country")
    @JsonProperty("country")
    @Nullable
    @ODataField(odataName = "country")
    private String country;
    /**
     * Use with available fluent helpers to apply the <b>country</b> field to query operations.
     * 
     */
    public final static DeveloperField<String> COUNTRY = new DeveloperField<String>("country");
    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>emailId</b></p>
     * 
     * @return
     *     The emailId contained in this entity.
     */
    @SerializedName("emailId")
    @JsonProperty("emailId")
    @Nullable
    @ODataField(odataName = "emailId")
    private String emailId;
    /**
     * Use with available fluent helpers to apply the <b>emailId</b> field to query operations.
     * 
     */
    public final static DeveloperField<String> EMAIL_ID = new DeveloperField<String>("emailId");
    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>firstName</b></p>
     * 
     * @return
     *     The firstName contained in this entity.
     */
    @SerializedName("firstName")
    @JsonProperty("firstName")
    @Nullable
    @ODataField(odataName = "firstName")
    private String firstName;
    /**
     * Use with available fluent helpers to apply the <b>firstName</b> field to query operations.
     * 
     */
    public final static DeveloperField<String> FIRST_NAME = new DeveloperField<String>("firstName");
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 256 <p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @return
     *     The id contained in this entity.
     */
    @Key
    @SerializedName("id")
    @JsonProperty("id")
    @Nullable
    @ODataField(odataName = "id")
    private String id;
    /**
     * Use with available fluent helpers to apply the <b>id</b> field to query operations.
     * 
     */
    public final static DeveloperField<String> ID = new DeveloperField<String>("id");
    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>lastName</b></p>
     * 
     * @return
     *     The lastName contained in this entity.
     */
    @SerializedName("lastName")
    @JsonProperty("lastName")
    @Nullable
    @ODataField(odataName = "lastName")
    private String lastName;
    /**
     * Use with available fluent helpers to apply the <b>lastName</b> field to query operations.
     * 
     */
    public final static DeveloperField<String> LAST_NAME = new DeveloperField<String>("lastName");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @return
     *     The life_cycle contained in this entity.
     */
    @SerializedName("life_cycle")
    @JsonProperty("life_cycle")
    @Nullable
    @ODataField(odataName = "life_cycle")
    private History life_cycle;
    /**
     * Navigation property <b>applications</b> for <b>Developer</b> to multiple <b>Application</b>.
     * 
     */
    @SerializedName("applications")
    @JsonProperty("applications")
    @ODataField(odataName = "applications")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Application> toApplications;
    /**
     * Use with available fluent helpers to apply the <b>applications</b> navigation property to query operations.
     * 
     */
    public final static DeveloperLink<Application> TO_APPLICATIONS = new DeveloperLink<Application>("applications");

    @Nonnull
    @Override
    public Class<Developer> getType() {
        return Developer.class;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>country</b></p>
     * 
     * @param country
     *     The country to set.
     */
    public void setCountry(
        @Nullable
        final String country) {
        rememberChangedField("country", this.country);
        this.country = country;
    }

    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>emailId</b></p>
     * 
     * @param emailId
     *     The emailId to set.
     */
    public void setEmailId(
        @Nullable
        final String emailId) {
        rememberChangedField("emailId", this.emailId);
        this.emailId = emailId;
    }

    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>firstName</b></p>
     * 
     * @param firstName
     *     The firstName to set.
     */
    public void setFirstName(
        @Nullable
        final String firstName) {
        rememberChangedField("firstName", this.firstName);
        this.firstName = firstName;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 256 <p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @param id
     *     The id to set.
     */
    public void setId(
        @Nullable
        final String id) {
        rememberChangedField("id", this.id);
        this.id = id;
    }

    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>lastName</b></p>
     * 
     * @param lastName
     *     The lastName to set.
     */
    public void setLastName(
        @Nullable
        final String lastName) {
        rememberChangedField("lastName", this.lastName);
        this.lastName = lastName;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @param life_cycle
     *     The life_cycle to set.
     */
    public void setLife_cycle(
        @Nullable
        final History life_cycle) {
        rememberChangedField("life_cycle", this.life_cycle);
        this.life_cycle = life_cycle;
    }

    @Override
    protected String getEntityCollection() {
        return "Developers";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("id", getId());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("country", getCountry());
        values.put("emailId", getEmailId());
        values.put("firstName", getFirstName());
        values.put("id", getId());
        values.put("lastName", getLastName());
        values.put("life_cycle", getLife_cycle());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("country")) {
                final Object value = values.remove("country");
                if ((value == null)||(!value.equals(getCountry()))) {
                    setCountry(((String) value));
                }
            }
            if (values.containsKey("emailId")) {
                final Object value = values.remove("emailId");
                if ((value == null)||(!value.equals(getEmailId()))) {
                    setEmailId(((String) value));
                }
            }
            if (values.containsKey("firstName")) {
                final Object value = values.remove("firstName");
                if ((value == null)||(!value.equals(getFirstName()))) {
                    setFirstName(((String) value));
                }
            }
            if (values.containsKey("id")) {
                final Object value = values.remove("id");
                if ((value == null)||(!value.equals(getId()))) {
                    setId(((String) value));
                }
            }
            if (values.containsKey("lastName")) {
                final Object value = values.remove("lastName");
                if ((value == null)||(!value.equals(getLastName()))) {
                    setLastName(((String) value));
                }
            }
        }
        // structured properties
        {
            if (values.containsKey("life_cycle")) {
                final Object value = values.remove("life_cycle");
                if (value instanceof Map) {
                    if (getLife_cycle() == null) {
                        setLife_cycle(new History());
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    getLife_cycle().fromMap(inputMap);
                }
                if ((value == null)&&(getLife_cycle()!= null)) {
                    setLife_cycle(null);
                }
            }
        }
        // navigation properties
        {
            if ((values).containsKey("applications")) {
                final Object value = (values).remove("applications");
                if (value instanceof Iterable) {
                    if (toApplications == null) {
                        toApplications = Lists.newArrayList();
                    } else {
                        toApplications = Lists.newArrayList(toApplications);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Application entity;
                        if (toApplications.size()>i) {
                            entity = toApplications.get(i);
                        } else {
                            entity = new Application();
                            toApplications.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >DeveloperField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new DeveloperField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >DeveloperField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new DeveloperField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public HttpDestinationProperties getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final HttpDestinationProperties destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return (com.mycompany.vdm.services.APIPortalApplicationsCFService.DEFAULT_SERVICE_PATH);
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toApplications!= null) {
            (values).put("applications", toApplications);
        }
        return values;
    }

    /**
     * Fetches the <b>Application</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>applications</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>Application</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Application> fetchApplications()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type Application.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("applications");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<Application> entityList = result.asList(Application.class);
        for (Application entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>Application</b> entities (one to many). This corresponds to the OData navigation property <b>applications</b>.
     * <p>
     * If the navigation property <b>applications</b> of a queried <b>Developer</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>Application</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Application> getApplicationsOrFetch()
        throws ODataException
    {
        if (toApplications == null) {
            toApplications = fetchApplications();
        }
        return toApplications;
    }

    /**
     * Retrieval of associated <b>Application</b> entities (one to many). This corresponds to the OData navigation property <b>applications</b>.
     * <p>
     * If the navigation property for an entity <b>Developer</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>applications</b> is already loaded, the result will contain the <b>Application</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Application>> getApplicationsIfPresent() {
        return Option.of(toApplications);
    }

    /**
     * Overwrites the list of associated <b>Application</b> entities for the loaded navigation property <b>applications</b>.
     * <p>
     * If the navigation property <b>applications</b> of a queried <b>Developer</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>Application</b> entities.
     */
    public void setApplications(
        @Nonnull
        final List<Application> value) {
        if (toApplications == null) {
            toApplications = Lists.newArrayList();
        }
        toApplications.clear();
        toApplications.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>Application</b> entities. This corresponds to the OData navigation property <b>applications</b>.
     * <p>
     * If the navigation property <b>applications</b> of a queried <b>Developer</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Application</b> entities.
     */
    public void addApplications(Application... entity) {
        if (toApplications == null) {
            toApplications = Lists.newArrayList();
        }
        toApplications.addAll(Lists.newArrayList(entity));
    }


    /**
     * Helper class to allow for fluent creation of Developer instances.
     * 
     */
    public final static class DeveloperBuilder {

        private List<Application> toApplications = Lists.newArrayList();

        private Developer.DeveloperBuilder toApplications(final List<Application> value) {
            toApplications.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>applications</b> for <b>Developer</b> to multiple <b>Application</b>.
         * 
         * @param value
         *     The Applications to build this Developer with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Developer.DeveloperBuilder applications(Application... value) {
            return toApplications(Lists.newArrayList(value));
        }

    }

}
