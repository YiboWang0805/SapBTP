
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.69.0
 */

package com.mycompany.vdm.namespaces.portalapplicationscf;

import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.mycompany.vdm.namespaces.portalapplicationscf.field.FileResourceField;
import com.mycompany.vdm.namespaces.portalapplicationscf.link.FileResourceLink;
import com.mycompany.vdm.namespaces.portalapplicationscf.selectable.FileResourceSelectable;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpClientAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;
import com.sap.cloud.sdk.datamodel.odata.helper.ODataTypeValueSerializer;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.odatav2.connectivity.ODataException;
import com.sap.cloud.sdk.odatav2.connectivity.ODataExceptionType;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQuery;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryBuilder;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryResult;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.apache.http.client.HttpClient;
import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;


/**
 * <p>Original entity name from the Odata EDM: <b>FileResource</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class FileResource
    extends VdmEntity<FileResource>
{

    /**
     * Selector for all available fields of FileResource.
     * 
     */
    public final static FileResourceSelectable ALL_FIELDS = () -> "*";
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>content</b></p>
     * 
     * @return
     *     The content contained in this entity.
     */
    @SerializedName("content")
    @JsonProperty("content")
    @Nullable
    @ODataField(odataName = "content")
    private String content;
    /**
     * Use with available fluent helpers to apply the <b>content</b> field to query operations.
     * 
     */
    public final static FileResourceField<String> CONTENT = new FileResourceField<String>("content");
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @return
     *     The id contained in this entity.
     */
    @Key
    @SerializedName("id")
    @JsonProperty("id")
    @Nullable
    @ODataField(odataName = "id")
    private String id;
    /**
     * Use with available fluent helpers to apply the <b>id</b> field to query operations.
     * 
     */
    public final static FileResourceField<String> ID = new FileResourceField<String>("id");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @return
     *     The name contained in this entity.
     */
    @SerializedName("name")
    @JsonProperty("name")
    @Nullable
    @ODataField(odataName = "name")
    private String name;
    /**
     * Use with available fluent helpers to apply the <b>name</b> field to query operations.
     * 
     */
    public final static FileResourceField<String> NAME = new FileResourceField<String>("name");
    /**
     * Constraints: Nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>scope</b></p>
     * 
     * @return
     *     The scope contained in this entity.
     */
    @SerializedName("scope")
    @JsonProperty("scope")
    @Nullable
    @ODataField(odataName = "scope")
    private String scope;
    /**
     * Use with available fluent helpers to apply the <b>scope</b> field to query operations.
     * 
     */
    public final static FileResourceField<String> SCOPE = new FileResourceField<String>("scope");
    /**
     * Constraints: Nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>type</b></p>
     * 
     * @return
     *     The type_2 contained in this entity.
     */
    @SerializedName("type")
    @JsonProperty("type")
    @Nullable
    @ODataField(odataName = "type")
    private String type_2;
    /**
     * Use with available fluent helpers to apply the <b>type</b> field to query operations.
     * 
     */
    public final static FileResourceField<String> TYPE_2 = new FileResourceField<String>("type");
    /**
     * Navigation property <b>apiProxies</b> for <b>FileResource</b> to multiple <b>APIProxy</b>.
     * 
     */
    @SerializedName("apiProxies")
    @JsonProperty("apiProxies")
    @ODataField(odataName = "apiProxies")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<APIProxy> toApiProxies;
    /**
     * Use with available fluent helpers to apply the <b>apiProxies</b> navigation property to query operations.
     * 
     */
    public final static FileResourceLink<APIProxy> TO_API_PROXIES = new FileResourceLink<APIProxy>("apiProxies");

    @Nonnull
    @Override
    public Class<FileResource> getType() {
        return FileResource.class;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>content</b></p>
     * 
     * @param content
     *     The content to set.
     */
    public void setContent(
        @Nullable
        final String content) {
        rememberChangedField("content", this.content);
        this.content = content;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @param id
     *     The id to set.
     */
    public void setId(
        @Nullable
        final String id) {
        rememberChangedField("id", this.id);
        this.id = id;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @param name
     *     The name to set.
     */
    public void setName(
        @Nullable
        final String name) {
        rememberChangedField("name", this.name);
        this.name = name;
    }

    /**
     * Constraints: Nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>scope</b></p>
     * 
     * @param scope
     *     The scope to set.
     */
    public void setScope(
        @Nullable
        final String scope) {
        rememberChangedField("scope", this.scope);
        this.scope = scope;
    }

    /**
     * Constraints: Nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>type</b></p>
     * 
     * @param type_2
     *     The type_2 to set.
     */
    public void setType_2(
        @Nullable
        final String type_2) {
        rememberChangedField("type", this.type_2);
        this.type_2 = type_2;
    }

    @Override
    protected String getEntityCollection() {
        return "FileResources";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("id", getId());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("content", getContent());
        values.put("id", getId());
        values.put("name", getName());
        values.put("scope", getScope());
        values.put("type", getType_2());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("content")) {
                final Object value = values.remove("content");
                if ((value == null)||(!value.equals(getContent()))) {
                    setContent(((String) value));
                }
            }
            if (values.containsKey("id")) {
                final Object value = values.remove("id");
                if ((value == null)||(!value.equals(getId()))) {
                    setId(((String) value));
                }
            }
            if (values.containsKey("name")) {
                final Object value = values.remove("name");
                if ((value == null)||(!value.equals(getName()))) {
                    setName(((String) value));
                }
            }
            if (values.containsKey("scope")) {
                final Object value = values.remove("scope");
                if ((value == null)||(!value.equals(getScope()))) {
                    setScope(((String) value));
                }
            }
            if (values.containsKey("type")) {
                final Object value = values.remove("type");
                if ((value == null)||(!value.equals(getType_2()))) {
                    setType_2(((String) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
            if ((values).containsKey("apiProxies")) {
                final Object value = (values).remove("apiProxies");
                if (value instanceof Iterable) {
                    if (toApiProxies == null) {
                        toApiProxies = Lists.newArrayList();
                    } else {
                        toApiProxies = Lists.newArrayList(toApiProxies);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        APIProxy entity;
                        if (toApiProxies.size()>i) {
                            entity = toApiProxies.get(i);
                        } else {
                            entity = new APIProxy();
                            toApiProxies.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >FileResourceField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new FileResourceField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >FileResourceField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new FileResourceField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public HttpDestinationProperties getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final HttpDestinationProperties destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return (com.mycompany.vdm.services.APIPortalApplicationsCFService.DEFAULT_SERVICE_PATH);
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toApiProxies!= null) {
            (values).put("apiProxies", toApiProxies);
        }
        return values;
    }

    /**
     * Fetches the <b>APIProxy</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>apiProxies</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>APIProxy</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIProxy> fetchApiProxies()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type APIProxy.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("apiProxies");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<APIProxy> entityList = result.asList(APIProxy.class);
        for (APIProxy entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>APIProxy</b> entities (one to many). This corresponds to the OData navigation property <b>apiProxies</b>.
     * <p>
     * If the navigation property <b>apiProxies</b> of a queried <b>FileResource</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>APIProxy</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIProxy> getApiProxiesOrFetch()
        throws ODataException
    {
        if (toApiProxies == null) {
            toApiProxies = fetchApiProxies();
        }
        return toApiProxies;
    }

    /**
     * Retrieval of associated <b>APIProxy</b> entities (one to many). This corresponds to the OData navigation property <b>apiProxies</b>.
     * <p>
     * If the navigation property for an entity <b>FileResource</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>apiProxies</b> is already loaded, the result will contain the <b>APIProxy</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<APIProxy>> getApiProxiesIfPresent() {
        return Option.of(toApiProxies);
    }

    /**
     * Overwrites the list of associated <b>APIProxy</b> entities for the loaded navigation property <b>apiProxies</b>.
     * <p>
     * If the navigation property <b>apiProxies</b> of a queried <b>FileResource</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>APIProxy</b> entities.
     */
    public void setApiProxies(
        @Nonnull
        final List<APIProxy> value) {
        if (toApiProxies == null) {
            toApiProxies = Lists.newArrayList();
        }
        toApiProxies.clear();
        toApiProxies.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>APIProxy</b> entities. This corresponds to the OData navigation property <b>apiProxies</b>.
     * <p>
     * If the navigation property <b>apiProxies</b> of a queried <b>FileResource</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>APIProxy</b> entities.
     */
    public void addApiProxies(APIProxy... entity) {
        if (toApiProxies == null) {
            toApiProxies = Lists.newArrayList();
        }
        toApiProxies.addAll(Lists.newArrayList(entity));
    }


    /**
     * Helper class to allow for fluent creation of FileResource instances.
     * 
     */
    public final static class FileResourceBuilder {

        private List<APIProxy> toApiProxies = Lists.newArrayList();

        private FileResource.FileResourceBuilder toApiProxies(final List<APIProxy> value) {
            toApiProxies.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>apiProxies</b> for <b>FileResource</b> to multiple <b>APIProxy</b>.
         * 
         * @param value
         *     The APIProxys to build this FileResource with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public FileResource.FileResourceBuilder apiProxies(APIProxy... value) {
            return toApiProxies(Lists.newArrayList(value));
        }

    }

}
