
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.69.0
 */

package com.mycompany.vdm.namespaces.portalapplicationscf;

import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.mycompany.vdm.namespaces.portalapplicationscf.field.KeyMapEntryField;
import com.mycompany.vdm.namespaces.portalapplicationscf.link.KeyMapEntryLink;
import com.mycompany.vdm.namespaces.portalapplicationscf.selectable.KeyMapEntrySelectable;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpClientAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;
import com.sap.cloud.sdk.datamodel.odata.helper.ODataTypeValueSerializer;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.odatav2.connectivity.ODataException;
import com.sap.cloud.sdk.odatav2.connectivity.ODataExceptionType;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQuery;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryBuilder;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryResult;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.apache.http.client.HttpClient;
import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;


/**
 * <p>Original entity name from the Odata EDM: <b>KeyMapEntry</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class KeyMapEntry
    extends VdmEntity<KeyMapEntry>
{

    /**
     * Selector for all available fields of KeyMapEntry.
     * 
     */
    public final static KeyMapEntrySelectable ALL_FIELDS = () -> "*";
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>encrypted</b></p>
     * 
     * @return
     *     The encrypted contained in this entity.
     */
    @SerializedName("encrypted")
    @JsonProperty("encrypted")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "encrypted")
    private Boolean encrypted;
    /**
     * Use with available fluent helpers to apply the <b>encrypted</b> field to query operations.
     * 
     */
    public final static KeyMapEntryField<Boolean> ENCRYPTED = new KeyMapEntryField<Boolean>("encrypted");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @return
     *     The life_cycle contained in this entity.
     */
    @SerializedName("life_cycle")
    @JsonProperty("life_cycle")
    @Nullable
    @ODataField(odataName = "life_cycle")
    private History life_cycle;
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @return
     *     The name contained in this entity.
     */
    @Key
    @SerializedName("name")
    @JsonProperty("name")
    @Nullable
    @ODataField(odataName = "name")
    private String name;
    /**
     * Use with available fluent helpers to apply the <b>name</b> field to query operations.
     * 
     */
    public final static KeyMapEntryField<String> NAME = new KeyMapEntryField<String>("name");
    /**
     * Navigation property <b>keyMapEntryValues</b> for <b>KeyMapEntry</b> to multiple <b>KeyMapEntryValue</b>.
     * 
     */
    @SerializedName("keyMapEntryValues")
    @JsonProperty("keyMapEntryValues")
    @ODataField(odataName = "keyMapEntryValues")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<KeyMapEntryValue> toKeyMapEntryValues;
    /**
     * Use with available fluent helpers to apply the <b>keyMapEntryValues</b> navigation property to query operations.
     * 
     */
    public final static KeyMapEntryLink<KeyMapEntryValue> TO_KEY_MAP_ENTRY_VALUES = new KeyMapEntryLink<KeyMapEntryValue>("keyMapEntryValues");

    @Nonnull
    @Override
    public Class<KeyMapEntry> getType() {
        return KeyMapEntry.class;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>encrypted</b></p>
     * 
     * @param encrypted
     *     The encrypted to set.
     */
    public void setEncrypted(
        @Nullable
        final Boolean encrypted) {
        rememberChangedField("encrypted", this.encrypted);
        this.encrypted = encrypted;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @param life_cycle
     *     The life_cycle to set.
     */
    public void setLife_cycle(
        @Nullable
        final History life_cycle) {
        rememberChangedField("life_cycle", this.life_cycle);
        this.life_cycle = life_cycle;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @param name
     *     The name to set.
     */
    public void setName(
        @Nullable
        final String name) {
        rememberChangedField("name", this.name);
        this.name = name;
    }

    @Override
    protected String getEntityCollection() {
        return "KeyMapEntries";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("name", getName());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("encrypted", getEncrypted());
        values.put("life_cycle", getLife_cycle());
        values.put("name", getName());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("encrypted")) {
                final Object value = values.remove("encrypted");
                if ((value == null)||(!value.equals(getEncrypted()))) {
                    setEncrypted(((Boolean) value));
                }
            }
            if (values.containsKey("name")) {
                final Object value = values.remove("name");
                if ((value == null)||(!value.equals(getName()))) {
                    setName(((String) value));
                }
            }
        }
        // structured properties
        {
            if (values.containsKey("life_cycle")) {
                final Object value = values.remove("life_cycle");
                if (value instanceof Map) {
                    if (getLife_cycle() == null) {
                        setLife_cycle(new History());
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    getLife_cycle().fromMap(inputMap);
                }
                if ((value == null)&&(getLife_cycle()!= null)) {
                    setLife_cycle(null);
                }
            }
        }
        // navigation properties
        {
            if ((values).containsKey("keyMapEntryValues")) {
                final Object value = (values).remove("keyMapEntryValues");
                if (value instanceof Iterable) {
                    if (toKeyMapEntryValues == null) {
                        toKeyMapEntryValues = Lists.newArrayList();
                    } else {
                        toKeyMapEntryValues = Lists.newArrayList(toKeyMapEntryValues);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        KeyMapEntryValue entity;
                        if (toKeyMapEntryValues.size()>i) {
                            entity = toKeyMapEntryValues.get(i);
                        } else {
                            entity = new KeyMapEntryValue();
                            toKeyMapEntryValues.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >KeyMapEntryField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new KeyMapEntryField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >KeyMapEntryField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new KeyMapEntryField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public HttpDestinationProperties getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final HttpDestinationProperties destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return (com.mycompany.vdm.services.APIPortalApplicationsCFService.DEFAULT_SERVICE_PATH);
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toKeyMapEntryValues!= null) {
            (values).put("keyMapEntryValues", toKeyMapEntryValues);
        }
        return values;
    }

    /**
     * Fetches the <b>KeyMapEntryValue</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>keyMapEntryValues</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>KeyMapEntryValue</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<KeyMapEntryValue> fetchKeyMapEntryValues()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type KeyMapEntryValue.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("name=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(name));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("keyMapEntryValues");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<KeyMapEntryValue> entityList = result.asList(KeyMapEntryValue.class);
        for (KeyMapEntryValue entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>KeyMapEntryValue</b> entities (one to many). This corresponds to the OData navigation property <b>keyMapEntryValues</b>.
     * <p>
     * If the navigation property <b>keyMapEntryValues</b> of a queried <b>KeyMapEntry</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>KeyMapEntryValue</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<KeyMapEntryValue> getKeyMapEntryValuesOrFetch()
        throws ODataException
    {
        if (toKeyMapEntryValues == null) {
            toKeyMapEntryValues = fetchKeyMapEntryValues();
        }
        return toKeyMapEntryValues;
    }

    /**
     * Retrieval of associated <b>KeyMapEntryValue</b> entities (one to many). This corresponds to the OData navigation property <b>keyMapEntryValues</b>.
     * <p>
     * If the navigation property for an entity <b>KeyMapEntry</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>keyMapEntryValues</b> is already loaded, the result will contain the <b>KeyMapEntryValue</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<KeyMapEntryValue>> getKeyMapEntryValuesIfPresent() {
        return Option.of(toKeyMapEntryValues);
    }

    /**
     * Overwrites the list of associated <b>KeyMapEntryValue</b> entities for the loaded navigation property <b>keyMapEntryValues</b>.
     * <p>
     * If the navigation property <b>keyMapEntryValues</b> of a queried <b>KeyMapEntry</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>KeyMapEntryValue</b> entities.
     */
    public void setKeyMapEntryValues(
        @Nonnull
        final List<KeyMapEntryValue> value) {
        if (toKeyMapEntryValues == null) {
            toKeyMapEntryValues = Lists.newArrayList();
        }
        toKeyMapEntryValues.clear();
        toKeyMapEntryValues.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>KeyMapEntryValue</b> entities. This corresponds to the OData navigation property <b>keyMapEntryValues</b>.
     * <p>
     * If the navigation property <b>keyMapEntryValues</b> of a queried <b>KeyMapEntry</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>KeyMapEntryValue</b> entities.
     */
    public void addKeyMapEntryValues(KeyMapEntryValue... entity) {
        if (toKeyMapEntryValues == null) {
            toKeyMapEntryValues = Lists.newArrayList();
        }
        toKeyMapEntryValues.addAll(Lists.newArrayList(entity));
    }


    /**
     * Helper class to allow for fluent creation of KeyMapEntry instances.
     * 
     */
    public final static class KeyMapEntryBuilder {

        private List<KeyMapEntryValue> toKeyMapEntryValues = Lists.newArrayList();

        private KeyMapEntry.KeyMapEntryBuilder toKeyMapEntryValues(final List<KeyMapEntryValue> value) {
            toKeyMapEntryValues.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>keyMapEntryValues</b> for <b>KeyMapEntry</b> to multiple <b>KeyMapEntryValue</b>.
         * 
         * @param value
         *     The KeyMapEntryValues to build this KeyMapEntry with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public KeyMapEntry.KeyMapEntryBuilder keyMapEntryValues(KeyMapEntryValue... value) {
            return toKeyMapEntryValues(Lists.newArrayList(value));
        }

    }

}
