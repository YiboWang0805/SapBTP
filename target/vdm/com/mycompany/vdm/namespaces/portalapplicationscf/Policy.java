
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.69.0
 */

package com.mycompany.vdm.namespaces.portalapplicationscf;

import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.mycompany.vdm.namespaces.portalapplicationscf.field.PolicyField;
import com.mycompany.vdm.namespaces.portalapplicationscf.link.PolicyOneToOneLink;
import com.mycompany.vdm.namespaces.portalapplicationscf.selectable.PolicySelectable;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpClientAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;
import com.sap.cloud.sdk.datamodel.odata.helper.ODataTypeValueSerializer;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.odatav2.connectivity.ODataException;
import com.sap.cloud.sdk.odatav2.connectivity.ODataExceptionType;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQuery;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryBuilder;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryResult;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.apache.http.client.HttpClient;
import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;


/**
 * <p>Original entity name from the Odata EDM: <b>Policy</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class Policy
    extends VdmEntity<Policy>
{

    /**
     * Selector for all available fields of Policy.
     * 
     */
    public final static PolicySelectable ALL_FIELDS = () -> "*";
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>FK_API_NAME</b></p>
     * 
     * @return
     *     The fK_API_NAME contained in this entity.
     */
    @SerializedName("FK_API_NAME")
    @JsonProperty("FK_API_NAME")
    @Nullable
    @ODataField(odataName = "FK_API_NAME")
    private String fK_API_NAME;
    /**
     * Use with available fluent helpers to apply the <b>FK_API_NAME</b> field to query operations.
     * 
     */
    public final static PolicyField<String> FKAPINAME = new PolicyField<String>("FK_API_NAME");
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @return
     *     The id contained in this entity.
     */
    @Key
    @SerializedName("id")
    @JsonProperty("id")
    @Nullable
    @ODataField(odataName = "id")
    private String id;
    /**
     * Use with available fluent helpers to apply the <b>id</b> field to query operations.
     * 
     */
    public final static PolicyField<String> ID = new PolicyField<String>("id");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @return
     *     The life_cycle contained in this entity.
     */
    @SerializedName("life_cycle")
    @JsonProperty("life_cycle")
    @Nullable
    @ODataField(odataName = "life_cycle")
    private History life_cycle;
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @return
     *     The name contained in this entity.
     */
    @SerializedName("name")
    @JsonProperty("name")
    @Nullable
    @ODataField(odataName = "name")
    private String name;
    /**
     * Use with available fluent helpers to apply the <b>name</b> field to query operations.
     * 
     */
    public final static PolicyField<String> NAME = new PolicyField<String>("name");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>policy_content</b></p>
     * 
     * @return
     *     The policy_content contained in this entity.
     */
    @SerializedName("policy_content")
    @JsonProperty("policy_content")
    @Nullable
    @ODataField(odataName = "policy_content")
    private String policy_content;
    /**
     * Use with available fluent helpers to apply the <b>policy_content</b> field to query operations.
     * 
     */
    public final static PolicyField<String> POLICY_CONTENT = new PolicyField<String>("policy_content");
    /**
     * Constraints: Nullable, Maximum length: 40 <p>Original property name from the Odata EDM: <b>type</b></p>
     * 
     * @return
     *     The type_2 contained in this entity.
     */
    @SerializedName("type")
    @JsonProperty("type")
    @Nullable
    @ODataField(odataName = "type")
    private String type_2;
    /**
     * Use with available fluent helpers to apply the <b>type</b> field to query operations.
     * 
     */
    public final static PolicyField<String> TYPE_2 = new PolicyField<String>("type");
    /**
     * Navigation property <b>apiProxy</b> for <b>Policy</b> to single <b>APIProxy</b>.
     * 
     */
    @SerializedName("apiProxy")
    @JsonProperty("apiProxy")
    @ODataField(odataName = "apiProxy")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private APIProxy toApiProxy;
    /**
     * Use with available fluent helpers to apply the <b>apiProxy</b> navigation property to query operations.
     * 
     */
    public final static PolicyOneToOneLink<APIProxy> TO_API_PROXY = new PolicyOneToOneLink<APIProxy>("apiProxy");

    @Nonnull
    @Override
    public Class<Policy> getType() {
        return Policy.class;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>FK_API_NAME</b></p>
     * 
     * @param fK_API_NAME
     *     The fK_API_NAME to set.
     */
    public void setFK_API_NAME(
        @Nullable
        final String fK_API_NAME) {
        rememberChangedField("FK_API_NAME", this.fK_API_NAME);
        this.fK_API_NAME = fK_API_NAME;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @param id
     *     The id to set.
     */
    public void setId(
        @Nullable
        final String id) {
        rememberChangedField("id", this.id);
        this.id = id;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @param life_cycle
     *     The life_cycle to set.
     */
    public void setLife_cycle(
        @Nullable
        final History life_cycle) {
        rememberChangedField("life_cycle", this.life_cycle);
        this.life_cycle = life_cycle;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @param name
     *     The name to set.
     */
    public void setName(
        @Nullable
        final String name) {
        rememberChangedField("name", this.name);
        this.name = name;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>policy_content</b></p>
     * 
     * @param policy_content
     *     The policy_content to set.
     */
    public void setPolicy_content(
        @Nullable
        final String policy_content) {
        rememberChangedField("policy_content", this.policy_content);
        this.policy_content = policy_content;
    }

    /**
     * Constraints: Nullable, Maximum length: 40 <p>Original property name from the Odata EDM: <b>type</b></p>
     * 
     * @param type_2
     *     The type_2 to set.
     */
    public void setType_2(
        @Nullable
        final String type_2) {
        rememberChangedField("type", this.type_2);
        this.type_2 = type_2;
    }

    @Override
    protected String getEntityCollection() {
        return "Policies";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("id", getId());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("FK_API_NAME", getFK_API_NAME());
        values.put("id", getId());
        values.put("life_cycle", getLife_cycle());
        values.put("name", getName());
        values.put("policy_content", getPolicy_content());
        values.put("type", getType_2());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("FK_API_NAME")) {
                final Object value = values.remove("FK_API_NAME");
                if ((value == null)||(!value.equals(getFK_API_NAME()))) {
                    setFK_API_NAME(((String) value));
                }
            }
            if (values.containsKey("id")) {
                final Object value = values.remove("id");
                if ((value == null)||(!value.equals(getId()))) {
                    setId(((String) value));
                }
            }
            if (values.containsKey("name")) {
                final Object value = values.remove("name");
                if ((value == null)||(!value.equals(getName()))) {
                    setName(((String) value));
                }
            }
            if (values.containsKey("policy_content")) {
                final Object value = values.remove("policy_content");
                if ((value == null)||(!value.equals(getPolicy_content()))) {
                    setPolicy_content(((String) value));
                }
            }
            if (values.containsKey("type")) {
                final Object value = values.remove("type");
                if ((value == null)||(!value.equals(getType_2()))) {
                    setType_2(((String) value));
                }
            }
        }
        // structured properties
        {
            if (values.containsKey("life_cycle")) {
                final Object value = values.remove("life_cycle");
                if (value instanceof Map) {
                    if (getLife_cycle() == null) {
                        setLife_cycle(new History());
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    getLife_cycle().fromMap(inputMap);
                }
                if ((value == null)&&(getLife_cycle()!= null)) {
                    setLife_cycle(null);
                }
            }
        }
        // navigation properties
        {
            if ((values).containsKey("apiProxy")) {
                final Object value = (values).remove("apiProxy");
                if (value instanceof Map) {
                    if (toApiProxy == null) {
                        toApiProxy = new APIProxy();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toApiProxy.fromMap(inputMap);
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >PolicyField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new PolicyField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >PolicyField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new PolicyField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public HttpDestinationProperties getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final HttpDestinationProperties destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return (com.mycompany.vdm.services.APIPortalApplicationsCFService.DEFAULT_SERVICE_PATH);
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toApiProxy!= null) {
            (values).put("apiProxy", toApiProxy);
        }
        return values;
    }

    /**
     * Fetches the <b>APIProxy</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>apiProxy</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>APIProxy</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public APIProxy fetchApiProxy()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type APIProxy.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("apiProxy");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final APIProxy entity = result.as(APIProxy.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>APIProxy</b> entity (one to one). This corresponds to the OData navigation property <b>apiProxy</b>.
     * <p>
     * If the navigation property <b>apiProxy</b> of a queried <b>Policy</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>APIProxy</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public APIProxy getApiProxyOrFetch()
        throws ODataException
    {
        if (toApiProxy == null) {
            toApiProxy = fetchApiProxy();
        }
        return toApiProxy;
    }

    /**
     * Retrieval of associated <b>APIProxy</b> entity (one to one). This corresponds to the OData navigation property <b>apiProxy</b>.
     * <p>
     * If the navigation property for an entity <b>Policy</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>apiProxy</b> is already loaded, the result will contain the <b>APIProxy</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<APIProxy> getApiProxyIfPresent() {
        return Option.of(toApiProxy);
    }

    /**
     * Overwrites the associated <b>APIProxy</b> entity for the loaded navigation property <b>apiProxy</b>.
     * 
     * @param value
     *     New <b>APIProxy</b> entity.
     */
    public void setApiProxy(final APIProxy value) {
        toApiProxy = value;
    }


    /**
     * Helper class to allow for fluent creation of Policy instances.
     * 
     */
    public final static class PolicyBuilder {

        private APIProxy toApiProxy;

        private Policy.PolicyBuilder toApiProxy(final APIProxy value) {
            toApiProxy = value;
            return this;
        }

        /**
         * Navigation property <b>apiProxy</b> for <b>Policy</b> to single <b>APIProxy</b>.
         * 
         * @param value
         *     The APIProxy to build this Policy with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Policy.PolicyBuilder apiProxy(final APIProxy value) {
            return toApiProxy(value);
        }

    }

}
