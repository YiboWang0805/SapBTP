
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.69.0
 */

package com.mycompany.vdm.namespaces.portalapplicationscf;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.mycompany.vdm.namespaces.portalapplicationscf.field.RatePlanField;
import com.mycompany.vdm.namespaces.portalapplicationscf.link.RatePlanLink;
import com.mycompany.vdm.namespaces.portalapplicationscf.selectable.RatePlanSelectable;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpClientAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;
import com.sap.cloud.sdk.datamodel.odata.helper.ODataTypeValueSerializer;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.odatav2.connectivity.ODataException;
import com.sap.cloud.sdk.odatav2.connectivity.ODataExceptionType;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQuery;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryBuilder;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryResult;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.apache.http.client.HttpClient;
import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;


/**
 * <p>Original entity name from the Odata EDM: <b>RatePlan</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class RatePlan
    extends VdmEntity<RatePlan>
{

    /**
     * Selector for all available fields of RatePlan.
     * 
     */
    public final static RatePlanSelectable ALL_FIELDS = () -> "*";
    /**
     * Constraints: Not nullable, Maximum length: 50 <p>Original property name from the Odata EDM: <b>currency</b></p>
     * 
     * @return
     *     The currency contained in this entity.
     */
    @SerializedName("currency")
    @JsonProperty("currency")
    @Nullable
    @ODataField(odataName = "currency")
    private String currency;
    /**
     * Use with available fluent helpers to apply the <b>currency</b> field to query operations.
     * 
     */
    public final static RatePlanField<String> CURRENCY = new RatePlanField<String>("currency");
    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>frequency</b></p>
     * 
     * @return
     *     The frequency contained in this entity.
     */
    @SerializedName("frequency")
    @JsonProperty("frequency")
    @Nullable
    @ODataField(odataName = "frequency")
    private String frequency;
    /**
     * Use with available fluent helpers to apply the <b>frequency</b> field to query operations.
     * 
     */
    public final static RatePlanField<String> FREQUENCY = new RatePlanField<String>("frequency");
    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @return
     *     The id contained in this entity.
     */
    @Key
    @SerializedName("id")
    @JsonProperty("id")
    @Nullable
    @ODataField(odataName = "id")
    private String id;
    /**
     * Use with available fluent helpers to apply the <b>id</b> field to query operations.
     * 
     */
    public final static RatePlanField<String> ID = new RatePlanField<String>("id");
    /**
     * Constraints: Not nullable<p>Original property name from the Odata EDM: <b>isActive</b></p>
     * 
     * @return
     *     The isActive contained in this entity.
     */
    @SerializedName("isActive")
    @JsonProperty("isActive")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "isActive")
    private Boolean isActive;
    /**
     * Use with available fluent helpers to apply the <b>isActive</b> field to query operations.
     * 
     */
    public final static RatePlanField<Boolean> IS_ACTIVE = new RatePlanField<Boolean>("isActive");
    /**
     * Constraints: Not nullable<p>Original property name from the Odata EDM: <b>isPublished</b></p>
     * 
     * @return
     *     The isPublished contained in this entity.
     */
    @SerializedName("isPublished")
    @JsonProperty("isPublished")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "isPublished")
    private Boolean isPublished;
    /**
     * Use with available fluent helpers to apply the <b>isPublished</b> field to query operations.
     * 
     */
    public final static RatePlanField<Boolean> IS_PUBLISHED = new RatePlanField<Boolean>("isPublished");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>isSeasonal</b></p>
     * 
     * @return
     *     The isSeasonal contained in this entity.
     */
    @SerializedName("isSeasonal")
    @JsonProperty("isSeasonal")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "isSeasonal")
    private Boolean isSeasonal;
    /**
     * Use with available fluent helpers to apply the <b>isSeasonal</b> field to query operations.
     * 
     */
    public final static RatePlanField<Boolean> IS_SEASONAL = new RatePlanField<Boolean>("isSeasonal");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @return
     *     The life_cycle contained in this entity.
     */
    @SerializedName("life_cycle")
    @JsonProperty("life_cycle")
    @Nullable
    @ODataField(odataName = "life_cycle")
    private History life_cycle;
    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @return
     *     The name contained in this entity.
     */
    @SerializedName("name")
    @JsonProperty("name")
    @Nullable
    @ODataField(odataName = "name")
    private String name;
    /**
     * Use with available fluent helpers to apply the <b>name</b> field to query operations.
     * 
     */
    public final static RatePlanField<String> NAME = new RatePlanField<String>("name");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>rate</b></p>
     * 
     * @return
     *     The rate contained in this entity.
     */
    @SerializedName("rate")
    @JsonProperty("rate")
    @Nullable
    @ODataField(odataName = "rate")
    private String rate;
    /**
     * Use with available fluent helpers to apply the <b>rate</b> field to query operations.
     * 
     */
    public final static RatePlanField<String> RATE = new RatePlanField<String>("rate");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>type</b></p>
     * 
     * @return
     *     The type_2 contained in this entity.
     */
    @SerializedName("type")
    @JsonProperty("type")
    @Nullable
    @ODataField(odataName = "type")
    private String type_2;
    /**
     * Use with available fluent helpers to apply the <b>type</b> field to query operations.
     * 
     */
    public final static RatePlanField<String> TYPE_2 = new RatePlanField<String>("type");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>validFrom</b></p>
     * 
     * @return
     *     The validFrom contained in this entity.
     */
    @SerializedName("validFrom")
    @JsonProperty("validFrom")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeAdapter.class)
    @ODataField(odataName = "validFrom", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeCalendarConverter.class)
    private LocalDateTime validFrom;
    /**
     * Use with available fluent helpers to apply the <b>validFrom</b> field to query operations.
     * 
     */
    public final static RatePlanField<LocalDateTime> VALID_FROM = new RatePlanField<LocalDateTime>("validFrom");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>validTo</b></p>
     * 
     * @return
     *     The validTo contained in this entity.
     */
    @SerializedName("validTo")
    @JsonProperty("validTo")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeAdapter.class)
    @ODataField(odataName = "validTo", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeCalendarConverter.class)
    private LocalDateTime validTo;
    /**
     * Use with available fluent helpers to apply the <b>validTo</b> field to query operations.
     * 
     */
    public final static RatePlanField<LocalDateTime> VALID_TO = new RatePlanField<LocalDateTime>("validTo");
    /**
     * Constraints: Not nullable, Maximum length: 16000 <p>Original property name from the Odata EDM: <b>description</b></p>
     * 
     * @return
     *     The description contained in this entity.
     */
    @SerializedName("description")
    @JsonProperty("description")
    @Nullable
    @ODataField(odataName = "description")
    private String description;
    /**
     * Use with available fluent helpers to apply the <b>description</b> field to query operations.
     * 
     */
    public final static RatePlanField<String> DESCRIPTION = new RatePlanField<String>("description");
    /**
     * Navigation property <b>apiProducts</b> for <b>RatePlan</b> to multiple <b>APIProduct</b>.
     * 
     */
    @SerializedName("apiProducts")
    @JsonProperty("apiProducts")
    @ODataField(odataName = "apiProducts")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<APIProduct> toApiProducts;
    /**
     * Navigation property <b>resources</b> for <b>RatePlan</b> to multiple <b>Resource</b>.
     * 
     */
    @SerializedName("resources")
    @JsonProperty("resources")
    @ODataField(odataName = "resources")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Resource> toResources;
    /**
     * Use with available fluent helpers to apply the <b>apiProducts</b> navigation property to query operations.
     * 
     */
    public final static RatePlanLink<APIProduct> TO_API_PRODUCTS = new RatePlanLink<APIProduct>("apiProducts");
    /**
     * Use with available fluent helpers to apply the <b>resources</b> navigation property to query operations.
     * 
     */
    public final static RatePlanLink<Resource> TO_RESOURCES = new RatePlanLink<Resource>("resources");

    @Nonnull
    @Override
    public Class<RatePlan> getType() {
        return RatePlan.class;
    }

    /**
     * Constraints: Not nullable, Maximum length: 50 <p>Original property name from the Odata EDM: <b>currency</b></p>
     * 
     * @param currency
     *     The currency to set.
     */
    public void setCurrency(
        @Nullable
        final String currency) {
        rememberChangedField("currency", this.currency);
        this.currency = currency;
    }

    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>frequency</b></p>
     * 
     * @param frequency
     *     The frequency to set.
     */
    public void setFrequency(
        @Nullable
        final String frequency) {
        rememberChangedField("frequency", this.frequency);
        this.frequency = frequency;
    }

    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @param id
     *     The id to set.
     */
    public void setId(
        @Nullable
        final String id) {
        rememberChangedField("id", this.id);
        this.id = id;
    }

    /**
     * Constraints: Not nullable<p>Original property name from the Odata EDM: <b>isActive</b></p>
     * 
     * @param isActive
     *     The isActive to set.
     */
    public void setIsActive(
        @Nullable
        final Boolean isActive) {
        rememberChangedField("isActive", this.isActive);
        this.isActive = isActive;
    }

    /**
     * Constraints: Not nullable<p>Original property name from the Odata EDM: <b>isPublished</b></p>
     * 
     * @param isPublished
     *     The isPublished to set.
     */
    public void setIsPublished(
        @Nullable
        final Boolean isPublished) {
        rememberChangedField("isPublished", this.isPublished);
        this.isPublished = isPublished;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>isSeasonal</b></p>
     * 
     * @param isSeasonal
     *     The isSeasonal to set.
     */
    public void setIsSeasonal(
        @Nullable
        final Boolean isSeasonal) {
        rememberChangedField("isSeasonal", this.isSeasonal);
        this.isSeasonal = isSeasonal;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>life_cycle</b></p>
     * 
     * @param life_cycle
     *     The life_cycle to set.
     */
    public void setLife_cycle(
        @Nullable
        final History life_cycle) {
        rememberChangedField("life_cycle", this.life_cycle);
        this.life_cycle = life_cycle;
    }

    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @param name
     *     The name to set.
     */
    public void setName(
        @Nullable
        final String name) {
        rememberChangedField("name", this.name);
        this.name = name;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>rate</b></p>
     * 
     * @param rate
     *     The rate to set.
     */
    public void setRate(
        @Nullable
        final String rate) {
        rememberChangedField("rate", this.rate);
        this.rate = rate;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>type</b></p>
     * 
     * @param type_2
     *     The type_2 to set.
     */
    public void setType_2(
        @Nullable
        final String type_2) {
        rememberChangedField("type", this.type_2);
        this.type_2 = type_2;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>validFrom</b></p>
     * 
     * @param validFrom
     *     The validFrom to set.
     */
    public void setValidFrom(
        @Nullable
        final LocalDateTime validFrom) {
        rememberChangedField("validFrom", this.validFrom);
        this.validFrom = validFrom;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>validTo</b></p>
     * 
     * @param validTo
     *     The validTo to set.
     */
    public void setValidTo(
        @Nullable
        final LocalDateTime validTo) {
        rememberChangedField("validTo", this.validTo);
        this.validTo = validTo;
    }

    /**
     * Constraints: Not nullable, Maximum length: 16000 <p>Original property name from the Odata EDM: <b>description</b></p>
     * 
     * @param description
     *     The description to set.
     */
    public void setDescription(
        @Nullable
        final String description) {
        rememberChangedField("description", this.description);
        this.description = description;
    }

    @Override
    protected String getEntityCollection() {
        return "RatePlans";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("id", getId());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("currency", getCurrency());
        values.put("frequency", getFrequency());
        values.put("id", getId());
        values.put("isActive", getIsActive());
        values.put("isPublished", getIsPublished());
        values.put("isSeasonal", getIsSeasonal());
        values.put("life_cycle", getLife_cycle());
        values.put("name", getName());
        values.put("rate", getRate());
        values.put("type", getType_2());
        values.put("validFrom", getValidFrom());
        values.put("validTo", getValidTo());
        values.put("description", getDescription());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("currency")) {
                final Object value = values.remove("currency");
                if ((value == null)||(!value.equals(getCurrency()))) {
                    setCurrency(((String) value));
                }
            }
            if (values.containsKey("frequency")) {
                final Object value = values.remove("frequency");
                if ((value == null)||(!value.equals(getFrequency()))) {
                    setFrequency(((String) value));
                }
            }
            if (values.containsKey("id")) {
                final Object value = values.remove("id");
                if ((value == null)||(!value.equals(getId()))) {
                    setId(((String) value));
                }
            }
            if (values.containsKey("isActive")) {
                final Object value = values.remove("isActive");
                if ((value == null)||(!value.equals(getIsActive()))) {
                    setIsActive(((Boolean) value));
                }
            }
            if (values.containsKey("isPublished")) {
                final Object value = values.remove("isPublished");
                if ((value == null)||(!value.equals(getIsPublished()))) {
                    setIsPublished(((Boolean) value));
                }
            }
            if (values.containsKey("isSeasonal")) {
                final Object value = values.remove("isSeasonal");
                if ((value == null)||(!value.equals(getIsSeasonal()))) {
                    setIsSeasonal(((Boolean) value));
                }
            }
            if (values.containsKey("name")) {
                final Object value = values.remove("name");
                if ((value == null)||(!value.equals(getName()))) {
                    setName(((String) value));
                }
            }
            if (values.containsKey("rate")) {
                final Object value = values.remove("rate");
                if ((value == null)||(!value.equals(getRate()))) {
                    setRate(((String) value));
                }
            }
            if (values.containsKey("type")) {
                final Object value = values.remove("type");
                if ((value == null)||(!value.equals(getType_2()))) {
                    setType_2(((String) value));
                }
            }
            if (values.containsKey("validFrom")) {
                final Object value = values.remove("validFrom");
                if ((value == null)||(!value.equals(getValidFrom()))) {
                    setValidFrom(((LocalDateTime) value));
                }
            }
            if (values.containsKey("validTo")) {
                final Object value = values.remove("validTo");
                if ((value == null)||(!value.equals(getValidTo()))) {
                    setValidTo(((LocalDateTime) value));
                }
            }
            if (values.containsKey("description")) {
                final Object value = values.remove("description");
                if ((value == null)||(!value.equals(getDescription()))) {
                    setDescription(((String) value));
                }
            }
        }
        // structured properties
        {
            if (values.containsKey("life_cycle")) {
                final Object value = values.remove("life_cycle");
                if (value instanceof Map) {
                    if (getLife_cycle() == null) {
                        setLife_cycle(new History());
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    getLife_cycle().fromMap(inputMap);
                }
                if ((value == null)&&(getLife_cycle()!= null)) {
                    setLife_cycle(null);
                }
            }
        }
        // navigation properties
        {
            if ((values).containsKey("apiProducts")) {
                final Object value = (values).remove("apiProducts");
                if (value instanceof Iterable) {
                    if (toApiProducts == null) {
                        toApiProducts = Lists.newArrayList();
                    } else {
                        toApiProducts = Lists.newArrayList(toApiProducts);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        APIProduct entity;
                        if (toApiProducts.size()>i) {
                            entity = toApiProducts.get(i);
                        } else {
                            entity = new APIProduct();
                            toApiProducts.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("resources")) {
                final Object value = (values).remove("resources");
                if (value instanceof Iterable) {
                    if (toResources == null) {
                        toResources = Lists.newArrayList();
                    } else {
                        toResources = Lists.newArrayList(toResources);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Resource entity;
                        if (toResources.size()>i) {
                            entity = toResources.get(i);
                        } else {
                            entity = new Resource();
                            toResources.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >RatePlanField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new RatePlanField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >RatePlanField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new RatePlanField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public HttpDestinationProperties getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final HttpDestinationProperties destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return (com.mycompany.vdm.services.APIPortalApplicationsCFService.DEFAULT_SERVICE_PATH);
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toApiProducts!= null) {
            (values).put("apiProducts", toApiProducts);
        }
        if (toResources!= null) {
            (values).put("resources", toResources);
        }
        return values;
    }

    /**
     * Fetches the <b>APIProduct</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>apiProducts</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>APIProduct</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIProduct> fetchApiProducts()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type APIProduct.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("apiProducts");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<APIProduct> entityList = result.asList(APIProduct.class);
        for (APIProduct entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>APIProduct</b> entities (one to many). This corresponds to the OData navigation property <b>apiProducts</b>.
     * <p>
     * If the navigation property <b>apiProducts</b> of a queried <b>RatePlan</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>APIProduct</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<APIProduct> getApiProductsOrFetch()
        throws ODataException
    {
        if (toApiProducts == null) {
            toApiProducts = fetchApiProducts();
        }
        return toApiProducts;
    }

    /**
     * Retrieval of associated <b>APIProduct</b> entities (one to many). This corresponds to the OData navigation property <b>apiProducts</b>.
     * <p>
     * If the navigation property for an entity <b>RatePlan</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>apiProducts</b> is already loaded, the result will contain the <b>APIProduct</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<APIProduct>> getApiProductsIfPresent() {
        return Option.of(toApiProducts);
    }

    /**
     * Overwrites the list of associated <b>APIProduct</b> entities for the loaded navigation property <b>apiProducts</b>.
     * <p>
     * If the navigation property <b>apiProducts</b> of a queried <b>RatePlan</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>APIProduct</b> entities.
     */
    public void setApiProducts(
        @Nonnull
        final List<APIProduct> value) {
        if (toApiProducts == null) {
            toApiProducts = Lists.newArrayList();
        }
        toApiProducts.clear();
        toApiProducts.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>APIProduct</b> entities. This corresponds to the OData navigation property <b>apiProducts</b>.
     * <p>
     * If the navigation property <b>apiProducts</b> of a queried <b>RatePlan</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>APIProduct</b> entities.
     */
    public void addApiProducts(APIProduct... entity) {
        if (toApiProducts == null) {
            toApiProducts = Lists.newArrayList();
        }
        toApiProducts.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>Resource</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>Resource</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Resource> fetchResources()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type Resource.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("resources");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<Resource> entityList = result.asList(Resource.class);
        for (Resource entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>Resource</b> entities (one to many). This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * If the navigation property <b>resources</b> of a queried <b>RatePlan</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>Resource</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Resource> getResourcesOrFetch()
        throws ODataException
    {
        if (toResources == null) {
            toResources = fetchResources();
        }
        return toResources;
    }

    /**
     * Retrieval of associated <b>Resource</b> entities (one to many). This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * If the navigation property for an entity <b>RatePlan</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>resources</b> is already loaded, the result will contain the <b>Resource</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Resource>> getResourcesIfPresent() {
        return Option.of(toResources);
    }

    /**
     * Overwrites the list of associated <b>Resource</b> entities for the loaded navigation property <b>resources</b>.
     * <p>
     * If the navigation property <b>resources</b> of a queried <b>RatePlan</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>Resource</b> entities.
     */
    public void setResources(
        @Nonnull
        final List<Resource> value) {
        if (toResources == null) {
            toResources = Lists.newArrayList();
        }
        toResources.clear();
        toResources.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>Resource</b> entities. This corresponds to the OData navigation property <b>resources</b>.
     * <p>
     * If the navigation property <b>resources</b> of a queried <b>RatePlan</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Resource</b> entities.
     */
    public void addResources(Resource... entity) {
        if (toResources == null) {
            toResources = Lists.newArrayList();
        }
        toResources.addAll(Lists.newArrayList(entity));
    }


    /**
     * Helper class to allow for fluent creation of RatePlan instances.
     * 
     */
    public final static class RatePlanBuilder {

        private List<APIProduct> toApiProducts = Lists.newArrayList();
        private List<Resource> toResources = Lists.newArrayList();

        private RatePlan.RatePlanBuilder toApiProducts(final List<APIProduct> value) {
            toApiProducts.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>apiProducts</b> for <b>RatePlan</b> to multiple <b>APIProduct</b>.
         * 
         * @param value
         *     The APIProducts to build this RatePlan with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public RatePlan.RatePlanBuilder apiProducts(APIProduct... value) {
            return toApiProducts(Lists.newArrayList(value));
        }

        private RatePlan.RatePlanBuilder toResources(final List<Resource> value) {
            toResources.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>resources</b> for <b>RatePlan</b> to multiple <b>Resource</b>.
         * 
         * @param value
         *     The Resources to build this RatePlan with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public RatePlan.RatePlanBuilder resources(Resource... value) {
            return toResources(Lists.newArrayList(value));
        }

    }

}
