
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.69.0
 */

package com.mycompany.vdm.namespaces.portalapplicationscf;

import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.mycompany.vdm.namespaces.portalapplicationscf.field.ResourceField;
import com.mycompany.vdm.namespaces.portalapplicationscf.selectable.ResourceSelectable;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.ToString;


/**
 * <p>Original entity name from the Odata EDM: <b>Resource</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class Resource
    extends VdmEntity<Resource>
{

    /**
     * Selector for all available fields of Resource.
     * 
     */
    public final static ResourceSelectable ALL_FIELDS = () -> "*";
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 5 <p>Original property name from the Odata EDM: <b>locale</b></p>
     * 
     * @return
     *     The locale contained in this entity.
     */
    @Key
    @SerializedName("locale")
    @JsonProperty("locale")
    @Nullable
    @ODataField(odataName = "locale")
    private String locale;
    /**
     * Use with available fluent helpers to apply the <b>locale</b> field to query operations.
     * 
     */
    public final static ResourceField<String> LOCALE = new ResourceField<String>("locale");
    /**
     * Constraints: Nullable, Maximum length: 16000 <p>Original property name from the Odata EDM: <b>long_text</b></p>
     * 
     * @return
     *     The long_text contained in this entity.
     */
    @SerializedName("long_text")
    @JsonProperty("long_text")
    @Nullable
    @ODataField(odataName = "long_text")
    private String long_text;
    /**
     * Use with available fluent helpers to apply the <b>long_text</b> field to query operations.
     * 
     */
    public final static ResourceField<String> LONG_TEXT = new ResourceField<String>("long_text");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>medium_text</b></p>
     * 
     * @return
     *     The medium_text contained in this entity.
     */
    @SerializedName("medium_text")
    @JsonProperty("medium_text")
    @Nullable
    @ODataField(odataName = "medium_text")
    private String medium_text;
    /**
     * Use with available fluent helpers to apply the <b>medium_text</b> field to query operations.
     * 
     */
    public final static ResourceField<String> MEDIUM_TEXT = new ResourceField<String>("medium_text");
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>object_id</b></p>
     * 
     * @return
     *     The object_id contained in this entity.
     */
    @Key
    @SerializedName("object_id")
    @JsonProperty("object_id")
    @Nullable
    @ODataField(odataName = "object_id")
    private String object_id;
    /**
     * Use with available fluent helpers to apply the <b>object_id</b> field to query operations.
     * 
     */
    public final static ResourceField<String> OBJECT_ID = new ResourceField<String>("object_id");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>short_text</b></p>
     * 
     * @return
     *     The short_text contained in this entity.
     */
    @SerializedName("short_text")
    @JsonProperty("short_text")
    @Nullable
    @ODataField(odataName = "short_text")
    private String short_text;
    /**
     * Use with available fluent helpers to apply the <b>short_text</b> field to query operations.
     * 
     */
    public final static ResourceField<String> SHORT_TEXT = new ResourceField<String>("short_text");
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>type</b></p>
     * 
     * @return
     *     The type_2 contained in this entity.
     */
    @Key
    @SerializedName("type")
    @JsonProperty("type")
    @Nullable
    @ODataField(odataName = "type")
    private String type_2;
    /**
     * Use with available fluent helpers to apply the <b>type</b> field to query operations.
     * 
     */
    public final static ResourceField<String> TYPE_2 = new ResourceField<String>("type");

    @Nonnull
    @Override
    public Class<Resource> getType() {
        return Resource.class;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 5 <p>Original property name from the Odata EDM: <b>locale</b></p>
     * 
     * @param locale
     *     The locale to set.
     */
    public void setLocale(
        @Nullable
        final String locale) {
        rememberChangedField("locale", this.locale);
        this.locale = locale;
    }

    /**
     * Constraints: Nullable, Maximum length: 16000 <p>Original property name from the Odata EDM: <b>long_text</b></p>
     * 
     * @param long_text
     *     The long_text to set.
     */
    public void setLong_text(
        @Nullable
        final String long_text) {
        rememberChangedField("long_text", this.long_text);
        this.long_text = long_text;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>medium_text</b></p>
     * 
     * @param medium_text
     *     The medium_text to set.
     */
    public void setMedium_text(
        @Nullable
        final String medium_text) {
        rememberChangedField("medium_text", this.medium_text);
        this.medium_text = medium_text;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>object_id</b></p>
     * 
     * @param object_id
     *     The object_id to set.
     */
    public void setObject_id(
        @Nullable
        final String object_id) {
        rememberChangedField("object_id", this.object_id);
        this.object_id = object_id;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>short_text</b></p>
     * 
     * @param short_text
     *     The short_text to set.
     */
    public void setShort_text(
        @Nullable
        final String short_text) {
        rememberChangedField("short_text", this.short_text);
        this.short_text = short_text;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>type</b></p>
     * 
     * @param type_2
     *     The type_2 to set.
     */
    public void setType_2(
        @Nullable
        final String type_2) {
        rememberChangedField("type", this.type_2);
        this.type_2 = type_2;
    }

    @Override
    protected String getEntityCollection() {
        return "Resources";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("locale", getLocale());
        result.put("object_id", getObject_id());
        result.put("type", getType_2());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("locale", getLocale());
        values.put("long_text", getLong_text());
        values.put("medium_text", getMedium_text());
        values.put("object_id", getObject_id());
        values.put("short_text", getShort_text());
        values.put("type", getType_2());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("locale")) {
                final Object value = values.remove("locale");
                if ((value == null)||(!value.equals(getLocale()))) {
                    setLocale(((String) value));
                }
            }
            if (values.containsKey("long_text")) {
                final Object value = values.remove("long_text");
                if ((value == null)||(!value.equals(getLong_text()))) {
                    setLong_text(((String) value));
                }
            }
            if (values.containsKey("medium_text")) {
                final Object value = values.remove("medium_text");
                if ((value == null)||(!value.equals(getMedium_text()))) {
                    setMedium_text(((String) value));
                }
            }
            if (values.containsKey("object_id")) {
                final Object value = values.remove("object_id");
                if ((value == null)||(!value.equals(getObject_id()))) {
                    setObject_id(((String) value));
                }
            }
            if (values.containsKey("short_text")) {
                final Object value = values.remove("short_text");
                if ((value == null)||(!value.equals(getShort_text()))) {
                    setShort_text(((String) value));
                }
            }
            if (values.containsKey("type")) {
                final Object value = values.remove("type");
                if ((value == null)||(!value.equals(getType_2()))) {
                    setType_2(((String) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >ResourceField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new ResourceField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >ResourceField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new ResourceField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public HttpDestinationProperties getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final HttpDestinationProperties destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return (com.mycompany.vdm.services.APIPortalApplicationsCFService.DEFAULT_SERVICE_PATH);
    }

}
