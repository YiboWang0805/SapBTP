
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.69.0
 */

package com.mycompany.vdm.namespaces.portalapplicationscf;

import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.mycompany.vdm.namespaces.portalapplicationscf.field.StepField;
import com.mycompany.vdm.namespaces.portalapplicationscf.link.StepOneToOneLink;
import com.mycompany.vdm.namespaces.portalapplicationscf.selectable.StepSelectable;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpClientAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;
import com.sap.cloud.sdk.datamodel.odata.helper.ODataTypeValueSerializer;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.odatav2.connectivity.ODataException;
import com.sap.cloud.sdk.odatav2.connectivity.ODataExceptionType;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQuery;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryBuilder;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryResult;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.apache.http.client.HttpClient;
import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;


/**
 * <p>Original entity name from the Odata EDM: <b>Step</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class Step
    extends VdmEntity<Step>
{

    /**
     * Selector for all available fields of Step.
     * 
     */
    public final static StepSelectable ALL_FIELDS = () -> "*";
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>condition</b></p>
     * 
     * @return
     *     The condition contained in this entity.
     */
    @SerializedName("condition")
    @JsonProperty("condition")
    @Nullable
    @ODataField(odataName = "condition")
    private String condition;
    /**
     * Use with available fluent helpers to apply the <b>condition</b> field to query operations.
     * 
     */
    public final static StepField<String> CONDITION = new StepField<String>("condition");
    /**
     * Constraints: Nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>FK_DEFAULTFAULTRULE_ID</b></p>
     * 
     * @return
     *     The fK_DEFAULTFAULTRULE_ID contained in this entity.
     */
    @SerializedName("FK_DEFAULTFAULTRULE_ID")
    @JsonProperty("FK_DEFAULTFAULTRULE_ID")
    @Nullable
    @ODataField(odataName = "FK_DEFAULTFAULTRULE_ID")
    private String fK_DEFAULTFAULTRULE_ID;
    /**
     * Use with available fluent helpers to apply the <b>FK_DEFAULTFAULTRULE_ID</b> field to query operations.
     * 
     */
    public final static StepField<String> FKDEFAULTFAULTRULEID = new StepField<String>("FK_DEFAULTFAULTRULE_ID");
    /**
     * Constraints: Nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>FK_FAULTRULE_ID</b></p>
     * 
     * @return
     *     The fK_FAULTRULE_ID contained in this entity.
     */
    @SerializedName("FK_FAULTRULE_ID")
    @JsonProperty("FK_FAULTRULE_ID")
    @Nullable
    @ODataField(odataName = "FK_FAULTRULE_ID")
    private String fK_FAULTRULE_ID;
    /**
     * Use with available fluent helpers to apply the <b>FK_FAULTRULE_ID</b> field to query operations.
     * 
     */
    public final static StepField<String> FKFAULTRULEID = new StepField<String>("FK_FAULTRULE_ID");
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @return
     *     The id contained in this entity.
     */
    @Key
    @SerializedName("id")
    @JsonProperty("id")
    @Nullable
    @ODataField(odataName = "id")
    private String id;
    /**
     * Use with available fluent helpers to apply the <b>id</b> field to query operations.
     * 
     */
    public final static StepField<String> ID = new StepField<String>("id");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>policy_name</b></p>
     * 
     * @return
     *     The policy_name contained in this entity.
     */
    @SerializedName("policy_name")
    @JsonProperty("policy_name")
    @Nullable
    @ODataField(odataName = "policy_name")
    private String policy_name;
    /**
     * Use with available fluent helpers to apply the <b>policy_name</b> field to query operations.
     * 
     */
    public final static StepField<String> POLICY_NAME = new StepField<String>("policy_name");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>sequence</b></p>
     * 
     * @return
     *     The sequence contained in this entity.
     */
    @SerializedName("sequence")
    @JsonProperty("sequence")
    @Nullable
    @ODataField(odataName = "sequence")
    private Integer sequence;
    /**
     * Use with available fluent helpers to apply the <b>sequence</b> field to query operations.
     * 
     */
    public final static StepField<Integer> SEQUENCE = new StepField<Integer>("sequence");
    /**
     * Constraints: Nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>FK_STREAM_ID</b></p>
     * 
     * @return
     *     The fK_STREAM_ID contained in this entity.
     */
    @SerializedName("FK_STREAM_ID")
    @JsonProperty("FK_STREAM_ID")
    @Nullable
    @ODataField(odataName = "FK_STREAM_ID")
    private String fK_STREAM_ID;
    /**
     * Use with available fluent helpers to apply the <b>FK_STREAM_ID</b> field to query operations.
     * 
     */
    public final static StepField<String> FKSTREAMID = new StepField<String>("FK_STREAM_ID");
    /**
     * Navigation property <b>defaultFaultRule</b> for <b>Step</b> to single <b>DefaultFaultRule</b>.
     * 
     */
    @SerializedName("defaultFaultRule")
    @JsonProperty("defaultFaultRule")
    @ODataField(odataName = "defaultFaultRule")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private DefaultFaultRule toDefaultFaultRule;
    /**
     * Navigation property <b>faultRule</b> for <b>Step</b> to single <b>FaultRule</b>.
     * 
     */
    @SerializedName("faultRule")
    @JsonProperty("faultRule")
    @ODataField(odataName = "faultRule")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private FaultRule toFaultRule;
    /**
     * Navigation property <b>stream</b> for <b>Step</b> to single <b>Stream</b>.
     * 
     */
    @SerializedName("stream")
    @JsonProperty("stream")
    @ODataField(odataName = "stream")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private Stream toStream;
    /**
     * Use with available fluent helpers to apply the <b>defaultFaultRule</b> navigation property to query operations.
     * 
     */
    public final static StepOneToOneLink<DefaultFaultRule> TO_DEFAULT_FAULT_RULE = new StepOneToOneLink<DefaultFaultRule>("defaultFaultRule");
    /**
     * Use with available fluent helpers to apply the <b>faultRule</b> navigation property to query operations.
     * 
     */
    public final static StepOneToOneLink<FaultRule> TO_FAULT_RULE = new StepOneToOneLink<FaultRule>("faultRule");
    /**
     * Use with available fluent helpers to apply the <b>stream</b> navigation property to query operations.
     * 
     */
    public final static StepOneToOneLink<Stream> TO_STREAM = new StepOneToOneLink<Stream>("stream");

    @Nonnull
    @Override
    public Class<Step> getType() {
        return Step.class;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>condition</b></p>
     * 
     * @param condition
     *     The condition to set.
     */
    public void setCondition(
        @Nullable
        final String condition) {
        rememberChangedField("condition", this.condition);
        this.condition = condition;
    }

    /**
     * Constraints: Nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>FK_DEFAULTFAULTRULE_ID</b></p>
     * 
     * @param fK_DEFAULTFAULTRULE_ID
     *     The fK_DEFAULTFAULTRULE_ID to set.
     */
    public void setFK_DEFAULTFAULTRULE_ID(
        @Nullable
        final String fK_DEFAULTFAULTRULE_ID) {
        rememberChangedField("FK_DEFAULTFAULTRULE_ID", this.fK_DEFAULTFAULTRULE_ID);
        this.fK_DEFAULTFAULTRULE_ID = fK_DEFAULTFAULTRULE_ID;
    }

    /**
     * Constraints: Nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>FK_FAULTRULE_ID</b></p>
     * 
     * @param fK_FAULTRULE_ID
     *     The fK_FAULTRULE_ID to set.
     */
    public void setFK_FAULTRULE_ID(
        @Nullable
        final String fK_FAULTRULE_ID) {
        rememberChangedField("FK_FAULTRULE_ID", this.fK_FAULTRULE_ID);
        this.fK_FAULTRULE_ID = fK_FAULTRULE_ID;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @param id
     *     The id to set.
     */
    public void setId(
        @Nullable
        final String id) {
        rememberChangedField("id", this.id);
        this.id = id;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>policy_name</b></p>
     * 
     * @param policy_name
     *     The policy_name to set.
     */
    public void setPolicy_name(
        @Nullable
        final String policy_name) {
        rememberChangedField("policy_name", this.policy_name);
        this.policy_name = policy_name;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>sequence</b></p>
     * 
     * @param sequence
     *     The sequence to set.
     */
    public void setSequence(
        @Nullable
        final Integer sequence) {
        rememberChangedField("sequence", this.sequence);
        this.sequence = sequence;
    }

    /**
     * Constraints: Nullable, Maximum length: 36 <p>Original property name from the Odata EDM: <b>FK_STREAM_ID</b></p>
     * 
     * @param fK_STREAM_ID
     *     The fK_STREAM_ID to set.
     */
    public void setFK_STREAM_ID(
        @Nullable
        final String fK_STREAM_ID) {
        rememberChangedField("FK_STREAM_ID", this.fK_STREAM_ID);
        this.fK_STREAM_ID = fK_STREAM_ID;
    }

    @Override
    protected String getEntityCollection() {
        return "Steps";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("id", getId());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("condition", getCondition());
        values.put("FK_DEFAULTFAULTRULE_ID", getFK_DEFAULTFAULTRULE_ID());
        values.put("FK_FAULTRULE_ID", getFK_FAULTRULE_ID());
        values.put("id", getId());
        values.put("policy_name", getPolicy_name());
        values.put("sequence", getSequence());
        values.put("FK_STREAM_ID", getFK_STREAM_ID());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("condition")) {
                final Object value = values.remove("condition");
                if ((value == null)||(!value.equals(getCondition()))) {
                    setCondition(((String) value));
                }
            }
            if (values.containsKey("FK_DEFAULTFAULTRULE_ID")) {
                final Object value = values.remove("FK_DEFAULTFAULTRULE_ID");
                if ((value == null)||(!value.equals(getFK_DEFAULTFAULTRULE_ID()))) {
                    setFK_DEFAULTFAULTRULE_ID(((String) value));
                }
            }
            if (values.containsKey("FK_FAULTRULE_ID")) {
                final Object value = values.remove("FK_FAULTRULE_ID");
                if ((value == null)||(!value.equals(getFK_FAULTRULE_ID()))) {
                    setFK_FAULTRULE_ID(((String) value));
                }
            }
            if (values.containsKey("id")) {
                final Object value = values.remove("id");
                if ((value == null)||(!value.equals(getId()))) {
                    setId(((String) value));
                }
            }
            if (values.containsKey("policy_name")) {
                final Object value = values.remove("policy_name");
                if ((value == null)||(!value.equals(getPolicy_name()))) {
                    setPolicy_name(((String) value));
                }
            }
            if (values.containsKey("sequence")) {
                final Object value = values.remove("sequence");
                if ((value == null)||(!value.equals(getSequence()))) {
                    setSequence(((Integer) value));
                }
            }
            if (values.containsKey("FK_STREAM_ID")) {
                final Object value = values.remove("FK_STREAM_ID");
                if ((value == null)||(!value.equals(getFK_STREAM_ID()))) {
                    setFK_STREAM_ID(((String) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
            if ((values).containsKey("defaultFaultRule")) {
                final Object value = (values).remove("defaultFaultRule");
                if (value instanceof Map) {
                    if (toDefaultFaultRule == null) {
                        toDefaultFaultRule = new DefaultFaultRule();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toDefaultFaultRule.fromMap(inputMap);
                }
            }
            if ((values).containsKey("faultRule")) {
                final Object value = (values).remove("faultRule");
                if (value instanceof Map) {
                    if (toFaultRule == null) {
                        toFaultRule = new FaultRule();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toFaultRule.fromMap(inputMap);
                }
            }
            if ((values).containsKey("stream")) {
                final Object value = (values).remove("stream");
                if (value instanceof Map) {
                    if (toStream == null) {
                        toStream = new Stream();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toStream.fromMap(inputMap);
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >StepField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new StepField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >StepField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new StepField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public HttpDestinationProperties getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final HttpDestinationProperties destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return (com.mycompany.vdm.services.APIPortalApplicationsCFService.DEFAULT_SERVICE_PATH);
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toDefaultFaultRule!= null) {
            (values).put("defaultFaultRule", toDefaultFaultRule);
        }
        if (toFaultRule!= null) {
            (values).put("faultRule", toFaultRule);
        }
        if (toStream!= null) {
            (values).put("stream", toStream);
        }
        return values;
    }

    /**
     * Fetches the <b>DefaultFaultRule</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>defaultFaultRule</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>DefaultFaultRule</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public DefaultFaultRule fetchDefaultFaultRule()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type DefaultFaultRule.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("defaultFaultRule");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final DefaultFaultRule entity = result.as(DefaultFaultRule.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>DefaultFaultRule</b> entity (one to one). This corresponds to the OData navigation property <b>defaultFaultRule</b>.
     * <p>
     * If the navigation property <b>defaultFaultRule</b> of a queried <b>Step</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>DefaultFaultRule</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public DefaultFaultRule getDefaultFaultRuleOrFetch()
        throws ODataException
    {
        if (toDefaultFaultRule == null) {
            toDefaultFaultRule = fetchDefaultFaultRule();
        }
        return toDefaultFaultRule;
    }

    /**
     * Retrieval of associated <b>DefaultFaultRule</b> entity (one to one). This corresponds to the OData navigation property <b>defaultFaultRule</b>.
     * <p>
     * If the navigation property for an entity <b>Step</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>defaultFaultRule</b> is already loaded, the result will contain the <b>DefaultFaultRule</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<DefaultFaultRule> getDefaultFaultRuleIfPresent() {
        return Option.of(toDefaultFaultRule);
    }

    /**
     * Overwrites the associated <b>DefaultFaultRule</b> entity for the loaded navigation property <b>defaultFaultRule</b>.
     * 
     * @param value
     *     New <b>DefaultFaultRule</b> entity.
     */
    public void setDefaultFaultRule(final DefaultFaultRule value) {
        toDefaultFaultRule = value;
    }

    /**
     * Fetches the <b>FaultRule</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>faultRule</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>FaultRule</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public FaultRule fetchFaultRule()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type FaultRule.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("faultRule");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final FaultRule entity = result.as(FaultRule.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>FaultRule</b> entity (one to one). This corresponds to the OData navigation property <b>faultRule</b>.
     * <p>
     * If the navigation property <b>faultRule</b> of a queried <b>Step</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>FaultRule</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public FaultRule getFaultRuleOrFetch()
        throws ODataException
    {
        if (toFaultRule == null) {
            toFaultRule = fetchFaultRule();
        }
        return toFaultRule;
    }

    /**
     * Retrieval of associated <b>FaultRule</b> entity (one to one). This corresponds to the OData navigation property <b>faultRule</b>.
     * <p>
     * If the navigation property for an entity <b>Step</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>faultRule</b> is already loaded, the result will contain the <b>FaultRule</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<FaultRule> getFaultRuleIfPresent() {
        return Option.of(toFaultRule);
    }

    /**
     * Overwrites the associated <b>FaultRule</b> entity for the loaded navigation property <b>faultRule</b>.
     * 
     * @param value
     *     New <b>FaultRule</b> entity.
     */
    public void setFaultRule(final FaultRule value) {
        toFaultRule = value;
    }

    /**
     * Fetches the <b>Stream</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>stream</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>Stream</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public Stream fetchStream()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type Stream.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("stream");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final Stream entity = result.as(Stream.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>Stream</b> entity (one to one). This corresponds to the OData navigation property <b>stream</b>.
     * <p>
     * If the navigation property <b>stream</b> of a queried <b>Step</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>Stream</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public Stream getStreamOrFetch()
        throws ODataException
    {
        if (toStream == null) {
            toStream = fetchStream();
        }
        return toStream;
    }

    /**
     * Retrieval of associated <b>Stream</b> entity (one to one). This corresponds to the OData navigation property <b>stream</b>.
     * <p>
     * If the navigation property for an entity <b>Step</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>stream</b> is already loaded, the result will contain the <b>Stream</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<Stream> getStreamIfPresent() {
        return Option.of(toStream);
    }

    /**
     * Overwrites the associated <b>Stream</b> entity for the loaded navigation property <b>stream</b>.
     * 
     * @param value
     *     New <b>Stream</b> entity.
     */
    public void setStream(final Stream value) {
        toStream = value;
    }


    /**
     * Helper class to allow for fluent creation of Step instances.
     * 
     */
    public final static class StepBuilder {

        private DefaultFaultRule toDefaultFaultRule;
        private FaultRule toFaultRule;
        private Stream toStream;

        private Step.StepBuilder toDefaultFaultRule(final DefaultFaultRule value) {
            toDefaultFaultRule = value;
            return this;
        }

        /**
         * Navigation property <b>defaultFaultRule</b> for <b>Step</b> to single <b>DefaultFaultRule</b>.
         * 
         * @param value
         *     The DefaultFaultRule to build this Step with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Step.StepBuilder defaultFaultRule(final DefaultFaultRule value) {
            return toDefaultFaultRule(value);
        }

        private Step.StepBuilder toFaultRule(final FaultRule value) {
            toFaultRule = value;
            return this;
        }

        /**
         * Navigation property <b>faultRule</b> for <b>Step</b> to single <b>FaultRule</b>.
         * 
         * @param value
         *     The FaultRule to build this Step with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Step.StepBuilder faultRule(final FaultRule value) {
            return toFaultRule(value);
        }

        private Step.StepBuilder toStream(final Stream value) {
            toStream = value;
            return this;
        }

        /**
         * Navigation property <b>stream</b> for <b>Step</b> to single <b>Stream</b>.
         * 
         * @param value
         *     The Stream to build this Step with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Step.StepBuilder stream(final Stream value) {
            return toStream(value);
        }

    }

}
