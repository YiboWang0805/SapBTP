
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.69.0
 */

package com.mycompany.vdm.namespaces.portalapplicationscf.batch;

import javax.annotation.Nonnull;
import com.mycompany.vdm.namespaces.portalapplicationscf.ACLProductLinkage;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProduct;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProvider;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProxy;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProxyEndPoint;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIResource;
import com.mycompany.vdm.namespaces.portalapplicationscf.APITargetEndPoint;
import com.mycompany.vdm.namespaces.portalapplicationscf.Application;
import com.mycompany.vdm.namespaces.portalapplicationscf.Bill;
import com.mycompany.vdm.namespaces.portalapplicationscf.CacheResource;
import com.mycompany.vdm.namespaces.portalapplicationscf.Certificate;
import com.mycompany.vdm.namespaces.portalapplicationscf.CertificateStore;
import com.mycompany.vdm.namespaces.portalapplicationscf.ConditionalFlowRule;
import com.mycompany.vdm.namespaces.portalapplicationscf.ContentPackageMapper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DefaultFaultRule;
import com.mycompany.vdm.namespaces.portalapplicationscf.DestinationAndUrlMapping;
import com.mycompany.vdm.namespaces.portalapplicationscf.Developer;
import com.mycompany.vdm.namespaces.portalapplicationscf.Documentation;
import com.mycompany.vdm.namespaces.portalapplicationscf.EndPointProperty;
import com.mycompany.vdm.namespaces.portalapplicationscf.FaultRule;
import com.mycompany.vdm.namespaces.portalapplicationscf.FileResource;
import com.mycompany.vdm.namespaces.portalapplicationscf.FlowRule;
import com.mycompany.vdm.namespaces.portalapplicationscf.KeyMapEntry;
import com.mycompany.vdm.namespaces.portalapplicationscf.KeyMapEntryValue;
import com.mycompany.vdm.namespaces.portalapplicationscf.Policy;
import com.mycompany.vdm.namespaces.portalapplicationscf.PolicyTemplateContainer;
import com.mycompany.vdm.namespaces.portalapplicationscf.RatePlan;
import com.mycompany.vdm.namespaces.portalapplicationscf.Resource;
import com.mycompany.vdm.namespaces.portalapplicationscf.RouteRule;
import com.mycompany.vdm.namespaces.portalapplicationscf.Step;
import com.mycompany.vdm.namespaces.portalapplicationscf.Stream;
import com.mycompany.vdm.namespaces.portalapplicationscf.TemplateFileResource;
import com.mycompany.vdm.namespaces.portalapplicationscf.TemplatePolicy;
import com.mycompany.vdm.namespaces.portalapplicationscf.VirtualHost;
import com.sap.cloud.sdk.datamodel.odata.helper.batch.BatchChangeSetFluentHelperBasic;


/**
 * Implementation of the {@link APIPortalApplicationsCFServiceBatchChangeSet} interface, enabling you to combine multiple operations into one changeset. For further information have a look into the {@link com.mycompany.vdm.services.APIPortalApplicationsCFService APIPortalApplicationsCFService}.
 * 
 */
public class DefaultAPIPortalApplicationsCFServiceBatchChangeSet
    extends BatchChangeSetFluentHelperBasic<APIPortalApplicationsCFServiceBatch, APIPortalApplicationsCFServiceBatchChangeSet>
    implements APIPortalApplicationsCFServiceBatchChangeSet
{

    @Nonnull
    private final com.mycompany.vdm.services.APIPortalApplicationsCFService service;

    DefaultAPIPortalApplicationsCFServiceBatchChangeSet(
        @Nonnull
        final DefaultAPIPortalApplicationsCFServiceBatch batchFluentHelper,
        @Nonnull
        final com.mycompany.vdm.services.APIPortalApplicationsCFService service) {
        super(batchFluentHelper, batchFluentHelper);
        this.service = service;
    }

    @Nonnull
    @Override
    protected DefaultAPIPortalApplicationsCFServiceBatchChangeSet getThis() {
        return this;
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createKeyMapEntries(
        @Nonnull
        final KeyMapEntry keyMapEntry) {
        return addRequestCreate(service::createKeyMapEntries, keyMapEntry);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateKeyMapEntries(
        @Nonnull
        final KeyMapEntry keyMapEntry) {
        return addRequestUpdate(service::updateKeyMapEntries, keyMapEntry);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteKeyMapEntries(
        @Nonnull
        final KeyMapEntry keyMapEntry) {
        return addRequestDelete(service::deleteKeyMapEntries, keyMapEntry);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createVirtualHosts(
        @Nonnull
        final VirtualHost virtualHost) {
        return addRequestCreate(service::createVirtualHosts, virtualHost);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateVirtualHosts(
        @Nonnull
        final VirtualHost virtualHost) {
        return addRequestUpdate(service::updateVirtualHosts, virtualHost);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteVirtualHosts(
        @Nonnull
        final VirtualHost virtualHost) {
        return addRequestDelete(service::deleteVirtualHosts, virtualHost);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createFlowRules(
        @Nonnull
        final FlowRule flowRule) {
        return addRequestCreate(service::createFlowRules, flowRule);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateFlowRules(
        @Nonnull
        final FlowRule flowRule) {
        return addRequestUpdate(service::updateFlowRules, flowRule);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteFlowRules(
        @Nonnull
        final FlowRule flowRule) {
        return addRequestDelete(service::deleteFlowRules, flowRule);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createTemplateFileResources(
        @Nonnull
        final TemplateFileResource templateFileResource) {
        return addRequestCreate(service::createTemplateFileResources, templateFileResource);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateTemplateFileResources(
        @Nonnull
        final TemplateFileResource templateFileResource) {
        return addRequestUpdate(service::updateTemplateFileResources, templateFileResource);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteTemplateFileResources(
        @Nonnull
        final TemplateFileResource templateFileResource) {
        return addRequestDelete(service::deleteTemplateFileResources, templateFileResource);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createACLProductLinkages(
        @Nonnull
        final ACLProductLinkage aCLProductLinkage) {
        return addRequestCreate(service::createACLProductLinkages, aCLProductLinkage);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateACLProductLinkages(
        @Nonnull
        final ACLProductLinkage aCLProductLinkage) {
        return addRequestUpdate(service::updateACLProductLinkages, aCLProductLinkage);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteACLProductLinkages(
        @Nonnull
        final ACLProductLinkage aCLProductLinkage) {
        return addRequestDelete(service::deleteACLProductLinkages, aCLProductLinkage);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createAPIProxyEndPoints(
        @Nonnull
        final APIProxyEndPoint aPIProxyEndPoint) {
        return addRequestCreate(service::createAPIProxyEndPoints, aPIProxyEndPoint);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateAPIProxyEndPoints(
        @Nonnull
        final APIProxyEndPoint aPIProxyEndPoint) {
        return addRequestUpdate(service::updateAPIProxyEndPoints, aPIProxyEndPoint);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteAPIProxyEndPoints(
        @Nonnull
        final APIProxyEndPoint aPIProxyEndPoint) {
        return addRequestDelete(service::deleteAPIProxyEndPoints, aPIProxyEndPoint);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createCertificateStores(
        @Nonnull
        final CertificateStore certificateStore) {
        return addRequestCreate(service::createCertificateStores, certificateStore);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateCertificateStores(
        @Nonnull
        final CertificateStore certificateStore) {
        return addRequestUpdate(service::updateCertificateStores, certificateStore);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteCertificateStores(
        @Nonnull
        final CertificateStore certificateStore) {
        return addRequestDelete(service::deleteCertificateStores, certificateStore);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createTemplatePolicys(
        @Nonnull
        final TemplatePolicy templatePolicy) {
        return addRequestCreate(service::createTemplatePolicys, templatePolicy);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateTemplatePolicys(
        @Nonnull
        final TemplatePolicy templatePolicy) {
        return addRequestUpdate(service::updateTemplatePolicys, templatePolicy);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteTemplatePolicys(
        @Nonnull
        final TemplatePolicy templatePolicy) {
        return addRequestDelete(service::deleteTemplatePolicys, templatePolicy);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createAPIProxies(
        @Nonnull
        final APIProxy aPIProxy) {
        return addRequestCreate(service::createAPIProxies, aPIProxy);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateAPIProxies(
        @Nonnull
        final APIProxy aPIProxy) {
        return addRequestUpdate(service::updateAPIProxies, aPIProxy);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteAPIProxies(
        @Nonnull
        final APIProxy aPIProxy) {
        return addRequestDelete(service::deleteAPIProxies, aPIProxy);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createEndPointProperties(
        @Nonnull
        final EndPointProperty endPointProperty) {
        return addRequestCreate(service::createEndPointProperties, endPointProperty);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateEndPointProperties(
        @Nonnull
        final EndPointProperty endPointProperty) {
        return addRequestUpdate(service::updateEndPointProperties, endPointProperty);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteEndPointProperties(
        @Nonnull
        final EndPointProperty endPointProperty) {
        return addRequestDelete(service::deleteEndPointProperties, endPointProperty);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createApplications(
        @Nonnull
        final Application application) {
        return addRequestCreate(service::createApplications, application);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateApplications(
        @Nonnull
        final Application application) {
        return addRequestUpdate(service::updateApplications, application);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteApplications(
        @Nonnull
        final Application application) {
        return addRequestDelete(service::deleteApplications, application);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createSteps(
        @Nonnull
        final Step step) {
        return addRequestCreate(service::createSteps, step);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateSteps(
        @Nonnull
        final Step step) {
        return addRequestUpdate(service::updateSteps, step);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteSteps(
        @Nonnull
        final Step step) {
        return addRequestDelete(service::deleteSteps, step);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createAPIProviders(
        @Nonnull
        final APIProvider aPIProvider) {
        return addRequestCreate(service::createAPIProviders, aPIProvider);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateAPIProviders(
        @Nonnull
        final APIProvider aPIProvider) {
        return addRequestUpdate(service::updateAPIProviders, aPIProvider);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteAPIProviders(
        @Nonnull
        final APIProvider aPIProvider) {
        return addRequestDelete(service::deleteAPIProviders, aPIProvider);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createDestinationAndUrlMappings(
        @Nonnull
        final DestinationAndUrlMapping destinationAndUrlMapping) {
        return addRequestCreate(service::createDestinationAndUrlMappings, destinationAndUrlMapping);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateDestinationAndUrlMappings(
        @Nonnull
        final DestinationAndUrlMapping destinationAndUrlMapping) {
        return addRequestUpdate(service::updateDestinationAndUrlMappings, destinationAndUrlMapping);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteDestinationAndUrlMappings(
        @Nonnull
        final DestinationAndUrlMapping destinationAndUrlMapping) {
        return addRequestDelete(service::deleteDestinationAndUrlMappings, destinationAndUrlMapping);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createResources(
        @Nonnull
        final Resource resource) {
        return addRequestCreate(service::createResources, resource);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateResources(
        @Nonnull
        final Resource resource) {
        return addRequestUpdate(service::updateResources, resource);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteResources(
        @Nonnull
        final Resource resource) {
        return addRequestDelete(service::deleteResources, resource);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createContentPackageMappers(
        @Nonnull
        final ContentPackageMapper contentPackageMapper) {
        return addRequestCreate(service::createContentPackageMappers, contentPackageMapper);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateContentPackageMappers(
        @Nonnull
        final ContentPackageMapper contentPackageMapper) {
        return addRequestUpdate(service::updateContentPackageMappers, contentPackageMapper);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteContentPackageMappers(
        @Nonnull
        final ContentPackageMapper contentPackageMapper) {
        return addRequestDelete(service::deleteContentPackageMappers, contentPackageMapper);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createConditionalFlowRules(
        @Nonnull
        final ConditionalFlowRule conditionalFlowRule) {
        return addRequestCreate(service::createConditionalFlowRules, conditionalFlowRule);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateConditionalFlowRules(
        @Nonnull
        final ConditionalFlowRule conditionalFlowRule) {
        return addRequestUpdate(service::updateConditionalFlowRules, conditionalFlowRule);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteConditionalFlowRules(
        @Nonnull
        final ConditionalFlowRule conditionalFlowRule) {
        return addRequestDelete(service::deleteConditionalFlowRules, conditionalFlowRule);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createDefaultFaultRules(
        @Nonnull
        final DefaultFaultRule defaultFaultRule) {
        return addRequestCreate(service::createDefaultFaultRules, defaultFaultRule);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateDefaultFaultRules(
        @Nonnull
        final DefaultFaultRule defaultFaultRule) {
        return addRequestUpdate(service::updateDefaultFaultRules, defaultFaultRule);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteDefaultFaultRules(
        @Nonnull
        final DefaultFaultRule defaultFaultRule) {
        return addRequestDelete(service::deleteDefaultFaultRules, defaultFaultRule);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createAPIResources(
        @Nonnull
        final APIResource aPIResource) {
        return addRequestCreate(service::createAPIResources, aPIResource);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateAPIResources(
        @Nonnull
        final APIResource aPIResource) {
        return addRequestUpdate(service::updateAPIResources, aPIResource);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteAPIResources(
        @Nonnull
        final APIResource aPIResource) {
        return addRequestDelete(service::deleteAPIResources, aPIResource);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createAPITargetEndPoints(
        @Nonnull
        final APITargetEndPoint aPITargetEndPoint) {
        return addRequestCreate(service::createAPITargetEndPoints, aPITargetEndPoint);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateAPITargetEndPoints(
        @Nonnull
        final APITargetEndPoint aPITargetEndPoint) {
        return addRequestUpdate(service::updateAPITargetEndPoints, aPITargetEndPoint);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteAPITargetEndPoints(
        @Nonnull
        final APITargetEndPoint aPITargetEndPoint) {
        return addRequestDelete(service::deleteAPITargetEndPoints, aPITargetEndPoint);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createFaultRules(
        @Nonnull
        final FaultRule faultRule) {
        return addRequestCreate(service::createFaultRules, faultRule);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateFaultRules(
        @Nonnull
        final FaultRule faultRule) {
        return addRequestUpdate(service::updateFaultRules, faultRule);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteFaultRules(
        @Nonnull
        final FaultRule faultRule) {
        return addRequestDelete(service::deleteFaultRules, faultRule);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createAPIProducts(
        @Nonnull
        final APIProduct aPIProduct) {
        return addRequestCreate(service::createAPIProducts, aPIProduct);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateAPIProducts(
        @Nonnull
        final APIProduct aPIProduct) {
        return addRequestUpdate(service::updateAPIProducts, aPIProduct);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteAPIProducts(
        @Nonnull
        final APIProduct aPIProduct) {
        return addRequestDelete(service::deleteAPIProducts, aPIProduct);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createDocumentations(
        @Nonnull
        final Documentation documentation) {
        return addRequestCreate(service::createDocumentations, documentation);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateDocumentations(
        @Nonnull
        final Documentation documentation) {
        return addRequestUpdate(service::updateDocumentations, documentation);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteDocumentations(
        @Nonnull
        final Documentation documentation) {
        return addRequestDelete(service::deleteDocumentations, documentation);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createCertificates(
        @Nonnull
        final Certificate certificate) {
        return addRequestCreate(service::createCertificates, certificate);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateCertificates(
        @Nonnull
        final Certificate certificate) {
        return addRequestUpdate(service::updateCertificates, certificate);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteCertificates(
        @Nonnull
        final Certificate certificate) {
        return addRequestDelete(service::deleteCertificates, certificate);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createRatePlans(
        @Nonnull
        final RatePlan ratePlan) {
        return addRequestCreate(service::createRatePlans, ratePlan);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateRatePlans(
        @Nonnull
        final RatePlan ratePlan) {
        return addRequestUpdate(service::updateRatePlans, ratePlan);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteRatePlans(
        @Nonnull
        final RatePlan ratePlan) {
        return addRequestDelete(service::deleteRatePlans, ratePlan);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createPolicyTemplateContainers(
        @Nonnull
        final PolicyTemplateContainer policyTemplateContainer) {
        return addRequestCreate(service::createPolicyTemplateContainers, policyTemplateContainer);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updatePolicyTemplateContainers(
        @Nonnull
        final PolicyTemplateContainer policyTemplateContainer) {
        return addRequestUpdate(service::updatePolicyTemplateContainers, policyTemplateContainer);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deletePolicyTemplateContainers(
        @Nonnull
        final PolicyTemplateContainer policyTemplateContainer) {
        return addRequestDelete(service::deletePolicyTemplateContainers, policyTemplateContainer);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createBills(
        @Nonnull
        final Bill bill) {
        return addRequestCreate(service::createBills, bill);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateBills(
        @Nonnull
        final Bill bill) {
        return addRequestUpdate(service::updateBills, bill);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteBills(
        @Nonnull
        final Bill bill) {
        return addRequestDelete(service::deleteBills, bill);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createRouteRules(
        @Nonnull
        final RouteRule routeRule) {
        return addRequestCreate(service::createRouteRules, routeRule);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateRouteRules(
        @Nonnull
        final RouteRule routeRule) {
        return addRequestUpdate(service::updateRouteRules, routeRule);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteRouteRules(
        @Nonnull
        final RouteRule routeRule) {
        return addRequestDelete(service::deleteRouteRules, routeRule);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createKeyMapEntryValues(
        @Nonnull
        final KeyMapEntryValue keyMapEntryValue) {
        return addRequestCreate(service::createKeyMapEntryValues, keyMapEntryValue);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateKeyMapEntryValues(
        @Nonnull
        final KeyMapEntryValue keyMapEntryValue) {
        return addRequestUpdate(service::updateKeyMapEntryValues, keyMapEntryValue);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteKeyMapEntryValues(
        @Nonnull
        final KeyMapEntryValue keyMapEntryValue) {
        return addRequestDelete(service::deleteKeyMapEntryValues, keyMapEntryValue);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createFileResources(
        @Nonnull
        final FileResource fileResource) {
        return addRequestCreate(service::createFileResources, fileResource);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateFileResources(
        @Nonnull
        final FileResource fileResource) {
        return addRequestUpdate(service::updateFileResources, fileResource);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteFileResources(
        @Nonnull
        final FileResource fileResource) {
        return addRequestDelete(service::deleteFileResources, fileResource);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createCacheResources(
        @Nonnull
        final CacheResource cacheResource) {
        return addRequestCreate(service::createCacheResources, cacheResource);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateCacheResources(
        @Nonnull
        final CacheResource cacheResource) {
        return addRequestUpdate(service::updateCacheResources, cacheResource);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteCacheResources(
        @Nonnull
        final CacheResource cacheResource) {
        return addRequestDelete(service::deleteCacheResources, cacheResource);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createDevelopers(
        @Nonnull
        final Developer developer) {
        return addRequestCreate(service::createDevelopers, developer);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateDevelopers(
        @Nonnull
        final Developer developer) {
        return addRequestUpdate(service::updateDevelopers, developer);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteDevelopers(
        @Nonnull
        final Developer developer) {
        return addRequestDelete(service::deleteDevelopers, developer);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createStreams(
        @Nonnull
        final Stream stream) {
        return addRequestCreate(service::createStreams, stream);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updateStreams(
        @Nonnull
        final Stream stream) {
        return addRequestUpdate(service::updateStreams, stream);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deleteStreams(
        @Nonnull
        final Stream stream) {
        return addRequestDelete(service::deleteStreams, stream);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet createPolicies(
        @Nonnull
        final Policy policy) {
        return addRequestCreate(service::createPolicies, policy);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet updatePolicies(
        @Nonnull
        final Policy policy) {
        return addRequestUpdate(service::updatePolicies, policy);
    }

    @Nonnull
    @Override
    public APIPortalApplicationsCFServiceBatchChangeSet deletePolicies(
        @Nonnull
        final Policy policy) {
        return addRequestDelete(service::deletePolicies, policy);
    }

}
