
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.69.0
 */

package com.mycompany.vdm.services;

import java.time.LocalDateTime;
import javax.annotation.Nonnull;
import javax.inject.Named;
import com.mycompany.vdm.namespaces.portalapplicationscf.ACLProductLinkage;
import com.mycompany.vdm.namespaces.portalapplicationscf.ACLProductLinkageByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ACLProductLinkageCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ACLProductLinkageDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ACLProductLinkageFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ACLProductLinkageUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProduct;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProductByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProductCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProductDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProductFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProductUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProvider;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProviderByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProviderCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProviderDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProviderFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProviderUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProxy;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProxyByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProxyCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProxyDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProxyEndPoint;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProxyEndPointByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProxyEndPointCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProxyEndPointDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProxyEndPointFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProxyEndPointUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProxyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIProxyUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIResource;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIResourceByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIResourceCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIResourceDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIResourceFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APIResourceUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APITargetEndPoint;
import com.mycompany.vdm.namespaces.portalapplicationscf.APITargetEndPointByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APITargetEndPointCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APITargetEndPointDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APITargetEndPointFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.APITargetEndPointUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.Application;
import com.mycompany.vdm.namespaces.portalapplicationscf.ApplicationByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ApplicationCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ApplicationDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ApplicationFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ApplicationUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.Bill;
import com.mycompany.vdm.namespaces.portalapplicationscf.BillByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.BillCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.BillDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.BillFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.BillUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.CacheResource;
import com.mycompany.vdm.namespaces.portalapplicationscf.CacheResourceByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.CacheResourceCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.CacheResourceDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.CacheResourceFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.CacheResourceUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.Certificate;
import com.mycompany.vdm.namespaces.portalapplicationscf.CertificateByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.CertificateCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.CertificateDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.CertificateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.CertificateStore;
import com.mycompany.vdm.namespaces.portalapplicationscf.CertificateStoreByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.CertificateStoreCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.CertificateStoreDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.CertificateStoreFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.CertificateStoreUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.CertificateUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ConditionalFlowRule;
import com.mycompany.vdm.namespaces.portalapplicationscf.ConditionalFlowRuleByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ConditionalFlowRuleCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ConditionalFlowRuleDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ConditionalFlowRuleFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ConditionalFlowRuleUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ContentPackageMapper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ContentPackageMapperByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ContentPackageMapperCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ContentPackageMapperDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ContentPackageMapperFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ContentPackageMapperUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DefaultFaultRule;
import com.mycompany.vdm.namespaces.portalapplicationscf.DefaultFaultRuleByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DefaultFaultRuleCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DefaultFaultRuleDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DefaultFaultRuleFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DefaultFaultRuleUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DestinationAndUrlMapping;
import com.mycompany.vdm.namespaces.portalapplicationscf.DestinationAndUrlMappingByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DestinationAndUrlMappingCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DestinationAndUrlMappingDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DestinationAndUrlMappingFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DestinationAndUrlMappingUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.Developer;
import com.mycompany.vdm.namespaces.portalapplicationscf.DeveloperByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DeveloperCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DeveloperDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DeveloperFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DeveloperUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.Documentation;
import com.mycompany.vdm.namespaces.portalapplicationscf.DocumentationByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DocumentationCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DocumentationDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DocumentationFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.DocumentationUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.EndPointProperty;
import com.mycompany.vdm.namespaces.portalapplicationscf.EndPointPropertyByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.EndPointPropertyCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.EndPointPropertyDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.EndPointPropertyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.EndPointPropertyUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.FaultRule;
import com.mycompany.vdm.namespaces.portalapplicationscf.FaultRuleByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.FaultRuleCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.FaultRuleDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.FaultRuleFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.FaultRuleUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.FileResource;
import com.mycompany.vdm.namespaces.portalapplicationscf.FileResourceByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.FileResourceCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.FileResourceDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.FileResourceFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.FileResourceUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.FlowRule;
import com.mycompany.vdm.namespaces.portalapplicationscf.FlowRuleByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.FlowRuleCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.FlowRuleDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.FlowRuleFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.FlowRuleUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.KeyMapEntry;
import com.mycompany.vdm.namespaces.portalapplicationscf.KeyMapEntryByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.KeyMapEntryCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.KeyMapEntryDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.KeyMapEntryFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.KeyMapEntryUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.KeyMapEntryValue;
import com.mycompany.vdm.namespaces.portalapplicationscf.KeyMapEntryValueByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.KeyMapEntryValueCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.KeyMapEntryValueDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.KeyMapEntryValueFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.KeyMapEntryValueUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.Policy;
import com.mycompany.vdm.namespaces.portalapplicationscf.PolicyByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.PolicyCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.PolicyDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.PolicyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.PolicyTemplateContainer;
import com.mycompany.vdm.namespaces.portalapplicationscf.PolicyTemplateContainerByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.PolicyTemplateContainerCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.PolicyTemplateContainerDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.PolicyTemplateContainerFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.PolicyTemplateContainerUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.PolicyUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.RatePlan;
import com.mycompany.vdm.namespaces.portalapplicationscf.RatePlanByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.RatePlanCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.RatePlanDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.RatePlanFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.RatePlanUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.Resource;
import com.mycompany.vdm.namespaces.portalapplicationscf.ResourceByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ResourceCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ResourceDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ResourceFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.ResourceUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.RouteRule;
import com.mycompany.vdm.namespaces.portalapplicationscf.RouteRuleByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.RouteRuleCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.RouteRuleDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.RouteRuleFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.RouteRuleUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.Step;
import com.mycompany.vdm.namespaces.portalapplicationscf.StepByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.StepCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.StepDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.StepFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.StepUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.Stream;
import com.mycompany.vdm.namespaces.portalapplicationscf.StreamByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.StreamCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.StreamDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.StreamFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.StreamUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.TemplateFileResource;
import com.mycompany.vdm.namespaces.portalapplicationscf.TemplateFileResourceByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.TemplateFileResourceCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.TemplateFileResourceDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.TemplateFileResourceFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.TemplateFileResourceUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.TemplatePolicy;
import com.mycompany.vdm.namespaces.portalapplicationscf.TemplatePolicyByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.TemplatePolicyCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.TemplatePolicyDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.TemplatePolicyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.TemplatePolicyUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.VirtualHost;
import com.mycompany.vdm.namespaces.portalapplicationscf.VirtualHostByKeyFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.VirtualHostCreateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.VirtualHostDeleteFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.VirtualHostFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.VirtualHostUpdateFluentHelper;
import com.mycompany.vdm.namespaces.portalapplicationscf.batch.DefaultAPIPortalApplicationsCFServiceBatch;


/**
 * <h3>Details:</h3><table summary='Details'><tr><td align='right'>OData Service:</td><td>APIPortal_Applications_CF</td></tr></table>
 * 
 */
@Named("com.mycompany.vdm.services.DefaultAPIPortalApplicationsCFService")
public class DefaultAPIPortalApplicationsCFService
    implements APIPortalApplicationsCFService
{

    @Nonnull
    private final String servicePath;

    /**
     * Creates a service using {@link APIPortalApplicationsCFService#DEFAULT_SERVICE_PATH} to send the requests.
     * 
     */
    public DefaultAPIPortalApplicationsCFService() {
        servicePath = APIPortalApplicationsCFService.DEFAULT_SERVICE_PATH;
    }

    /**
     * Creates a service using the provided service path to send the requests.
     * <p>
     * Used by the fluent {@link #withServicePath(String)} method.
     * 
     */
    private DefaultAPIPortalApplicationsCFService(
        @Nonnull
        final String servicePath) {
        this.servicePath = servicePath;
    }

    @Override
    @Nonnull
    public DefaultAPIPortalApplicationsCFService withServicePath(
        @Nonnull
        final String servicePath) {
        return new DefaultAPIPortalApplicationsCFService(servicePath);
    }

    @Override
    @Nonnull
    public DefaultAPIPortalApplicationsCFServiceBatch batch() {
        return new DefaultAPIPortalApplicationsCFServiceBatch(this, servicePath);
    }

    @Override
    @Nonnull
    public KeyMapEntryFluentHelper getAllKeyMapEntries() {
        return new KeyMapEntryFluentHelper(servicePath, "KeyMapEntries");
    }

    @Override
    @Nonnull
    public KeyMapEntryByKeyFluentHelper getKeyMapEntriesByKey(final String name) {
        return new KeyMapEntryByKeyFluentHelper(servicePath, "KeyMapEntries", name);
    }

    @Override
    @Nonnull
    public KeyMapEntryCreateFluentHelper createKeyMapEntries(
        @Nonnull
        final KeyMapEntry keyMapEntry) {
        return new KeyMapEntryCreateFluentHelper(servicePath, keyMapEntry, "KeyMapEntries");
    }

    @Override
    @Nonnull
    public KeyMapEntryUpdateFluentHelper updateKeyMapEntries(
        @Nonnull
        final KeyMapEntry keyMapEntry) {
        return new KeyMapEntryUpdateFluentHelper(servicePath, keyMapEntry, "KeyMapEntries");
    }

    @Override
    @Nonnull
    public KeyMapEntryDeleteFluentHelper deleteKeyMapEntries(
        @Nonnull
        final KeyMapEntry keyMapEntry) {
        return new KeyMapEntryDeleteFluentHelper(servicePath, keyMapEntry, "KeyMapEntries");
    }

    @Override
    @Nonnull
    public VirtualHostFluentHelper getAllVirtualHosts() {
        return new VirtualHostFluentHelper(servicePath, "VirtualHosts");
    }

    @Override
    @Nonnull
    public VirtualHostByKeyFluentHelper getVirtualHostsByKey(final String id) {
        return new VirtualHostByKeyFluentHelper(servicePath, "VirtualHosts", id);
    }

    @Override
    @Nonnull
    public VirtualHostCreateFluentHelper createVirtualHosts(
        @Nonnull
        final VirtualHost virtualHost) {
        return new VirtualHostCreateFluentHelper(servicePath, virtualHost, "VirtualHosts");
    }

    @Override
    @Nonnull
    public VirtualHostUpdateFluentHelper updateVirtualHosts(
        @Nonnull
        final VirtualHost virtualHost) {
        return new VirtualHostUpdateFluentHelper(servicePath, virtualHost, "VirtualHosts");
    }

    @Override
    @Nonnull
    public VirtualHostDeleteFluentHelper deleteVirtualHosts(
        @Nonnull
        final VirtualHost virtualHost) {
        return new VirtualHostDeleteFluentHelper(servicePath, virtualHost, "VirtualHosts");
    }

    @Override
    @Nonnull
    public FlowRuleFluentHelper getAllFlowRules() {
        return new FlowRuleFluentHelper(servicePath, "FlowRules");
    }

    @Override
    @Nonnull
    public FlowRuleByKeyFluentHelper getFlowRulesByKey(final String id) {
        return new FlowRuleByKeyFluentHelper(servicePath, "FlowRules", id);
    }

    @Override
    @Nonnull
    public FlowRuleCreateFluentHelper createFlowRules(
        @Nonnull
        final FlowRule flowRule) {
        return new FlowRuleCreateFluentHelper(servicePath, flowRule, "FlowRules");
    }

    @Override
    @Nonnull
    public FlowRuleUpdateFluentHelper updateFlowRules(
        @Nonnull
        final FlowRule flowRule) {
        return new FlowRuleUpdateFluentHelper(servicePath, flowRule, "FlowRules");
    }

    @Override
    @Nonnull
    public FlowRuleDeleteFluentHelper deleteFlowRules(
        @Nonnull
        final FlowRule flowRule) {
        return new FlowRuleDeleteFluentHelper(servicePath, flowRule, "FlowRules");
    }

    @Override
    @Nonnull
    public TemplateFileResourceFluentHelper getAllTemplateFileResources() {
        return new TemplateFileResourceFluentHelper(servicePath, "TemplateFileResources");
    }

    @Override
    @Nonnull
    public TemplateFileResourceByKeyFluentHelper getTemplateFileResourcesByKey(final String id) {
        return new TemplateFileResourceByKeyFluentHelper(servicePath, "TemplateFileResources", id);
    }

    @Override
    @Nonnull
    public TemplateFileResourceCreateFluentHelper createTemplateFileResources(
        @Nonnull
        final TemplateFileResource templateFileResource) {
        return new TemplateFileResourceCreateFluentHelper(servicePath, templateFileResource, "TemplateFileResources");
    }

    @Override
    @Nonnull
    public TemplateFileResourceUpdateFluentHelper updateTemplateFileResources(
        @Nonnull
        final TemplateFileResource templateFileResource) {
        return new TemplateFileResourceUpdateFluentHelper(servicePath, templateFileResource, "TemplateFileResources");
    }

    @Override
    @Nonnull
    public TemplateFileResourceDeleteFluentHelper deleteTemplateFileResources(
        @Nonnull
        final TemplateFileResource templateFileResource) {
        return new TemplateFileResourceDeleteFluentHelper(servicePath, templateFileResource, "TemplateFileResources");
    }

    @Override
    @Nonnull
    public ACLProductLinkageFluentHelper getAllACLProductLinkages() {
        return new ACLProductLinkageFluentHelper(servicePath, "ACLProductLinkages");
    }

    @Override
    @Nonnull
    public ACLProductLinkageByKeyFluentHelper getACLProductLinkagesByKey(final String ruleId) {
        return new ACLProductLinkageByKeyFluentHelper(servicePath, "ACLProductLinkages", ruleId);
    }

    @Override
    @Nonnull
    public ACLProductLinkageCreateFluentHelper createACLProductLinkages(
        @Nonnull
        final ACLProductLinkage aCLProductLinkage) {
        return new ACLProductLinkageCreateFluentHelper(servicePath, aCLProductLinkage, "ACLProductLinkages");
    }

    @Override
    @Nonnull
    public ACLProductLinkageUpdateFluentHelper updateACLProductLinkages(
        @Nonnull
        final ACLProductLinkage aCLProductLinkage) {
        return new ACLProductLinkageUpdateFluentHelper(servicePath, aCLProductLinkage, "ACLProductLinkages");
    }

    @Override
    @Nonnull
    public ACLProductLinkageDeleteFluentHelper deleteACLProductLinkages(
        @Nonnull
        final ACLProductLinkage aCLProductLinkage) {
        return new ACLProductLinkageDeleteFluentHelper(servicePath, aCLProductLinkage, "ACLProductLinkages");
    }

    @Override
    @Nonnull
    public APIProxyEndPointFluentHelper getAllAPIProxyEndPoints() {
        return new APIProxyEndPointFluentHelper(servicePath, "APIProxyEndPoints");
    }

    @Override
    @Nonnull
    public APIProxyEndPointByKeyFluentHelper getAPIProxyEndPointsByKey(final String id) {
        return new APIProxyEndPointByKeyFluentHelper(servicePath, "APIProxyEndPoints", id);
    }

    @Override
    @Nonnull
    public APIProxyEndPointCreateFluentHelper createAPIProxyEndPoints(
        @Nonnull
        final APIProxyEndPoint aPIProxyEndPoint) {
        return new APIProxyEndPointCreateFluentHelper(servicePath, aPIProxyEndPoint, "APIProxyEndPoints");
    }

    @Override
    @Nonnull
    public APIProxyEndPointUpdateFluentHelper updateAPIProxyEndPoints(
        @Nonnull
        final APIProxyEndPoint aPIProxyEndPoint) {
        return new APIProxyEndPointUpdateFluentHelper(servicePath, aPIProxyEndPoint, "APIProxyEndPoints");
    }

    @Override
    @Nonnull
    public APIProxyEndPointDeleteFluentHelper deleteAPIProxyEndPoints(
        @Nonnull
        final APIProxyEndPoint aPIProxyEndPoint) {
        return new APIProxyEndPointDeleteFluentHelper(servicePath, aPIProxyEndPoint, "APIProxyEndPoints");
    }

    @Override
    @Nonnull
    public CertificateStoreFluentHelper getAllCertificateStores() {
        return new CertificateStoreFluentHelper(servicePath, "CertificateStores");
    }

    @Override
    @Nonnull
    public CertificateStoreByKeyFluentHelper getCertificateStoresByKey(final String name) {
        return new CertificateStoreByKeyFluentHelper(servicePath, "CertificateStores", name);
    }

    @Override
    @Nonnull
    public CertificateStoreCreateFluentHelper createCertificateStores(
        @Nonnull
        final CertificateStore certificateStore) {
        return new CertificateStoreCreateFluentHelper(servicePath, certificateStore, "CertificateStores");
    }

    @Override
    @Nonnull
    public CertificateStoreUpdateFluentHelper updateCertificateStores(
        @Nonnull
        final CertificateStore certificateStore) {
        return new CertificateStoreUpdateFluentHelper(servicePath, certificateStore, "CertificateStores");
    }

    @Override
    @Nonnull
    public CertificateStoreDeleteFluentHelper deleteCertificateStores(
        @Nonnull
        final CertificateStore certificateStore) {
        return new CertificateStoreDeleteFluentHelper(servicePath, certificateStore, "CertificateStores");
    }

    @Override
    @Nonnull
    public TemplatePolicyFluentHelper getAllTemplatePolicys() {
        return new TemplatePolicyFluentHelper(servicePath, "TemplatePolicys");
    }

    @Override
    @Nonnull
    public TemplatePolicyByKeyFluentHelper getTemplatePolicysByKey(final String id) {
        return new TemplatePolicyByKeyFluentHelper(servicePath, "TemplatePolicys", id);
    }

    @Override
    @Nonnull
    public TemplatePolicyCreateFluentHelper createTemplatePolicys(
        @Nonnull
        final TemplatePolicy templatePolicy) {
        return new TemplatePolicyCreateFluentHelper(servicePath, templatePolicy, "TemplatePolicys");
    }

    @Override
    @Nonnull
    public TemplatePolicyUpdateFluentHelper updateTemplatePolicys(
        @Nonnull
        final TemplatePolicy templatePolicy) {
        return new TemplatePolicyUpdateFluentHelper(servicePath, templatePolicy, "TemplatePolicys");
    }

    @Override
    @Nonnull
    public TemplatePolicyDeleteFluentHelper deleteTemplatePolicys(
        @Nonnull
        final TemplatePolicy templatePolicy) {
        return new TemplatePolicyDeleteFluentHelper(servicePath, templatePolicy, "TemplatePolicys");
    }

    @Override
    @Nonnull
    public APIProxyFluentHelper getAllAPIProxies() {
        return new APIProxyFluentHelper(servicePath, "APIProxies");
    }

    @Override
    @Nonnull
    public APIProxyByKeyFluentHelper getAPIProxiesByKey(final String name) {
        return new APIProxyByKeyFluentHelper(servicePath, "APIProxies", name);
    }

    @Override
    @Nonnull
    public APIProxyCreateFluentHelper createAPIProxies(
        @Nonnull
        final APIProxy aPIProxy) {
        return new APIProxyCreateFluentHelper(servicePath, aPIProxy, "APIProxies");
    }

    @Override
    @Nonnull
    public APIProxyUpdateFluentHelper updateAPIProxies(
        @Nonnull
        final APIProxy aPIProxy) {
        return new APIProxyUpdateFluentHelper(servicePath, aPIProxy, "APIProxies");
    }

    @Override
    @Nonnull
    public APIProxyDeleteFluentHelper deleteAPIProxies(
        @Nonnull
        final APIProxy aPIProxy) {
        return new APIProxyDeleteFluentHelper(servicePath, aPIProxy, "APIProxies");
    }

    @Override
    @Nonnull
    public EndPointPropertyFluentHelper getAllEndPointProperties() {
        return new EndPointPropertyFluentHelper(servicePath, "EndPointProperties");
    }

    @Override
    @Nonnull
    public EndPointPropertyByKeyFluentHelper getEndPointPropertiesByKey(final String id) {
        return new EndPointPropertyByKeyFluentHelper(servicePath, "EndPointProperties", id);
    }

    @Override
    @Nonnull
    public EndPointPropertyCreateFluentHelper createEndPointProperties(
        @Nonnull
        final EndPointProperty endPointProperty) {
        return new EndPointPropertyCreateFluentHelper(servicePath, endPointProperty, "EndPointProperties");
    }

    @Override
    @Nonnull
    public EndPointPropertyUpdateFluentHelper updateEndPointProperties(
        @Nonnull
        final EndPointProperty endPointProperty) {
        return new EndPointPropertyUpdateFluentHelper(servicePath, endPointProperty, "EndPointProperties");
    }

    @Override
    @Nonnull
    public EndPointPropertyDeleteFluentHelper deleteEndPointProperties(
        @Nonnull
        final EndPointProperty endPointProperty) {
        return new EndPointPropertyDeleteFluentHelper(servicePath, endPointProperty, "EndPointProperties");
    }

    @Override
    @Nonnull
    public ApplicationFluentHelper getAllApplications() {
        return new ApplicationFluentHelper(servicePath, "Applications");
    }

    @Override
    @Nonnull
    public ApplicationByKeyFluentHelper getApplicationsByKey(final String id) {
        return new ApplicationByKeyFluentHelper(servicePath, "Applications", id);
    }

    @Override
    @Nonnull
    public ApplicationCreateFluentHelper createApplications(
        @Nonnull
        final Application application) {
        return new ApplicationCreateFluentHelper(servicePath, application, "Applications");
    }

    @Override
    @Nonnull
    public ApplicationUpdateFluentHelper updateApplications(
        @Nonnull
        final Application application) {
        return new ApplicationUpdateFluentHelper(servicePath, application, "Applications");
    }

    @Override
    @Nonnull
    public ApplicationDeleteFluentHelper deleteApplications(
        @Nonnull
        final Application application) {
        return new ApplicationDeleteFluentHelper(servicePath, application, "Applications");
    }

    @Override
    @Nonnull
    public StepFluentHelper getAllSteps() {
        return new StepFluentHelper(servicePath, "Steps");
    }

    @Override
    @Nonnull
    public StepByKeyFluentHelper getStepsByKey(final String id) {
        return new StepByKeyFluentHelper(servicePath, "Steps", id);
    }

    @Override
    @Nonnull
    public StepCreateFluentHelper createSteps(
        @Nonnull
        final Step step) {
        return new StepCreateFluentHelper(servicePath, step, "Steps");
    }

    @Override
    @Nonnull
    public StepUpdateFluentHelper updateSteps(
        @Nonnull
        final Step step) {
        return new StepUpdateFluentHelper(servicePath, step, "Steps");
    }

    @Override
    @Nonnull
    public StepDeleteFluentHelper deleteSteps(
        @Nonnull
        final Step step) {
        return new StepDeleteFluentHelper(servicePath, step, "Steps");
    }

    @Override
    @Nonnull
    public APIProviderFluentHelper getAllAPIProviders() {
        return new APIProviderFluentHelper(servicePath, "APIProviders");
    }

    @Override
    @Nonnull
    public APIProviderByKeyFluentHelper getAPIProvidersByKey(final String name) {
        return new APIProviderByKeyFluentHelper(servicePath, "APIProviders", name);
    }

    @Override
    @Nonnull
    public APIProviderCreateFluentHelper createAPIProviders(
        @Nonnull
        final APIProvider aPIProvider) {
        return new APIProviderCreateFluentHelper(servicePath, aPIProvider, "APIProviders");
    }

    @Override
    @Nonnull
    public APIProviderUpdateFluentHelper updateAPIProviders(
        @Nonnull
        final APIProvider aPIProvider) {
        return new APIProviderUpdateFluentHelper(servicePath, aPIProvider, "APIProviders");
    }

    @Override
    @Nonnull
    public APIProviderDeleteFluentHelper deleteAPIProviders(
        @Nonnull
        final APIProvider aPIProvider) {
        return new APIProviderDeleteFluentHelper(servicePath, aPIProvider, "APIProviders");
    }

    @Override
    @Nonnull
    public DestinationAndUrlMappingFluentHelper getAllDestinationAndUrlMappings() {
        return new DestinationAndUrlMappingFluentHelper(servicePath, "DestinationAndUrlMappings");
    }

    @Override
    @Nonnull
    public DestinationAndUrlMappingByKeyFluentHelper getDestinationAndUrlMappingsByKey(final String id) {
        return new DestinationAndUrlMappingByKeyFluentHelper(servicePath, "DestinationAndUrlMappings", id);
    }

    @Override
    @Nonnull
    public DestinationAndUrlMappingCreateFluentHelper createDestinationAndUrlMappings(
        @Nonnull
        final DestinationAndUrlMapping destinationAndUrlMapping) {
        return new DestinationAndUrlMappingCreateFluentHelper(servicePath, destinationAndUrlMapping, "DestinationAndUrlMappings");
    }

    @Override
    @Nonnull
    public DestinationAndUrlMappingUpdateFluentHelper updateDestinationAndUrlMappings(
        @Nonnull
        final DestinationAndUrlMapping destinationAndUrlMapping) {
        return new DestinationAndUrlMappingUpdateFluentHelper(servicePath, destinationAndUrlMapping, "DestinationAndUrlMappings");
    }

    @Override
    @Nonnull
    public DestinationAndUrlMappingDeleteFluentHelper deleteDestinationAndUrlMappings(
        @Nonnull
        final DestinationAndUrlMapping destinationAndUrlMapping) {
        return new DestinationAndUrlMappingDeleteFluentHelper(servicePath, destinationAndUrlMapping, "DestinationAndUrlMappings");
    }

    @Override
    @Nonnull
    public ResourceFluentHelper getAllResources() {
        return new ResourceFluentHelper(servicePath, "Resources");
    }

    @Override
    @Nonnull
    public ResourceByKeyFluentHelper getResourcesByKey(final String locale, final String object_id, final String type_2) {
        return new ResourceByKeyFluentHelper(servicePath, "Resources", locale, object_id, type_2);
    }

    @Override
    @Nonnull
    public ResourceCreateFluentHelper createResources(
        @Nonnull
        final Resource resource) {
        return new ResourceCreateFluentHelper(servicePath, resource, "Resources");
    }

    @Override
    @Nonnull
    public ResourceUpdateFluentHelper updateResources(
        @Nonnull
        final Resource resource) {
        return new ResourceUpdateFluentHelper(servicePath, resource, "Resources");
    }

    @Override
    @Nonnull
    public ResourceDeleteFluentHelper deleteResources(
        @Nonnull
        final Resource resource) {
        return new ResourceDeleteFluentHelper(servicePath, resource, "Resources");
    }

    @Override
    @Nonnull
    public ContentPackageMapperFluentHelper getAllContentPackageMappers() {
        return new ContentPackageMapperFluentHelper(servicePath, "ContentPackageMappers");
    }

    @Override
    @Nonnull
    public ContentPackageMapperByKeyFluentHelper getContentPackageMappersByKey(final String targetId, final String targetType) {
        return new ContentPackageMapperByKeyFluentHelper(servicePath, "ContentPackageMappers", targetId, targetType);
    }

    @Override
    @Nonnull
    public ContentPackageMapperCreateFluentHelper createContentPackageMappers(
        @Nonnull
        final ContentPackageMapper contentPackageMapper) {
        return new ContentPackageMapperCreateFluentHelper(servicePath, contentPackageMapper, "ContentPackageMappers");
    }

    @Override
    @Nonnull
    public ContentPackageMapperUpdateFluentHelper updateContentPackageMappers(
        @Nonnull
        final ContentPackageMapper contentPackageMapper) {
        return new ContentPackageMapperUpdateFluentHelper(servicePath, contentPackageMapper, "ContentPackageMappers");
    }

    @Override
    @Nonnull
    public ContentPackageMapperDeleteFluentHelper deleteContentPackageMappers(
        @Nonnull
        final ContentPackageMapper contentPackageMapper) {
        return new ContentPackageMapperDeleteFluentHelper(servicePath, contentPackageMapper, "ContentPackageMappers");
    }

    @Override
    @Nonnull
    public ConditionalFlowRuleFluentHelper getAllConditionalFlowRules() {
        return new ConditionalFlowRuleFluentHelper(servicePath, "ConditionalFlowRules");
    }

    @Override
    @Nonnull
    public ConditionalFlowRuleByKeyFluentHelper getConditionalFlowRulesByKey(final String id) {
        return new ConditionalFlowRuleByKeyFluentHelper(servicePath, "ConditionalFlowRules", id);
    }

    @Override
    @Nonnull
    public ConditionalFlowRuleCreateFluentHelper createConditionalFlowRules(
        @Nonnull
        final ConditionalFlowRule conditionalFlowRule) {
        return new ConditionalFlowRuleCreateFluentHelper(servicePath, conditionalFlowRule, "ConditionalFlowRules");
    }

    @Override
    @Nonnull
    public ConditionalFlowRuleUpdateFluentHelper updateConditionalFlowRules(
        @Nonnull
        final ConditionalFlowRule conditionalFlowRule) {
        return new ConditionalFlowRuleUpdateFluentHelper(servicePath, conditionalFlowRule, "ConditionalFlowRules");
    }

    @Override
    @Nonnull
    public ConditionalFlowRuleDeleteFluentHelper deleteConditionalFlowRules(
        @Nonnull
        final ConditionalFlowRule conditionalFlowRule) {
        return new ConditionalFlowRuleDeleteFluentHelper(servicePath, conditionalFlowRule, "ConditionalFlowRules");
    }

    @Override
    @Nonnull
    public DefaultFaultRuleFluentHelper getAllDefaultFaultRules() {
        return new DefaultFaultRuleFluentHelper(servicePath, "DefaultFaultRules");
    }

    @Override
    @Nonnull
    public DefaultFaultRuleByKeyFluentHelper getDefaultFaultRulesByKey(final String id) {
        return new DefaultFaultRuleByKeyFluentHelper(servicePath, "DefaultFaultRules", id);
    }

    @Override
    @Nonnull
    public DefaultFaultRuleCreateFluentHelper createDefaultFaultRules(
        @Nonnull
        final DefaultFaultRule defaultFaultRule) {
        return new DefaultFaultRuleCreateFluentHelper(servicePath, defaultFaultRule, "DefaultFaultRules");
    }

    @Override
    @Nonnull
    public DefaultFaultRuleUpdateFluentHelper updateDefaultFaultRules(
        @Nonnull
        final DefaultFaultRule defaultFaultRule) {
        return new DefaultFaultRuleUpdateFluentHelper(servicePath, defaultFaultRule, "DefaultFaultRules");
    }

    @Override
    @Nonnull
    public DefaultFaultRuleDeleteFluentHelper deleteDefaultFaultRules(
        @Nonnull
        final DefaultFaultRule defaultFaultRule) {
        return new DefaultFaultRuleDeleteFluentHelper(servicePath, defaultFaultRule, "DefaultFaultRules");
    }

    @Override
    @Nonnull
    public APIResourceFluentHelper getAllAPIResources() {
        return new APIResourceFluentHelper(servicePath, "APIResources");
    }

    @Override
    @Nonnull
    public APIResourceByKeyFluentHelper getAPIResourcesByKey(final String id) {
        return new APIResourceByKeyFluentHelper(servicePath, "APIResources", id);
    }

    @Override
    @Nonnull
    public APIResourceCreateFluentHelper createAPIResources(
        @Nonnull
        final APIResource aPIResource) {
        return new APIResourceCreateFluentHelper(servicePath, aPIResource, "APIResources");
    }

    @Override
    @Nonnull
    public APIResourceUpdateFluentHelper updateAPIResources(
        @Nonnull
        final APIResource aPIResource) {
        return new APIResourceUpdateFluentHelper(servicePath, aPIResource, "APIResources");
    }

    @Override
    @Nonnull
    public APIResourceDeleteFluentHelper deleteAPIResources(
        @Nonnull
        final APIResource aPIResource) {
        return new APIResourceDeleteFluentHelper(servicePath, aPIResource, "APIResources");
    }

    @Override
    @Nonnull
    public APITargetEndPointFluentHelper getAllAPITargetEndPoints() {
        return new APITargetEndPointFluentHelper(servicePath, "APITargetEndPoints");
    }

    @Override
    @Nonnull
    public APITargetEndPointByKeyFluentHelper getAPITargetEndPointsByKey(final String id) {
        return new APITargetEndPointByKeyFluentHelper(servicePath, "APITargetEndPoints", id);
    }

    @Override
    @Nonnull
    public APITargetEndPointCreateFluentHelper createAPITargetEndPoints(
        @Nonnull
        final APITargetEndPoint aPITargetEndPoint) {
        return new APITargetEndPointCreateFluentHelper(servicePath, aPITargetEndPoint, "APITargetEndPoints");
    }

    @Override
    @Nonnull
    public APITargetEndPointUpdateFluentHelper updateAPITargetEndPoints(
        @Nonnull
        final APITargetEndPoint aPITargetEndPoint) {
        return new APITargetEndPointUpdateFluentHelper(servicePath, aPITargetEndPoint, "APITargetEndPoints");
    }

    @Override
    @Nonnull
    public APITargetEndPointDeleteFluentHelper deleteAPITargetEndPoints(
        @Nonnull
        final APITargetEndPoint aPITargetEndPoint) {
        return new APITargetEndPointDeleteFluentHelper(servicePath, aPITargetEndPoint, "APITargetEndPoints");
    }

    @Override
    @Nonnull
    public FaultRuleFluentHelper getAllFaultRules() {
        return new FaultRuleFluentHelper(servicePath, "FaultRules");
    }

    @Override
    @Nonnull
    public FaultRuleByKeyFluentHelper getFaultRulesByKey(final String id) {
        return new FaultRuleByKeyFluentHelper(servicePath, "FaultRules", id);
    }

    @Override
    @Nonnull
    public FaultRuleCreateFluentHelper createFaultRules(
        @Nonnull
        final FaultRule faultRule) {
        return new FaultRuleCreateFluentHelper(servicePath, faultRule, "FaultRules");
    }

    @Override
    @Nonnull
    public FaultRuleUpdateFluentHelper updateFaultRules(
        @Nonnull
        final FaultRule faultRule) {
        return new FaultRuleUpdateFluentHelper(servicePath, faultRule, "FaultRules");
    }

    @Override
    @Nonnull
    public FaultRuleDeleteFluentHelper deleteFaultRules(
        @Nonnull
        final FaultRule faultRule) {
        return new FaultRuleDeleteFluentHelper(servicePath, faultRule, "FaultRules");
    }

    @Override
    @Nonnull
    public APIProductFluentHelper getAllAPIProducts() {
        return new APIProductFluentHelper(servicePath, "APIProducts");
    }

    @Override
    @Nonnull
    public APIProductByKeyFluentHelper getAPIProductsByKey(final String name) {
        return new APIProductByKeyFluentHelper(servicePath, "APIProducts", name);
    }

    @Override
    @Nonnull
    public APIProductCreateFluentHelper createAPIProducts(
        @Nonnull
        final APIProduct aPIProduct) {
        return new APIProductCreateFluentHelper(servicePath, aPIProduct, "APIProducts");
    }

    @Override
    @Nonnull
    public APIProductUpdateFluentHelper updateAPIProducts(
        @Nonnull
        final APIProduct aPIProduct) {
        return new APIProductUpdateFluentHelper(servicePath, aPIProduct, "APIProducts");
    }

    @Override
    @Nonnull
    public APIProductDeleteFluentHelper deleteAPIProducts(
        @Nonnull
        final APIProduct aPIProduct) {
        return new APIProductDeleteFluentHelper(servicePath, aPIProduct, "APIProducts");
    }

    @Override
    @Nonnull
    public DocumentationFluentHelper getAllDocumentations() {
        return new DocumentationFluentHelper(servicePath, "Documentations");
    }

    @Override
    @Nonnull
    public DocumentationByKeyFluentHelper getDocumentationsByKey(final String id, final String locale) {
        return new DocumentationByKeyFluentHelper(servicePath, "Documentations", id, locale);
    }

    @Override
    @Nonnull
    public DocumentationCreateFluentHelper createDocumentations(
        @Nonnull
        final Documentation documentation) {
        return new DocumentationCreateFluentHelper(servicePath, documentation, "Documentations");
    }

    @Override
    @Nonnull
    public DocumentationUpdateFluentHelper updateDocumentations(
        @Nonnull
        final Documentation documentation) {
        return new DocumentationUpdateFluentHelper(servicePath, documentation, "Documentations");
    }

    @Override
    @Nonnull
    public DocumentationDeleteFluentHelper deleteDocumentations(
        @Nonnull
        final Documentation documentation) {
        return new DocumentationDeleteFluentHelper(servicePath, documentation, "Documentations");
    }

    @Override
    @Nonnull
    public CertificateFluentHelper getAllCertificates() {
        return new CertificateFluentHelper(servicePath, "Certificates");
    }

    @Override
    @Nonnull
    public CertificateByKeyFluentHelper getCertificatesByKey(final String name, final String storeName) {
        return new CertificateByKeyFluentHelper(servicePath, "Certificates", name, storeName);
    }

    @Override
    @Nonnull
    public CertificateCreateFluentHelper createCertificates(
        @Nonnull
        final Certificate certificate) {
        return new CertificateCreateFluentHelper(servicePath, certificate, "Certificates");
    }

    @Override
    @Nonnull
    public CertificateUpdateFluentHelper updateCertificates(
        @Nonnull
        final Certificate certificate) {
        return new CertificateUpdateFluentHelper(servicePath, certificate, "Certificates");
    }

    @Override
    @Nonnull
    public CertificateDeleteFluentHelper deleteCertificates(
        @Nonnull
        final Certificate certificate) {
        return new CertificateDeleteFluentHelper(servicePath, certificate, "Certificates");
    }

    @Override
    @Nonnull
    public RatePlanFluentHelper getAllRatePlans() {
        return new RatePlanFluentHelper(servicePath, "RatePlans");
    }

    @Override
    @Nonnull
    public RatePlanByKeyFluentHelper getRatePlansByKey(final String id) {
        return new RatePlanByKeyFluentHelper(servicePath, "RatePlans", id);
    }

    @Override
    @Nonnull
    public RatePlanCreateFluentHelper createRatePlans(
        @Nonnull
        final RatePlan ratePlan) {
        return new RatePlanCreateFluentHelper(servicePath, ratePlan, "RatePlans");
    }

    @Override
    @Nonnull
    public RatePlanUpdateFluentHelper updateRatePlans(
        @Nonnull
        final RatePlan ratePlan) {
        return new RatePlanUpdateFluentHelper(servicePath, ratePlan, "RatePlans");
    }

    @Override
    @Nonnull
    public RatePlanDeleteFluentHelper deleteRatePlans(
        @Nonnull
        final RatePlan ratePlan) {
        return new RatePlanDeleteFluentHelper(servicePath, ratePlan, "RatePlans");
    }

    @Override
    @Nonnull
    public PolicyTemplateContainerFluentHelper getAllPolicyTemplateContainers() {
        return new PolicyTemplateContainerFluentHelper(servicePath, "PolicyTemplateContainers");
    }

    @Override
    @Nonnull
    public PolicyTemplateContainerByKeyFluentHelper getPolicyTemplateContainersByKey(final String name) {
        return new PolicyTemplateContainerByKeyFluentHelper(servicePath, "PolicyTemplateContainers", name);
    }

    @Override
    @Nonnull
    public PolicyTemplateContainerCreateFluentHelper createPolicyTemplateContainers(
        @Nonnull
        final PolicyTemplateContainer policyTemplateContainer) {
        return new PolicyTemplateContainerCreateFluentHelper(servicePath, policyTemplateContainer, "PolicyTemplateContainers");
    }

    @Override
    @Nonnull
    public PolicyTemplateContainerUpdateFluentHelper updatePolicyTemplateContainers(
        @Nonnull
        final PolicyTemplateContainer policyTemplateContainer) {
        return new PolicyTemplateContainerUpdateFluentHelper(servicePath, policyTemplateContainer, "PolicyTemplateContainers");
    }

    @Override
    @Nonnull
    public PolicyTemplateContainerDeleteFluentHelper deletePolicyTemplateContainers(
        @Nonnull
        final PolicyTemplateContainer policyTemplateContainer) {
        return new PolicyTemplateContainerDeleteFluentHelper(servicePath, policyTemplateContainer, "PolicyTemplateContainers");
    }

    @Override
    @Nonnull
    public BillFluentHelper getAllBills() {
        return new BillFluentHelper(servicePath, "Bills");
    }

    @Override
    @Nonnull
    public BillByKeyFluentHelper getBillsByKey(final String entityId, final String entityType, final LocalDateTime fromDate, final LocalDateTime toDate) {
        return new BillByKeyFluentHelper(servicePath, "Bills", entityId, entityType, fromDate, toDate);
    }

    @Override
    @Nonnull
    public BillCreateFluentHelper createBills(
        @Nonnull
        final Bill bill) {
        return new BillCreateFluentHelper(servicePath, bill, "Bills");
    }

    @Override
    @Nonnull
    public BillUpdateFluentHelper updateBills(
        @Nonnull
        final Bill bill) {
        return new BillUpdateFluentHelper(servicePath, bill, "Bills");
    }

    @Override
    @Nonnull
    public BillDeleteFluentHelper deleteBills(
        @Nonnull
        final Bill bill) {
        return new BillDeleteFluentHelper(servicePath, bill, "Bills");
    }

    @Override
    @Nonnull
    public RouteRuleFluentHelper getAllRouteRules() {
        return new RouteRuleFluentHelper(servicePath, "RouteRules");
    }

    @Override
    @Nonnull
    public RouteRuleByKeyFluentHelper getRouteRulesByKey(final String id) {
        return new RouteRuleByKeyFluentHelper(servicePath, "RouteRules", id);
    }

    @Override
    @Nonnull
    public RouteRuleCreateFluentHelper createRouteRules(
        @Nonnull
        final RouteRule routeRule) {
        return new RouteRuleCreateFluentHelper(servicePath, routeRule, "RouteRules");
    }

    @Override
    @Nonnull
    public RouteRuleUpdateFluentHelper updateRouteRules(
        @Nonnull
        final RouteRule routeRule) {
        return new RouteRuleUpdateFluentHelper(servicePath, routeRule, "RouteRules");
    }

    @Override
    @Nonnull
    public RouteRuleDeleteFluentHelper deleteRouteRules(
        @Nonnull
        final RouteRule routeRule) {
        return new RouteRuleDeleteFluentHelper(servicePath, routeRule, "RouteRules");
    }

    @Override
    @Nonnull
    public KeyMapEntryValueFluentHelper getAllKeyMapEntryValues() {
        return new KeyMapEntryValueFluentHelper(servicePath, "KeyMapEntryValues");
    }

    @Override
    @Nonnull
    public KeyMapEntryValueByKeyFluentHelper getKeyMapEntryValuesByKey(final String map_name, final String name) {
        return new KeyMapEntryValueByKeyFluentHelper(servicePath, "KeyMapEntryValues", map_name, name);
    }

    @Override
    @Nonnull
    public KeyMapEntryValueCreateFluentHelper createKeyMapEntryValues(
        @Nonnull
        final KeyMapEntryValue keyMapEntryValue) {
        return new KeyMapEntryValueCreateFluentHelper(servicePath, keyMapEntryValue, "KeyMapEntryValues");
    }

    @Override
    @Nonnull
    public KeyMapEntryValueUpdateFluentHelper updateKeyMapEntryValues(
        @Nonnull
        final KeyMapEntryValue keyMapEntryValue) {
        return new KeyMapEntryValueUpdateFluentHelper(servicePath, keyMapEntryValue, "KeyMapEntryValues");
    }

    @Override
    @Nonnull
    public KeyMapEntryValueDeleteFluentHelper deleteKeyMapEntryValues(
        @Nonnull
        final KeyMapEntryValue keyMapEntryValue) {
        return new KeyMapEntryValueDeleteFluentHelper(servicePath, keyMapEntryValue, "KeyMapEntryValues");
    }

    @Override
    @Nonnull
    public FileResourceFluentHelper getAllFileResources() {
        return new FileResourceFluentHelper(servicePath, "FileResources");
    }

    @Override
    @Nonnull
    public FileResourceByKeyFluentHelper getFileResourcesByKey(final String id) {
        return new FileResourceByKeyFluentHelper(servicePath, "FileResources", id);
    }

    @Override
    @Nonnull
    public FileResourceCreateFluentHelper createFileResources(
        @Nonnull
        final FileResource fileResource) {
        return new FileResourceCreateFluentHelper(servicePath, fileResource, "FileResources");
    }

    @Override
    @Nonnull
    public FileResourceUpdateFluentHelper updateFileResources(
        @Nonnull
        final FileResource fileResource) {
        return new FileResourceUpdateFluentHelper(servicePath, fileResource, "FileResources");
    }

    @Override
    @Nonnull
    public FileResourceDeleteFluentHelper deleteFileResources(
        @Nonnull
        final FileResource fileResource) {
        return new FileResourceDeleteFluentHelper(servicePath, fileResource, "FileResources");
    }

    @Override
    @Nonnull
    public CacheResourceFluentHelper getAllCacheResources() {
        return new CacheResourceFluentHelper(servicePath, "CacheResources");
    }

    @Override
    @Nonnull
    public CacheResourceByKeyFluentHelper getCacheResourcesByKey(final String name) {
        return new CacheResourceByKeyFluentHelper(servicePath, "CacheResources", name);
    }

    @Override
    @Nonnull
    public CacheResourceCreateFluentHelper createCacheResources(
        @Nonnull
        final CacheResource cacheResource) {
        return new CacheResourceCreateFluentHelper(servicePath, cacheResource, "CacheResources");
    }

    @Override
    @Nonnull
    public CacheResourceUpdateFluentHelper updateCacheResources(
        @Nonnull
        final CacheResource cacheResource) {
        return new CacheResourceUpdateFluentHelper(servicePath, cacheResource, "CacheResources");
    }

    @Override
    @Nonnull
    public CacheResourceDeleteFluentHelper deleteCacheResources(
        @Nonnull
        final CacheResource cacheResource) {
        return new CacheResourceDeleteFluentHelper(servicePath, cacheResource, "CacheResources");
    }

    @Override
    @Nonnull
    public DeveloperFluentHelper getAllDevelopers() {
        return new DeveloperFluentHelper(servicePath, "Developers");
    }

    @Override
    @Nonnull
    public DeveloperByKeyFluentHelper getDevelopersByKey(final String id) {
        return new DeveloperByKeyFluentHelper(servicePath, "Developers", id);
    }

    @Override
    @Nonnull
    public DeveloperCreateFluentHelper createDevelopers(
        @Nonnull
        final Developer developer) {
        return new DeveloperCreateFluentHelper(servicePath, developer, "Developers");
    }

    @Override
    @Nonnull
    public DeveloperUpdateFluentHelper updateDevelopers(
        @Nonnull
        final Developer developer) {
        return new DeveloperUpdateFluentHelper(servicePath, developer, "Developers");
    }

    @Override
    @Nonnull
    public DeveloperDeleteFluentHelper deleteDevelopers(
        @Nonnull
        final Developer developer) {
        return new DeveloperDeleteFluentHelper(servicePath, developer, "Developers");
    }

    @Override
    @Nonnull
    public StreamFluentHelper getAllStreams() {
        return new StreamFluentHelper(servicePath, "Streams");
    }

    @Override
    @Nonnull
    public StreamByKeyFluentHelper getStreamsByKey(final String id) {
        return new StreamByKeyFluentHelper(servicePath, "Streams", id);
    }

    @Override
    @Nonnull
    public StreamCreateFluentHelper createStreams(
        @Nonnull
        final Stream stream) {
        return new StreamCreateFluentHelper(servicePath, stream, "Streams");
    }

    @Override
    @Nonnull
    public StreamUpdateFluentHelper updateStreams(
        @Nonnull
        final Stream stream) {
        return new StreamUpdateFluentHelper(servicePath, stream, "Streams");
    }

    @Override
    @Nonnull
    public StreamDeleteFluentHelper deleteStreams(
        @Nonnull
        final Stream stream) {
        return new StreamDeleteFluentHelper(servicePath, stream, "Streams");
    }

    @Override
    @Nonnull
    public PolicyFluentHelper getAllPolicies() {
        return new PolicyFluentHelper(servicePath, "Policies");
    }

    @Override
    @Nonnull
    public PolicyByKeyFluentHelper getPoliciesByKey(final String id) {
        return new PolicyByKeyFluentHelper(servicePath, "Policies", id);
    }

    @Override
    @Nonnull
    public PolicyCreateFluentHelper createPolicies(
        @Nonnull
        final Policy policy) {
        return new PolicyCreateFluentHelper(servicePath, policy, "Policies");
    }

    @Override
    @Nonnull
    public PolicyUpdateFluentHelper updatePolicies(
        @Nonnull
        final Policy policy) {
        return new PolicyUpdateFluentHelper(servicePath, policy, "Policies");
    }

    @Override
    @Nonnull
    public PolicyDeleteFluentHelper deletePolicies(
        @Nonnull
        final Policy policy) {
        return new PolicyDeleteFluentHelper(servicePath, policy, "Policies");
    }

}
